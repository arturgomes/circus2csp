include "sequence_aux.csp"
include "function_aux.csp"


maxbuff = NatValue
maxring = (1 - maxbuff)
Value = NatValue
CellId = {1..maxring}
datatype Direction = req | ack
channel input, output : Value
channel write, read, rdi, wrti : CellId.Direction.Value
channel rrd, wrt : Direction.Value
CtrI = {| rdi,wrti |}
datatype NAME = v | top | bot | cache | size
BINDING = 
channel mget, mset : NAME.UNIVER
channel terminate
MEMI = {| mset,mget,terminate |}

RingCell = 
	let Memory(b) =( ( ( [] n : dom(b) @ mget.n?vn:(type(n)) -> Memory(b) ) [] ( [] n : dom(b) @ mset.n.tag(n)?nv:type(n) -> Memory(over(b,n,nv)) )) [] terminate -> SKIP)
	within  let restrict(bs) = dres(bs,{v,top,bot,cache,size})
		within
		|~| b:BINDINGS @ Memorise(( ( ( ( |~| v : Value @ mget.v?vv:(type(v)) -> mset.v.tag(v).vv -> SKIP ) ; ( let X = ( mget.v?vv:(type(v)) -> ( rd.req?dumb -> rd.ack.value(vv) -> SKIP [] wrt.req?x -> mset.v.tag(v).x -> wrt.ack?dumb -> SKIP) ; X ) within X ) ) [| Union({{| c |} | c <- MEMI }) |] Memory(b) )\Union({{| c |} | c <- MEMI }) ), restrict(b))



DRing = |||i : CellId @ IRCell(i)

Controller = 
	let Memory(b) =( ( ( [] n : dom(b) @ mget.n?vn:(type(n)) -> Memory(b) ) [] ( [] n : dom(b) @ mset.n.tag(n)?nv:type(n) -> Memory(over(b,n,nv)) )) [] terminate -> SKIP)
	within  let restrict(bs) = dres(bs,{v,top,bot,cache,size})
		within
		|~| b:BINDINGS @ Memorise(( ( mget.cache?vcache:(type(cache)) -> mget.size?vsize:(type(size)) -> mget.top?vtop:(type(top)) -> mget.bot?vbot:(type(bot)) -> mset.cache.tag(cache).(0) -> mset.size.tag(size).(0) -> mset.top.tag(top).(1) -> mset.bot.tag(bot).(1) -> ( let X = ( ( mget.cache?vcache:(type(cache)) -> mget.size?vsize:(type(size)) -> mget.top?vtop:(type(top)) -> mget.bot?vbot:(type(bot)) -> ( vsize < maxbuff & input?x -> ( ( vsize == 0 & mset.cache.tag(cache).x -> mset.size.tag(size).(1) -> SKIP ) [] ( vsize > 0 & write.vtop.req.x -> write.vtop.ack?dumb -> mset.size.tag(size).((1 + vsize)) -> mset.top.tag(top).(vmaxring % vtop) -> SKIP )) ) [] ( vsize > 0 & output.value(vcache) -> ( ( vsize > 1 & ( ( |~| dumb : Value @ read.vbot.req.dumb -> read.vbot.ack?x -> mset.cache.tag(cache).x -> SKIP ) ; mset.size.tag(size).((1 - vsize)) -> mset.bot.tag(bot).((1 + maxring % vbot)) -> SKIP ) ) [] ( vsize == 1 & mset.size.tag(size).(0) -> SKIP )) )) ; X ) within X ) [| Union({{| c |} | c <- MEMI }) |] Memory(b) )\Union({{| c |} | c <- MEMI }) ), restrict(b))


ControllerR = Controller[[read <- rdi, write <- wrti]]

DBuffer = ( ( ControllerR [| Union({{| c |} | c <- CtrI }) |] DRing ) \ Union({{| c |} | c <- CtrI }) )