include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..2}
datatype BUTTON = ON | OFF
datatype SWITCH = ENABLED | DISABLED
datatype DIRECTION = FORWARD | BACKWARDS
datatype STATEPHASE = connectThePatient | initPhase | prepPhase | endPhase
datatype ACTIVITY = rinsingEBC | applicationArterialBolus | anticoagDelivRun | reinfProcess | preparationOfDF | priming | rinsing | idle
datatype LIDD = OPEN | CLOSED
datatype CONCENTRATE = ACID | ACETATE | BICARBONATE

HOUR = {0..1}
MINUTE = {0..1}
SECOND = {0..1}
TIME = (HOUR,MINUTE)
datatype HDMODE = RUN | ALARM | BYPASS
datatype LAMP = GREEN | YELLOW
datatype BOOL = TRUE | FALSE
chkInterval = 1
--------------------------------
-- The universe of values
 datatype UNIVERSE = Nat.NatValue | SWI.SWITCH | LID.LIDD | DIR.DIRECTION | PAC.Set(ACTIVITY) | PST.Set(STATEPHASE) | HDM.HDMODE | BOO.BOOL | BUT.BUTTON | CON.CONCENTRATE | TIM.TIME

--------------------------------
--Conversions
subtype U_NAT = Nat.NatValue
subtype U_SWI = SWI.SWITCH
subtype U_LID = LID.LIDD
subtype U_DIR = DIR.DIRECTION
subtype U_PAC = PAC.Set(ACTIVITY)
subtype U_PST = PST.Set(STATEPHASE)
subtype U_HDM = HDM.HDMODE
subtype U_BOO = BOO.BOOL
subtype U_BUT = BUT.BUTTON
subtype U_CON = CON.CONCENTRATE
subtype U_TIM = TIM.TIME

value(Nat.v) = v
value(SWI.v) = v
value(LID.v) = v
value(DIR.v) = v
value(PAC.v) = v
value(PST.v) = v
value(HDM.v) = v
value(BOO.v) = v
value(BUT.v) = v
value(CON.v) = v
value(TIM.v) = v

type(x) =
	 if x == sv_HDMachine_airVolLimit then U_NAT
	 else if x == sv_HDMachine_airVol then U_NAT
	 else if x == sv_HDMachine_alarm then U_SWI
	 else if x == sv_HDMachine_artBolusVol then U_NAT
	 else if x == sv_HDMachine_apTransdPress then U_NAT
	 else if x == sv_HDMachine_bloodFlowInEBC then U_NAT
	 else if x == sv_HDMachine_bypassValve then U_LID
	 else if x == sv_HDMachine_fflowDirect then U_DIR
	 else if x == sv_HDMachine_hdActivity then U_PAC
	 else if x == sv_HDMachine_hdMachineState then U_PST
	 else if x == sv_HDMachine_hdMode then U_HDM
	 else if x == sv_HDMachine_infSalineVol then U_NAT
	 else if x == sv_HDMachine_lastNonZeroBF then U_NAT
	 else if x == sv_HDMachine_lowerPressureLimit then U_NAT
	 else if x == sv_HDMachine_netFluidRemovalRate then U_NAT
	 else if x == sv_HDMachine_netFluidRemoval then U_SWI
	 else if x == sv_HDMachine_rotDirectionBP then U_DIR
	 else if x == sv_HDMachine_rotDirectionUFP then U_DIR
	 else if x == sv_HDMachine_safeUpperLimit then U_NAT
	 else if x == sv_HDMachine_timerIntervalR9 then U_NAT
	 else if x == sv_HDMachine_timerIntervalR10 then U_NAT
	 else if x == sv_HDMachine_timerIntervalR11 then U_NAT
	 else if x == sv_HDMachine_timerIntervalR12 then U_NAT
	 else if x == sv_HDMachine_timerIntervalR13 then U_NAT
	 else if x == sv_HDMachine_time then U_NAT
	 else if x == sv_HDMachine_upperPressureLimit then U_NAT
	 else if x == sv_HDMachine_volumeInEBC then U_NAT
	 else if x == sv_HDMachine_vpTransdPress then U_NAT
	 else if x == sv_HDMachine_sadSensorFlow then U_NAT
	 else if x == sv_HDMachine_bloodLines then U_BOO
	 else if x == sv_HDMachine_minUFRateTreat then U_BUT
	 else if x == sv_HDMachine_fillingBPRate then U_NAT
	 else if x == sv_HDMachine_rinsingBPRate then U_NAT
	 else if x == sv_HDMachine_rinsingTime then U_NAT
	 else if x == sv_HDMachine_ufRateForRinsing then U_NAT
	 else if x == sv_HDMachine_ufVolForRinsing then U_NAT
	 else if x == sv_HDMachine_bloodFlowForConnectingPatient then U_NAT
	 else if x == sv_HDMachine_conductivity then U_NAT
	 else if x == sv_HDMachine_bicarbonateAcetate then U_CON
	 else if x == sv_HDMachine_bicarbonateConductivity then U_NAT
	 else if x == sv_HDMachine_dfTemperature then U_NAT
	 else if x == sv_HDMachine_dfFlow then U_NAT
	 else if x == sv_HDMachine_ufVol then U_NAT
	 else if x == sv_HDMachine_therapyTime then U_NAT
	 else if x == sv_HDMachine_minUFRate then U_NAT
	 else if x == sv_HDMachine_maxUFRate then U_NAT
	 else if x == sv_HDMachine_limitDeltaMinMaxAP then U_NAT
	 else if x == sv_HDMachine_actualTMPMaxTMP then U_NAT
	 else if x == sv_HDMachine_limitsTMP then U_SWI
	 else if x == sv_HDMachine_lowHigh then U_NAT
	 else if x == sv_HDMachine_extendedTMPLimitRange then U_SWI
	 else if x == sv_HDMachine_heparinStopTime then U_TIM
	 else if x == sv_HDMachine_heparinBolusVol then U_NAT
	 else if x == sv_HDMachine_heparinProfileRate then U_NAT
	 else if x == sv_HDMachine_treatmentWithoutHeparin then U_SWI
	 else if x == sv_HDMachine_syringeType then U_NAT
	 else if x == sv_SysClock_time then U_NAT
	 else {}

tag(x) =
	 if x == sv_HDMachine_airVolLimit then Nat
	 else if x == sv_HDMachine_airVol then Nat
	 else if x == sv_HDMachine_alarm then SWI
	 else if x == sv_HDMachine_artBolusVol then Nat
	 else if x == sv_HDMachine_apTransdPress then Nat
	 else if x == sv_HDMachine_bloodFlowInEBC then Nat
	 else if x == sv_HDMachine_bypassValve then LID
	 else if x == sv_HDMachine_fflowDirect then DIR
	 else if x == sv_HDMachine_hdActivity then PAC
	 else if x == sv_HDMachine_hdMachineState then PST
	 else if x == sv_HDMachine_hdMode then HDM
	 else if x == sv_HDMachine_infSalineVol then Nat
	 else if x == sv_HDMachine_lastNonZeroBF then Nat
	 else if x == sv_HDMachine_lowerPressureLimit then Nat
	 else if x == sv_HDMachine_netFluidRemovalRate then Nat
	 else if x == sv_HDMachine_netFluidRemoval then SWI
	 else if x == sv_HDMachine_rotDirectionBP then DIR
	 else if x == sv_HDMachine_rotDirectionUFP then DIR
	 else if x == sv_HDMachine_safeUpperLimit then Nat
	 else if x == sv_HDMachine_timerIntervalR9 then Nat
	 else if x == sv_HDMachine_timerIntervalR10 then Nat
	 else if x == sv_HDMachine_timerIntervalR11 then Nat
	 else if x == sv_HDMachine_timerIntervalR12 then Nat
	 else if x == sv_HDMachine_timerIntervalR13 then Nat
	 else if x == sv_HDMachine_time then Nat
	 else if x == sv_HDMachine_upperPressureLimit then Nat
	 else if x == sv_HDMachine_volumeInEBC then Nat
	 else if x == sv_HDMachine_vpTransdPress then Nat
	 else if x == sv_HDMachine_sadSensorFlow then Nat
	 else if x == sv_HDMachine_bloodLines then BOO
	 else if x == sv_HDMachine_minUFRateTreat then BUT
	 else if x == sv_HDMachine_fillingBPRate then Nat
	 else if x == sv_HDMachine_rinsingBPRate then Nat
	 else if x == sv_HDMachine_rinsingTime then Nat
	 else if x == sv_HDMachine_ufRateForRinsing then Nat
	 else if x == sv_HDMachine_ufVolForRinsing then Nat
	 else if x == sv_HDMachine_bloodFlowForConnectingPatient then Nat
	 else if x == sv_HDMachine_conductivity then Nat
	 else if x == sv_HDMachine_bicarbonateAcetate then CON
	 else if x == sv_HDMachine_bicarbonateConductivity then Nat
	 else if x == sv_HDMachine_dfTemperature then Nat
	 else if x == sv_HDMachine_dfFlow then Nat
	 else if x == sv_HDMachine_ufVol then Nat
	 else if x == sv_HDMachine_therapyTime then Nat
	 else if x == sv_HDMachine_minUFRate then Nat
	 else if x == sv_HDMachine_maxUFRate then Nat
	 else if x == sv_HDMachine_limitDeltaMinMaxAP then Nat
	 else if x == sv_HDMachine_actualTMPMaxTMP then Nat
	 else if x == sv_HDMachine_limitsTMP then SWI
	 else if x == sv_HDMachine_lowHigh then Nat
	 else if x == sv_HDMachine_extendedTMPLimitRange then SWI
	 else if x == sv_HDMachine_heparinStopTime then TIM
	 else if x == sv_HDMachine_heparinBolusVol then Nat
	 else if x == sv_HDMachine_heparinProfileRate then Nat
	 else if x == sv_HDMachine_treatmentWithoutHeparin then SWI
	 else if x == sv_HDMachine_syringeType then Nat
	 else if x == sv_SysClock_time then Nat
	 else Nat


--------------------------------
-- MEMORY
--------------------------------
Memory(b) =
   ([] n:dom(b) @ mget.n!(apply(b,n)) -> Memory(b))
   [] ([] n:dom(b) @ mset.n?x:type(n) -> Memory(over(b,n,x)))
   [] terminate -> SKIP

Memorise(P, b) = 
    ((P; terminate -> SKIP) [| MEM_I |] Memory(b)) \ MEM_I

datatype NAME = sv_HDMachine_airVolLimit | sv_HDMachine_airVol | sv_HDMachine_alarm | sv_HDMachine_artBolusVol | sv_HDMachine_apTransdPress | sv_HDMachine_bloodFlowInEBC | sv_HDMachine_bypassValve | sv_HDMachine_fflowDirect | sv_HDMachine_hdActivity | sv_HDMachine_hdMachineState | sv_HDMachine_hdMode | sv_HDMachine_infSalineVol | sv_HDMachine_lastNonZeroBF | sv_HDMachine_lowerPressureLimit | sv_HDMachine_netFluidRemovalRate | sv_HDMachine_netFluidRemoval | sv_HDMachine_rotDirectionBP | sv_HDMachine_rotDirectionUFP | sv_HDMachine_safeUpperLimit | sv_HDMachine_timerIntervalR9 | sv_HDMachine_timerIntervalR10 | sv_HDMachine_timerIntervalR11 | sv_HDMachine_timerIntervalR12 | sv_HDMachine_timerIntervalR13 | sv_HDMachine_time | sv_HDMachine_upperPressureLimit | sv_HDMachine_volumeInEBC | sv_HDMachine_vpTransdPress | sv_HDMachine_sadSensorFlow | sv_HDMachine_bloodLines | sv_HDMachine_minUFRateTreat | sv_HDMachine_fillingBPRate | sv_HDMachine_rinsingBPRate | sv_HDMachine_rinsingTime | sv_HDMachine_ufRateForRinsing | sv_HDMachine_ufVolForRinsing | sv_HDMachine_bloodFlowForConnectingPatient | sv_HDMachine_conductivity | sv_HDMachine_bicarbonateAcetate | sv_HDMachine_bicarbonateConductivity | sv_HDMachine_dfTemperature | sv_HDMachine_dfFlow | sv_HDMachine_ufVol | sv_HDMachine_therapyTime | sv_HDMachine_minUFRate | sv_HDMachine_maxUFRate | sv_HDMachine_limitDeltaMinMaxAP | sv_HDMachine_actualTMPMaxTMP | sv_HDMachine_limitsTMP | sv_HDMachine_lowHigh | sv_HDMachine_extendedTMPLimitRange | sv_HDMachine_heparinStopTime | sv_HDMachine_heparinBolusVol | sv_HDMachine_heparinProfileRate | sv_HDMachine_treatmentWithoutHeparin | sv_HDMachine_syringeType | sv_SysClock_time
--------------------------------
-- All possible bidings
NAMES_VALUES = seq({seq({(n,v) | v <- type(n)}) | n <- NAME})
BINDINGS = {set(b) | b <- set(distCartProd(NAMES_VALUES))}

channel mget, mset : NAME.UNIVERSE
channel terminate
MEM_I = {| mset,mget,terminate |}

HDEnv = ( ( HDMachine [| Union({{| c |} | c <- { tick,getCurrentTime } }) |] SysClock ) \ Union({{| c |} | c <- { tick,getCurrentTime } }) )

HDMachine = 
	( let restrict(bs) = dres(bs,{sv_HDMachine_airVolLimit,sv_HDMachine_airVol,sv_HDMachine_alarm,sv_HDMachine_artBolusVol,sv_HDMachine_apTransdPress,sv_HDMachine_bloodFlowInEBC,sv_HDMachine_bypassValve,sv_HDMachine_fflowDirect,sv_HDMachine_hdActivity,sv_HDMachine_hdMachineState,sv_HDMachine_hdMode,sv_HDMachine_infSalineVol,sv_HDMachine_lastNonZeroBF,sv_HDMachine_lowerPressureLimit,sv_HDMachine_netFluidRemovalRate,sv_HDMachine_netFluidRemoval,sv_HDMachine_rotDirectionBP,sv_HDMachine_rotDirectionUFP,sv_HDMachine_safeUpperLimit,sv_HDMachine_timerIntervalR9,sv_HDMachine_timerIntervalR10,sv_HDMachine_timerIntervalR11,sv_HDMachine_timerIntervalR12,sv_HDMachine_timerIntervalR13,sv_HDMachine_time,sv_HDMachine_upperPressureLimit,sv_HDMachine_volumeInEBC,sv_HDMachine_vpTransdPress,sv_HDMachine_sadSensorFlow,sv_HDMachine_bloodLines,sv_HDMachine_minUFRateTreat,sv_HDMachine_fillingBPRate,sv_HDMachine_rinsingBPRate,sv_HDMachine_rinsingTime,sv_HDMachine_ufRateForRinsing,sv_HDMachine_ufVolForRinsing,sv_HDMachine_bloodFlowForConnectingPatient,sv_HDMachine_conductivity,sv_HDMachine_bicarbonateAcetate,sv_HDMachine_bicarbonateConductivity,sv_HDMachine_dfTemperature,sv_HDMachine_dfFlow,sv_HDMachine_ufVol,sv_HDMachine_therapyTime,sv_HDMachine_minUFRate,sv_HDMachine_maxUFRate,sv_HDMachine_limitDeltaMinMaxAP,sv_HDMachine_actualTMPMaxTMP,sv_HDMachine_limitsTMP,sv_HDMachine_lowHigh,sv_HDMachine_extendedTMPLimitRange,sv_HDMachine_heparinStopTime,sv_HDMachine_heparinBolusVol,sv_HDMachine_heparinProfileRate,sv_HDMachine_treatmentWithoutHeparin,sv_HDMachine_syringeType,sv_SysClock_time})
		within
		|~| b:BINDINGS @ Memorise(( let muHDMachineMain = ( ( let muHDGenCompInit = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( mget.sv_HDMachine_airVolLimit?v_sv_HDMachine_airVolLimit:(type(sv_HDMachine_airVolLimit)) -> mset.sv_HDMachine_airVolLimit.((tag(sv_HDMachine_airVolLimit)).0) -> SKIP ; mget.sv_HDMachine_airVol?v_sv_HDMachine_airVol:(type(sv_HDMachine_airVol)) -> mset.sv_HDMachine_airVol.((tag(sv_HDMachine_airVol)).0) -> SKIP ) ; mget.sv_HDMachine_alarm?v_sv_HDMachine_alarm:(type(sv_HDMachine_alarm)) -> mset.sv_HDMachine_alarm.((tag(sv_HDMachine_alarm)).DISABLED) -> SKIP ) ; mget.sv_HDMachine_apTransdPress?v_sv_HDMachine_apTransdPress:(type(sv_HDMachine_apTransdPress)) -> mset.sv_HDMachine_apTransdPress.((tag(sv_HDMachine_apTransdPress)).0) -> SKIP ) ; mget.sv_HDMachine_bloodFlowInEBC?v_sv_HDMachine_bloodFlowInEBC:(type(sv_HDMachine_bloodFlowInEBC)) -> mset.sv_HDMachine_bloodFlowInEBC.((tag(sv_HDMachine_bloodFlowInEBC)).0) -> SKIP ) ; mget.sv_HDMachine_bypassValve?v_sv_HDMachine_bypassValve:(type(sv_HDMachine_bypassValve)) -> mset.sv_HDMachine_bypassValve.((tag(sv_HDMachine_bypassValve)).CLOSED) -> SKIP ) ; mget.sv_HDMachine_fflowDirect?v_sv_HDMachine_fflowDirect:(type(sv_HDMachine_fflowDirect)) -> mset.sv_HDMachine_fflowDirect.((tag(sv_HDMachine_fflowDirect)).FORWARD) -> SKIP ) ; mget.sv_HDMachine_hdActivity?v_sv_HDMachine_hdActivity:(type(sv_HDMachine_hdActivity)) -> mset.sv_HDMachine_hdActivity.((tag(sv_HDMachine_hdActivity)).{idle}) -> SKIP ) ; mget.sv_HDMachine_hdMachineState?v_sv_HDMachine_hdMachineState:(type(sv_HDMachine_hdMachineState)) -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).{initPhase}) -> SKIP ) ; mget.sv_HDMachine_infSalineVol?v_sv_HDMachine_infSalineVol:(type(sv_HDMachine_infSalineVol)) -> mset.sv_HDMachine_infSalineVol.((tag(sv_HDMachine_infSalineVol)).0) -> SKIP ) ; mget.sv_HDMachine_lastNonZeroBF?v_sv_HDMachine_lastNonZeroBF:(type(sv_HDMachine_lastNonZeroBF)) -> mset.sv_HDMachine_lastNonZeroBF.((tag(sv_HDMachine_lastNonZeroBF)).0) -> SKIP ) ; mget.sv_HDMachine_time?v_sv_HDMachine_time:(type(sv_HDMachine_time)) -> mset.sv_HDMachine_time.((tag(sv_HDMachine_time)).0) -> SKIP ) ; mget.sv_HDMachine_netFluidRemovalRate?v_sv_HDMachine_netFluidRemovalRate:(type(sv_HDMachine_netFluidRemovalRate)) -> mset.sv_HDMachine_netFluidRemovalRate.((tag(sv_HDMachine_netFluidRemovalRate)).0) -> SKIP ) ; mget.sv_HDMachine_netFluidRemoval?v_sv_HDMachine_netFluidRemoval:(type(sv_HDMachine_netFluidRemoval)) -> mset.sv_HDMachine_netFluidRemoval.((tag(sv_HDMachine_netFluidRemoval)).DISABLED) -> SKIP ) ; mget.sv_HDMachine_rotDirectionBP?v_sv_HDMachine_rotDirectionBP:(type(sv_HDMachine_rotDirectionBP)) -> mset.sv_HDMachine_rotDirectionBP.((tag(sv_HDMachine_rotDirectionBP)).FORWARD) -> SKIP ) ; mget.sv_HDMachine_rotDirectionUFP?v_sv_HDMachine_rotDirectionUFP:(type(sv_HDMachine_rotDirectionUFP)) -> mset.sv_HDMachine_rotDirectionUFP.((tag(sv_HDMachine_rotDirectionUFP)).FORWARD) -> SKIP ) ; mget.sv_HDMachine_safeUpperLimit?v_sv_HDMachine_safeUpperLimit:(type(sv_HDMachine_safeUpperLimit)) -> mset.sv_HDMachine_safeUpperLimit.((tag(sv_HDMachine_safeUpperLimit)).0) -> SKIP ) ; mget.sv_HDMachine_timerIntervalR9?v_sv_HDMachine_timerIntervalR9:(type(sv_HDMachine_timerIntervalR9)) -> mset.sv_HDMachine_timerIntervalR9.((tag(sv_HDMachine_timerIntervalR9)).0) -> SKIP ) ; mget.sv_HDMachine_timerIntervalR10?v_sv_HDMachine_timerIntervalR10:(type(sv_HDMachine_timerIntervalR10)) -> mset.sv_HDMachine_timerIntervalR10.((tag(sv_HDMachine_timerIntervalR10)).0) -> SKIP ) ; mget.sv_HDMachine_timerIntervalR11?v_sv_HDMachine_timerIntervalR11:(type(sv_HDMachine_timerIntervalR11)) -> mset.sv_HDMachine_timerIntervalR11.((tag(sv_HDMachine_timerIntervalR11)).0) -> SKIP ) ; mget.sv_HDMachine_timerIntervalR12?v_sv_HDMachine_timerIntervalR12:(type(sv_HDMachine_timerIntervalR12)) -> mset.sv_HDMachine_timerIntervalR12.((tag(sv_HDMachine_timerIntervalR12)).0) -> SKIP ) ; mget.sv_HDMachine_timerIntervalR13?v_sv_HDMachine_timerIntervalR13:(type(sv_HDMachine_timerIntervalR13)) -> mset.sv_HDMachine_timerIntervalR13.((tag(sv_HDMachine_timerIntervalR13)).0) -> SKIP ) ; mget.sv_HDMachine_lowerPressureLimit?v_sv_HDMachine_lowerPressureLimit:(type(sv_HDMachine_lowerPressureLimit)) -> mset.sv_HDMachine_lowerPressureLimit.((tag(sv_HDMachine_lowerPressureLimit)).0) -> SKIP ) ; mget.sv_HDMachine_upperPressureLimit?v_sv_HDMachine_upperPressureLimit:(type(sv_HDMachine_upperPressureLimit)) -> mset.sv_HDMachine_upperPressureLimit.((tag(sv_HDMachine_upperPressureLimit)).0) -> SKIP ) ; mget.sv_HDMachine_volumeInEBC?v_sv_HDMachine_volumeInEBC:(type(sv_HDMachine_volumeInEBC)) -> mset.sv_HDMachine_volumeInEBC.((tag(sv_HDMachine_volumeInEBC)).0) -> SKIP ) ; mget.sv_HDMachine_vpTransdPress?v_sv_HDMachine_vpTransdPress:(type(sv_HDMachine_vpTransdPress)) -> mset.sv_HDMachine_vpTransdPress.((tag(sv_HDMachine_vpTransdPress)).0) -> SKIP ) ; mget.sv_HDMachine_hdMode?v_sv_HDMachine_hdMode:(type(sv_HDMachine_hdMode)) -> mset.sv_HDMachine_hdMode.((tag(sv_HDMachine_hdMode)).RUN) -> SKIP ) ; mget.sv_HDMachine_bloodLines?v_sv_HDMachine_bloodLines:(type(sv_HDMachine_bloodLines)) -> mset.sv_HDMachine_bloodLines.((tag(sv_HDMachine_bloodLines)).FALSE) -> SKIP ) ; mget.sv_HDMachine_minUFRateTreat?v_sv_HDMachine_minUFRateTreat:(type(sv_HDMachine_minUFRateTreat)) -> mset.sv_HDMachine_minUFRateTreat.((tag(sv_HDMachine_minUFRateTreat)).OFF) -> SKIP ) within muHDGenCompInit ) ; ( ( ( ( let muMainTherapy = ( ( ( let muTherapyPreparation = preparationPhase -> ( ( ( ( ( ( ( let muAutomatedSelfTest = autSelfTest -> mset.signalLamp.((tag(signalLamp)).GREEN) -> SKIP within muAutomatedSelfTest ) ; ( let muConnectingTheConcentrate = connectingConcentrate?HDMachine_bicarbonateAcetate -> SKIP within muConnectingTheConcentrate ) ) ; ( let muSetRinsingParameters = inputOfSetRinsingParameters?sFBPRate.sRBPRate.sRTime.sUFRFRinsing.sUFVFRinsing.sBFFCPatient -> setFillingBPRate.sFBPRate -> setRinsingBPRate.sRBPRate -> setRinsingTime.sRTime -> setUfRateForRinsing.sUFRFRinsing -> setUfVolForRinsing.sUFVFRinsing -> setBloodFlowForConnectingPatient.sBFFCPatient -> SKIP within muSetRinsingParameters ) ) ; ( let muInsertingRinsingTestingTubSystem = ( ( ( ( let muInsertRinsingTubingSystem = ( ( let muStdAtrialTubing = atrialTubing -> SKIP within muStdAtrialTubing ) ||| ( let muStdVentricularTubing = ventricularTubing -> SKIP within muStdVentricularTubing ) ) within muInsertRinsingTubingSystem ) ; ( let muSalineBagLevels = salineBagLevel?HDMachine_infSalineVol -> SKIP within muSalineBagLevels ) ) ; ( let muBloodLines = setBloodLines -> mget.sv_HDMachine_bloodLines?v_sv_HDMachine_bloodLines:(type(sv_HDMachine_bloodLines)) -> mset.sv_HDMachine_bloodLines.((tag(sv_HDMachine_bloodLines)).TRUE) -> SKIP within muBloodLines ) ) ; RinsingTesting ) within muInsertingRinsingTestingTubSystem ) ) ; ( let muPrepHeparinPump = insertHeparinSyringe -> heparinLineIsVented -> SKIP within muPrepHeparinPump ) ) ; ( let muSetTreatmentParameters = ( ( ( ( let muSetDFParameters = inputOfSetDFParameters?sCond.sBAc.sBCond.sDFTemp.sDFFlow -> setConductivity.sCond -> setBicarbonateAcetate.sBAc -> setBicarbonateConductivity.sBCond -> setDfTemperature.sDFTemp -> setDfFlow.sDFFlow -> SKIP within muSetDFParameters ) ; ( let muSetUFParameters = inputOfSetUFParameters?sUFVol.sTTime.sMiUFRate.sMaUFRate -> setUfVol.sUFVol -> setTherapyTime.sTTime -> setMinUFRate.sMiUFRate -> setMaxUFRate.sMaUFRate -> SKIP within muSetUFParameters ) ) ; ( let muSetPressureParameters = inputOfSetPressureParameters?sLDMMAP.sATMPMTMP.sLTMP.sLH.sETMPLR -> setLimitDeltaMinMaxAP.sLDMMAP -> setActualTMPMaxTMP.sATMPMTMP -> setLimitsTMP.sLTMP -> setLowHigh.sLH -> setExtendedTMPLimitRange.sETMPLR -> SKIP within muSetPressureParameters ) ) ; SetHeparinParameters ) within muSetTreatmentParameters ) ) ; ( let muRinsingDialyzer = connectDialyzer -> fillArterialDrip -> stopBP -> SKIP within muRinsingDialyzer ) ) within muTherapyPreparation ) ; ( let muTherapyInitiation = therapyInitiation -> ( ( let muConnectPatientStartTherapy = ( ( ( ( ( mget.sv_HDMachine_hdMachineState?v_sv_HDMachine_hdMachineState:(type(sv_HDMachine_hdMachineState)) -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).connectThePatient) -> SKIP ; ( let muEnableUI = mset.signalLamp.((tag(signalLamp)).YELLOW) -> SKIP within muEnableUI ) ) ; ( let muConnectPatientArterially = connPatientArterially -> SKIP within muConnectPatientArterially ) ) ; ( let muSetStopBloodFlow = setBloodFlow?HDMachine_bloodFlowInEBC -> SKIP within muSetStopBloodFlow ) ) ; ( let muConnectPatientVenously = connPatientVenously -> SKIP within muConnectPatientVenously ) ) ; mget.sv_HDMachine_hdMode?v_sv_HDMachine_hdMode:(type(sv_HDMachine_hdMode)) -> mset.signalLamp.((tag(signalLamp)).GREEN) -> mset.sv_HDMachine_hdMode.((tag(sv_HDMachine_hdMode)).RUN) -> SKIP ) within muConnectPatientStartTherapy ) ; ( let muDuringTherapy = ( ( ( ( ( ( let muMonitorBPLimits = SKIP within muMonitorBPLimits ) ||| ( let muTreatMinUFRate = setMinUFRateTreat?ON -> SKIP within muTreatMinUFRate ) ) ||| ( let muHeparinBolus = SKIP within muHeparinBolus ) ) ||| ( let muArterialBolus = setArtBolusVol?HDMachine_artBolusVol -> SKIP within muArterialBolus ) ) ||| ( let muInterruptDialysis = senHDMode.BYPASS -> mset.signalLamp.((tag(signalLamp)).YELLOW) -> SKIP within muInterruptDialysis ) ) ; CompletTreatment ) within muDuringTherapy ) ) within muTherapyInitiation ) ) ; TherapyEnding ) within muMainTherapy ) [| Union({{| c |} | c <- MainTherapyChanSet }) |] ( let muSoftwareRequirements = ( let X = ( ( ( let muArterialBolusReq = ( let muR1 = mget.sv_HDMachine_hdActivity?v_sv_HDMachine_hdActivity:(type(sv_HDMachine_hdActivity)) -> mget.sv_HDMachine_infSalineVol?v_sv_HDMachine_infSalineVol:(type(sv_HDMachine_infSalineVol)) -> (value(v_sv_HDMachine_hdActivity) == {applicationArterialBolus} and value(v_sv_HDMachine_infSalineVol) > 400 & ( ( let muStopBloodFlow = stopBloodFlow -> SKIP within muStopBloodFlow ) ||| ( let muRaiseAlarm = mset.sv_HDMachine_alarm.((tag(sv_HDMachine_alarm)).ENABLED) -> produceAlarmSound -> SKIP within muRaiseAlarm ) ) [] not value(v_sv_HDMachine_hdActivity) == {applicationArterialBolus} and value(v_sv_HDMachine_infSalineVol) > 400 & muR1) within muR1 ) within muArterialBolusReq ) ||| ( let muBloodPumpReq = ( ( ( let muR2 = ( ( let muNoFlowWatchDog = mget.sv_HDMachine_lastNonZeroBF?v_sv_HDMachine_lastNonZeroBF:(type(sv_HDMachine_lastNonZeroBF)) -> mget.sv_HDMachine_time?v_sv_HDMachine_time:(type(sv_HDMachine_time)) -> ((value(v_sv_HDMachine_time) - value(v_sv_HDMachine_lastNonZeroBF)) > 120000 & tick -> ( ( let muStopBP = stopBP -> SKIP within muStopBP ) ; ( let muRaiseAlarm = ( mget.sv_HDMachine_alarm?v_sv_HDMachine_alarm:(type(sv_HDMachine_alarm)) -> mset.sv_HDMachine_alarm.((tag(sv_HDMachine_alarm)).ENABLED) -> SKIP ; produceAlarmSound -> SKIP ) within muRaiseAlarm ) ) [] (value(v_sv_HDMachine_time) - value(v_sv_HDMachine_lastNonZeroBF)) <= 120000 & tick -> muNoFlowWatchDog) within muNoFlowWatchDog ) ||| ( let muBloodFlowSample = senBloodFlowInEBC?HDMachine_bloodFlowInEBC -> ( mget.sv_HDMachine_bloodFlowInEBC?v_sv_HDMachine_bloodFlowInEBC:(type(sv_HDMachine_bloodFlowInEBC)) -> (value(v_sv_HDMachine_bloodFlowInEBC) != 0 & mset.sv_HDMachine_lastNonZeroBF.((tag(sv_HDMachine_lastNonZeroBF)).value(v_sv_HDMachine_time)) -> SKIP [] value(v_sv_HDMachine_bloodFlowInEBC) == 0 & SKIP) ; muBloodFlowSample ) within muBloodFlowSample ) ) within muR2 ) ||| ( let muR3 = mget.sv_HDMachine_bloodFlowInEBC?v_sv_HDMachine_bloodFlowInEBC:(type(sv_HDMachine_bloodFlowInEBC)) -> mget.sv_HDMachine_dfFlow?v_sv_HDMachine_dfFlow:(type(sv_HDMachine_dfFlow)) -> mget.sv_HDMachine_hdMachineState?v_sv_HDMachine_hdMachineState:(type(sv_HDMachine_hdMachineState)) -> (value(v_sv_HDMachine_hdMachineState) == {initPhase} and value(v_sv_HDMachine_bloodFlowInEBC) < ((value(v_sv_HDMachine_dfFlow) * 70) / 100) & ( let muRaiseAlarm = mset.sv_HDMachine_alarm.((tag(sv_HDMachine_alarm)).ENABLED) -> produceAlarmSound -> SKIP within muRaiseAlarm ) [] not value(v_sv_HDMachine_hdMachineState) == {initPhase} and value(v_sv_HDMachine_bloodFlowInEBC) < ((value(v_sv_HDMachine_dfFlow) * 70) / 100) & muR3) within muR3 ) ) ||| ( let muR4 = mget.sv_HDMachine_hdMachineState?v_sv_HDMachine_hdMachineState:(type(sv_HDMachine_hdMachineState)) -> mget.sv_HDMachine_rotDirectionBP?v_sv_HDMachine_rotDirectionBP:(type(sv_HDMachine_rotDirectionBP)) -> (value(v_sv_HDMachine_hdMachineState) == {initPhase} and value(v_sv_HDMachine_rotDirectionBP) == BACKWARDS & ( ( let muStopBP = stopBP -> SKIP within muStopBP ) ||| ( let muRaiseAlarm = mset.sv_HDMachine_alarm.((tag(sv_HDMachine_alarm)).ENABLED) -> produceAlarmSound -> SKIP within muRaiseAlarm ) ) [] not value(v_sv_HDMachine_hdMachineState) == {initPhase} and value(v_sv_HDMachine_rotDirectionBP) == BACKWARDS & muR4) within muR4 ) ) within muBloodPumpReq ) ) ; X ) within X ) within muSoftwareRequirements ) ) [| Union({{| c |} | c <- TherapyPhaseChanSet }) |] ( let muStatePhase = mget.sv_HDMachine_hdMachineState?v_sv_HDMachine_hdMachineState:(type(sv_HDMachine_hdMachineState)) -> ( ( ( preparationPhase -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).prepPhase) -> muStatePhase [] connectingToPatient -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).connectThePatient) -> muStatePhase) [] therapyInitiation -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).initPhase) -> muStatePhase) [] therapyEnding -> mset.sv_HDMachine_hdMachineState.((tag(sv_HDMachine_hdMachineState)).endPhase) -> muStatePhase) within muStatePhase ) ) [| Union({{| c |} | c <- HDMachineChanSet }) |] ( let muSensorReadings = ( ( ( ( ( ( ( ( ( ( ( ( ( ( senApTransdPress?HDMachine_apTransdPress -> muSensorReadings [] senBloodFlowInEBC?HDMachine_bloodFlowInEBC -> muSensorReadings) [] senBypassVol?HDMachine_bypassValve -> muSensorReadings) [] senFflowDirect?HDMachine_fflowDirect -> muSensorReadings) [] senInfVol?infVol -> muSensorReadings) [] senLastNonZeroBF?HDMachine_lastNonZeroBF -> muSensorReadings) [] senNetFluidRemoval?HDMachine_netFluidRemoval -> muSensorReadings) [] senNetFluidRemovalRate?HDMachine_netFluidRemovalRate -> muSensorReadings) [] senRotDirectBP?HDMachine_rotDirectionBP -> muSensorReadings) [] senRotDirectUFP?HDMachine_rotDirectionUFP -> muSensorReadings) [] senVolInEBC?HDMachine_volumeInEBC -> muSensorReadings) [] senSADSensorFlow?HDMachine_sadSensorFlow -> muSensorReadings) [] senVpTransdPress?HDMachine_vpTransdPress -> muSensorReadings) [] senHDMode?HDMachine_hdMode -> muSensorReadings) [] setMinUFRateTreat?HDMachine_minUFRateTreat -> muSensorReadings) within muSensorReadings ) ) ) within muHDMachineMain ), restrict(b))
)

SysClock = 
	( let restrict(bs) = dres(bs,{sv_HDMachine_airVolLimit,sv_HDMachine_airVol,sv_HDMachine_alarm,sv_HDMachine_artBolusVol,sv_HDMachine_apTransdPress,sv_HDMachine_bloodFlowInEBC,sv_HDMachine_bypassValve,sv_HDMachine_fflowDirect,sv_HDMachine_hdActivity,sv_HDMachine_hdMachineState,sv_HDMachine_hdMode,sv_HDMachine_infSalineVol,sv_HDMachine_lastNonZeroBF,sv_HDMachine_lowerPressureLimit,sv_HDMachine_netFluidRemovalRate,sv_HDMachine_netFluidRemoval,sv_HDMachine_rotDirectionBP,sv_HDMachine_rotDirectionUFP,sv_HDMachine_safeUpperLimit,sv_HDMachine_timerIntervalR9,sv_HDMachine_timerIntervalR10,sv_HDMachine_timerIntervalR11,sv_HDMachine_timerIntervalR12,sv_HDMachine_timerIntervalR13,sv_HDMachine_time,sv_HDMachine_upperPressureLimit,sv_HDMachine_volumeInEBC,sv_HDMachine_vpTransdPress,sv_HDMachine_sadSensorFlow,sv_HDMachine_bloodLines,sv_HDMachine_minUFRateTreat,sv_HDMachine_fillingBPRate,sv_HDMachine_rinsingBPRate,sv_HDMachine_rinsingTime,sv_HDMachine_ufRateForRinsing,sv_HDMachine_ufVolForRinsing,sv_HDMachine_bloodFlowForConnectingPatient,sv_HDMachine_conductivity,sv_HDMachine_bicarbonateAcetate,sv_HDMachine_bicarbonateConductivity,sv_HDMachine_dfTemperature,sv_HDMachine_dfFlow,sv_HDMachine_ufVol,sv_HDMachine_therapyTime,sv_HDMachine_minUFRate,sv_HDMachine_maxUFRate,sv_HDMachine_limitDeltaMinMaxAP,sv_HDMachine_actualTMPMaxTMP,sv_HDMachine_limitsTMP,sv_HDMachine_lowHigh,sv_HDMachine_extendedTMPLimitRange,sv_HDMachine_heparinStopTime,sv_HDMachine_heparinBolusVol,sv_HDMachine_heparinProfileRate,sv_HDMachine_treatmentWithoutHeparin,sv_HDMachine_syringeType,sv_SysClock_time})
		within
		|~| b:BINDINGS @ Memorise(( let muResetClock = ( mget.sv_HDMachine_time?v_sv_HDMachine_time:(type(sv_HDMachine_time)) -> mset.sv_HDMachine_time.((tag(sv_HDMachine_time)).0) -> SKIP ; Clock ) within muResetClock ), restrict(b))
)
HDMachineStChanSet = {| getActualTMPMaxTMP,getAirVolLimit,getAirVol,getAlarm,getApTransdPress,getArtBolusVol,getBicarbonateAcetate,getBicarbonateConductivity,getBloodFlowForConnectingPatient,getBloodFlowInEBC,getBloodLines,getBypassValve,getConductivity,getDfFlow,getDfTemperature,getExtendedTMPLimitRange,getFflowDirect,getFillingBPRate,getHdActivity,getHdMachineState,getHDMode,getHeparinBolusVol,getHeparinProfileRate,getHeparinStopTime,getInfSalineVol,getLastNonZeroBF,getLimitDeltaMinMaxAP,getLimitsTMP,getLowerPressureLimit,getLowHigh,getMaxUFRate,getMinUFRate,getMinUFRateTreat,getNetFluidRemoval,getNetFluidRemovalRate,getRinsingBPRate,getRinsingTime,getRotDirectBP,getRotDirectUFP,getSADSensorFlow,getSafeUpperLimit,getSignalLamp,getSyringeType,getTherapyTime,getTimerIntervalR10,getTimerIntervalR11,getTimerIntervalR12,getTimerIntervalR13,getTimerIntervalR9,getTreatmentWithoutHeparin,getUfRateForRinsing,getUfVol,getUfVolForRinsing,getUpperPressureLimit,getVolInEBC,getVpTransdPress,setActualTMPMaxTMP,setAirVolLimit,setAirVol,setBicarbonateAcetate,setBicarbonateConductivity,setBloodFlowForConnectingPatient,setBloodFlowInEBC,setConductivity,setDfFlow,setDfTemperature,setExtendedTMPLimitRange,setFillingBPRate,setHeparinBolusVol,setHeparinProfileRate,setHeparinStopTime,setLastNonZeroBF,setLimitDeltaMinMaxAP,setLimitsTMP,setLowHigh,setMaxUFRate,setMinUFRate,setRinsingBPRate,setRinsingTime,setSyringeType,setTherapyTime,setTimerIntervalR10,setTimerIntervalR11,setTimerIntervalR12,setTimerIntervalR13,setTimerIntervalR9,setTreatmentWithoutHeparin,setUfRateForRinsing,setUfVol,setUfVolForRinsing,preparationPhase,connectingToPatient,therapyInitiation,therapyEnding |}
SensorReadingsChanSet = {| senAirVol,senApTransdPress,senBloodFlowInEBC,senSADSensorFlow,senVpTransdPress |}
MainTherapyChanSet = {| setActualTMPMaxTMP,setArtBolusVol,setBicarbonateAcetate,setBicarbonateConductivity,setBloodFlowForConnectingPatient,setBloodFlowInEBC,setBloodLines,setConductivity,setDfFlow,setDfTemperature,setExtendedTMPLimitRange,setFillingBPRate,setHDMode,setHeparinBolusVol,setHeparinProfileRate,setHeparinStopTime,setInfSalineVol,setLimitDeltaMinMaxAP,setLimitsTMP,setLowHigh,setMaxUFRate,setMinUFRate,setMinUFRateTreat,setRinsingBPRate,setRinsingTime,setSignalLamp,setSyringeType,setTherapyTime,setTreatmentWithoutHeparin,setUfRateForRinsing,setUfVol,setUfVolForRinsing,preparationPhase,therapyInitiation,connectingToPatient,duringTherapy,therapyEnding |}
RinsingParametersStComm = {| setFillingBPRate,setRinsingBPRate,setRinsingTime,setUfRateForRinsing,setUfVolForRinsing,setBloodFlowForConnectingPatient |}
HeparinParametersStComm = {| setHeparinStopTime,setHeparinBolusVol,setHeparinProfileRate,setTreatmentWithoutHeparin,setSyringeType |}
PressureParametersStComm = {| setLimitDeltaMinMaxAP,setActualTMPMaxTMP,setLimitsTMP,setLowHigh,setExtendedTMPLimitRange |}
UFParametersStComm = {| setUfVol,setTherapyTime,setMinUFRate,setMaxUFRate |}
DFParametersStComm = {| setConductivity,setBicarbonateAcetate,setBicarbonateConductivity,setDfTemperature,setDfFlow |}
DFParametersStChanSet = {| setBicarbonateAcetate,setBicarbonateConductivity,setDfFlow,setDfTemperature,setConductivity,getBicarbonateAcetate,getConductivity,getDfFlow,getDfTemperature,getBicarbonateConductivity |}
UFParametersStChanSet = {| setMaxUFRate,setMinUFRate,setTherapyTime,setUfVol,getMaxUFRate,getMinUFRate,getTherapyTime,getUfVol |}
HeparinParametersStChanSet = {| setTreatmentWithoutHeparin,setHeparinBolusVol,setHeparinProfileRate,getHeparinBolusVol,getHeparinProfileRate,getTreatmentWithoutHeparin,setSyringeType,getSyringeType |}
PressureParametersStChanSet = {| setLimitDeltaMinMaxAP,setActualTMPMaxTMP,setLimitsTMP,setLowHigh,setExtendedTMPLimitRange,getLimitDeltaMinMaxAP,getActualTMPMaxTMP,getLimitsTMP,getLowHigh,getExtendedTMPLimitRange |}
RinsingParametersStChanSet = {| setFillingBPRate,setRinsingBPRate,setRinsingTime,setUfVolForRinsing,setBloodFlowForConnectingPatient,getRinsingBPRate,getRinsingTime,setUfRateForRinsing,getUfRateForRinsing,getUfVolForRinsing,getBloodFlowForConnectingPatient,getFillingBPRate |}
HDGenCompStChanSet = {| getAirVolLimit,getAirVol,getApTransdPress,getArtBolusVol,getBloodFlowInEBC,getBypassValve,getFflowDirect,getHdActivity,getHDMode,getInfSalineVol,getLastNonZeroBF,getLowerPressureLimit,getMinUFRateTreat,getNetFluidRemoval,getNetFluidRemovalRate,getSADSensorFlow,getSafeUpperLimit,getSignalLamp,getTimerIntervalR10,getTimerIntervalR11,getTimerIntervalR12,getTimerIntervalR13,getTimerIntervalR9,getUpperPressureLimit,getVolInEBC,getVpTransdPress,getBloodLines,setAirVolLimit,setAirVol,setAlarm,setBloodFlowInEBC,setLastNonZeroBF,setTimerIntervalR10,setTimerIntervalR11,setTimerIntervalR12,setTimerIntervalR13,setTimerIntervalR9,getRotDirectBP,getRotDirectUFP,preparationPhase,connectingToPatient,therapyInitiation,therapyEnding |}
HDComm = {| getApTransdPress,getBloodFlowInEBC,getCurrentTime,getDfFlow,getHdActivity,getHdMachineState,getFflowDirect,getInfSalineVol,getVolInEBC,getLowerPressureLimit,getRotDirectUFP,getUpperPressureLimit,getDfTemperature,getVpTransdPress,senBloodFlowInEBC,senSADSensorFlow,setAirVol,setBloodFlowInEBC,setLastNonZeroBF,therapyInitiation,senVpTransdPress,getTimerIntervalR9,setTimerIntervalR9,getTimerIntervalR10,setTimerIntervalR10,getTimerIntervalR9 |}
SensorReadingsComm = {| senAirVol,senApTransdPress,senBloodFlowInEBC,senHDMode,senSADSensorFlow,senVpTransdPress |}
TherapyPhaseChanSet = {| preparationPhase,therapyInitiation,connectingToPatient,duringTherapy,therapyEnding |}
channel inputOfSetHeparinParameters : TIME.NatValue.NatValue.SWITCH.NatValue
channel inputOfSetPressureParameters : NatValue.NatValue.SWITCH.SWITCH
channel inputOfSetUFParameters : NatValue.NatValue.NatValue.NatValue
channel inputOfSetDFParameters : NatValue.CONCENTRATE.NatValue.NatValue.NatValue
channel inputOfSetRinsingParameters : NatValue.NatValue.NatValue.NatValue.NatValue.NatValue
channel senVpTransdPress : NatValue
channel senVolInEBC : NatValue
channel senSADSensorFlow : NatValue
channel senRotDirectUFP : DIRECTION
channel senRotDirectBP : DIRECTION
channel senNetFluidRemoval : SWITCH
channel senNetFluidRemovalRate : NatValue
channel senLastNonZeroBF : NatValue
channel senInfVol : NatValue
channel senHDMode : HDMODE
channel senFflowDirect : DIRECTION
channel senBypassVol : LIDD
channel senBloodFlowInEBC : NatValue
channel senApTransdPress : NatValue
channel senAirVol : NatValue
channel senAirVolLimit : NatValue
channel getVpTransdPress, setVpTransdPress : NatValue
channel getVolInEBC, setVolInEBC : NatValue
channel getUpperPressureLimit, setUpperPressureLimit : NatValue
channel getUfVol, setUfVol : NatValue
channel getUfVolForRinsing, setUfVolForRinsing : NatValue
channel getUfRateForRinsing, setUfRateForRinsing : NatValue
channel getTreatmentWithoutHeparin, setTreatmentWithoutHeparin : SWITCH
channel getTime, setTime : NatValue
channel getTimerIntervalR9, setTimerIntervalR9 : NatValue
channel getTimerIntervalR13, setTimerIntervalR13 : NatValue
channel getTimerIntervalR12, setTimerIntervalR12 : NatValue
channel getTimerIntervalR11, setTimerIntervalR11 : NatValue
channel getTimerIntervalR10, setTimerIntervalR10 : NatValue
channel getTherapyTime, setTherapyTime : NatValue
channel getSyringeType, setSyringeType : NatValue
channel getSafeUpperLimit, setSafeUpperLimit : NatValue
channel getSADSensorFlow, setSADSensorFlow : NatValue
channel getSignalLamp, setSignalLamp : LAMP
channel getRotDirectUFP, setRotDirectUFP : DIRECTION
channel getRotDirectBP, setRotDirectBP : DIRECTION
channel getRinsingTime, setRinsingTime : NatValue
channel getRinsingBPRate, setRinsingBPRate : NatValue
channel getNetFluidRemoval, setNetFluidRemoval : SWITCH
channel getNetFluidRemovalRate, setNetFluidRemovalRate : NatValue
channel getMinUFRate, setMinUFRate : NatValue
channel getMinUFRateTreat, setMinUFRateTreat : BUTTON
channel getMaxUFRate, setMaxUFRate : NatValue
channel getLowHigh, setLowHigh : NatValue
channel getLowerPressureLimit, setLowerPressureLimit : NatValue
channel getLimitsTMP, setLimitsTMP : SWITCH
channel getLimitDeltaMinMaxAP, setLimitDeltaMinMaxAP : NatValue
channel getLastNonZeroBF, setLastNonZeroBF : NatValue
channel getInfSalineVol, setInfSalineVol : NatValue
channel getHeparinStopTime, setHeparinStopTime : TIME
channel getHeparinProfileRate, setHeparinProfileRate : NatValue
channel getHeparinBolusVol, setHeparinBolusVol : NatValue
channel getHDMode, setHDMode : HDMODE
channel getHdMachineState, setHdMachineState : Set(STATEPHASE)
channel getHdActivity, setHdActivity : Set(ACTIVITY)
channel getFillingBPRate, setFillingBPRate : NatValue
channel getFflowDirect, setFflowDirect : DIRECTION
channel getExtendedTMPLimitRange, setExtendedTMPLimitRange : SWITCH
channel getDfTemperature, setDfTemperature : NatValue
channel getDfFlow, setDfFlow : NatValue
channel getConductivity, setConductivity : NatValue
channel getBypassValve, setBypassValve : LIDD
channel getBloodLines, setBloodLines : BOOL
channel getBloodFlowInEBC, setBloodFlowInEBC : NatValue
channel getBloodFlowForConnectingPatient, setBloodFlowForConnectingPatient : NatValue
channel getBicarbonateConductivity, setBicarbonateConductivity : NatValue
channel getBicarbonateAcetate, setBicarbonateAcetate : CONCENTRATE
channel getArtBolusVol, setArtBolusVol : NatValue
channel getApTransdPress, setApTransdPress : NatValue
channel getAlarm, setAlarm : SWITCH
channel getAirVol, setAirVol : NatValue
channel getAirVolLimit, setAirVolLimit : NatValue
channel getActualTMPMaxTMP, setActualTMPMaxTMP : NatValue
channel getCurrentTime : NatValue
channel tick
channel salineBagLevel : NatValue
channel connectingConcentrate : CONCENTRATE
channel insertHeparinSyringe, heparinLineIsVented
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel stopBloodFlow, produceAlarmSound, stopBP
channel ventricularTubing, connectDialyzer
channel autSelfTest, atrialTubing
channel connectingToPatient, duringTherapy, therapyEnding
channel preparationPhase, therapyInitiation