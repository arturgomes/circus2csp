include "sequence_aux.csp"
include "function_aux.csp"


datatype SWITCH = ON | OFF
NatValue = {0..3}
--------------------------------
-- The universe of values
 datatype UNIVERSE = Nat.NatValue | SWI.SWITCH

--------------------------------
--Conversions
subtype U_NAT = Nat.NatValue
subtype U_SWI = SWI.SWITCH

valueNAT(Nat.v) = v
valueSWI(SWI.v) = v

tag(x) =
	 if x == sv_SysCmd_time_U_NAT then Nat
	 else if x == sv_SysCmd_swi_U_SWI then SWI
	 else Nat


--------------------------------
-- MEMORY
--------------------------------
Memory(b) =
   ([] n:dom(b) @ mget.n!(apply(b,n)) -> Memory(b))
   [] ([] n:dom(b) @ mset.n?x:type(n) -> Memory(over(b,n,x)))
   [] terminate -> SKIP

Memorise(P, b) = 
    ((P; terminate -> SKIP) [| MEM_I |] Memory(b)) \ MEM_I

datatype NAME = sv_SysCmd_time_U_NAT | sv_SysCmd_swi_U_SWI
--------------------------------
-- All possible bidings
NAMES_VALUES = seq({seq({(n,v) | v <- type(n)}) | n <- NAME})
BINDINGS = {set(b) | b <- set(distCartProd(NAMES_VALUES))}

channel mget, mset : NAME.UNIVERSE
channel terminate
MEM_I = {| mset,mget,terminate |}

MakeTick = 
	tick -> SKIP

SysCmd = 
	( let restrict(bs) = dres(bs,{sv_SysCmd_time_U_NAT,sv_SysCmd_swi_U_SWI})
		within
		|~| b:BINDINGS @ Memorise(start -> ( mget.sv_SysCmd_swi_U_SWI?v_sv_SysCmd_swi_U_SWI:U_SWI -> mget.sv_SysCmd_time_U_NAT?v_sv_SysCmd_time_U_NAT:U_NAT -> mset.sv_SysCmd_swi_U_SWI.((tag(sv_SysCmd_swi_U_SWI)).ON) -> mset.sv_SysCmd_time_U_NAT.((tag(sv_SysCmd_time_U_NAT)).0) -> SKIP ; ( let X = ( mget.sv_SysCmd_time_U_NAT?v_sv_SysCmd_time_U_NAT:U_NAT -> (valueNAT(v_sv_SysCmd_time_U_NAT) <= 2 & ( tick -> mset.sv_SysCmd_time_U_NAT.((tag(sv_SysCmd_time_U_NAT)).(valueNAT(v_sv_SysCmd_time_U_NAT) + 1)) -> X ||| getCurrentTime.valueNAT(v_sv_SysCmd_time_U_NAT) -> X ) [] valueNAT(v_sv_SysCmd_time_U_NAT) > 2 & ( mset.sv_SysCmd_time_U_NAT.((tag(sv_SysCmd_time_U_NAT)).0) -> mset.sv_SysCmd_swi_U_SWI.((tag(sv_SysCmd_swi_U_SWI)).OFF) -> SKIP ; stop -> SKIP )) ; X ) within X ) ), restrict(b))
)
channel tick
channel getCurrentTime : NatValue
channel start, stop