include "function_aux.csp"
include "sequence_aux.csp"

datatype NAME = n1 | n2 | r1 | r2
NatValue = {0..3}
datatype RANGE = min | mid | max

datatype UNIVERSE =  NAT.NatValue | RAN.RANGE

subtype U_NAT = NAT.NatValue
subtype U_RAN = RAN.RANGE

-- -- From D24.1
-- value(NAT.v) = v
-- value(RAN.v) = v
--
-- type(x) =
--     if x== n1 then U_NAT
--     else if x == n2 then U_NAT
--     else if x == r1 then U_RAN
--     else if x == r2 then U_RAN
--     else {}
--
-- tag(x) =
--     if x== n1 then NAT
--     else if x == n2 then NAT
--     else if x == r1 then RAN
--     else if x == r2 then RAN
--     else NAT

-- NAMES_VALUES = seq({seq({(n,v) | v <- type(n)}) | n <- NAME})

-- BINDINGS = {set(b) | b <- set(distCartProd(NAMES_VALUES))}

-- Modified by Artur - Multiple aux functions for each type
valueNAT(NAT.v) = v
valueRAN(RAN.v) = v

typeNAT(x) = U_NAT
typeRAN(x) = U_RAN

tagNAT(x) = NAT
tagRAN(x) = RAN

subtype NAME_NAT = n1 | n2
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

b_NAT1 = {(n1, NAT.0),(n2, NAT.0)}

subtype NAME_RAN = r1 | r2
NAMES_VALUES_RAN = seq({seq({(n,v) | v <- typeRAN(n)}) | n <- NAME_RAN})
BINDINGS_RAN = {set(b) | b <- set(distCartProd(NAMES_VALUES_RAN))}

b_RAN1 = {(r1, RAN.min),(r2, RAN.min)}

channel mget, mset : NAME.UNIVERSE
channel terminate


----------------------------------------------------------------------------------
-- 1 - D241 approach of the memory model
----------------------------------------------------------------------------------
--
-- Memory1(b) =
--      ([] n :dom(b) @ mget.n.apply(b,n) -> Memory1(b))
--      []
--      ([] n :dom(b) @ mset.n?nv:type(n) -> Memory1(over(b,n,nv)))
--      []
--      terminate -> SKIP


----------------------------------------------------------------------------------
-- 2 = Typed Memory
----------------------------------------------------------------------------------
Memory2(b_RAN, b_NAT) =
    ([] n:dom(b_RAN) @ mget.n!(apply(b_RAN,n)) -> Memory2(b_RAN, b_NAT))
    []
    ([] n:dom(b_NAT) @ mget.n!(apply(b_NAT,n)) -> Memory2(b_RAN, b_NAT))
    []
    ([] n:dom(b_RAN) @ mset.n?x:typeRAN(n) -> Memory2(over(b_RAN,n,x),b_NAT))
    []
    ([] n:dom(b_NAT) @ mset.n?x:typeNAT(n) -> Memory2(b_RAN,over(b_NAT,n,x)))
    []
    terminate -> SKIP


----------------------------------------------------------------------------------
-- 3 - CTOC approach
----------------------------------------------------------------------------------
MemoryNATVar(n,b_NAT) =
    mget.n.apply(b_NAT,n) -> MemoryNATVar(n,b_NAT)
    []
    mset.n?nv:typeNAT(n) -> MemoryNATVar(n,over(b_NAT,n,nv))
    []
    terminate -> SKIP

MemoryNAT(b_NAT) =
    ( [| {| terminate |} |] n : dom(b_NAT) @ MemoryNATVar(n,dres(b_NAT,{n})) )

MemoryRANVar(n,b_RAN) =
    mget.n.apply(b_RAN,n) -> MemoryRANVar(n,b_RAN)
    []
    mset.n?nv:typeRAN(n) -> MemoryRANVar(n,over(b_RAN,n,nv))
    []
    terminate -> SKIP

MemoryRAN(b_RAN) =
    ( [| {| terminate |} |] n : dom(b_RAN) @ MemoryRANVar(n,dres(b_RAN,{n})) )

Memory3(b_RAN, b_NAT) =
    MemoryRAN(b_RAN) [|{|terminate|}|] MemoryNAT(b_NAT)




----------------------------------------------------------------------------------
-- 4 - multiple mgets and msets for each state variable
----------------------------------------------------------------------------------

channel mget_n1, mget_n2, mset_n1, mset_n2 : UNIVERSE
channel mget_r1, mget_r2, mset_r1, mset_r2 : UNIVERSE

Memory_n1(b_NAT) =
    mget_n1.apply(b_NAT,n1) -> Memory_n1(b_NAT)
    []
    mset_n1?nv : typeNAT(n1) -> Memory_n1(over(b_NAT,n1,nv))
    []
    terminate -> SKIP
Memory_n2(b_NAT) =
    mget_n2.apply(b_NAT,n2) -> Memory_n2(b_NAT)
    []
    mset_n2?nv : typeNAT(n2) -> Memory_n2(over(b_NAT,n2,nv))
    []
    terminate -> SKIP
Memory_r1(b_RAN) =
    mget_r1.apply(b_RAN,r1) -> Memory_r1(b_RAN)
    []
    mset_r1?nv : typeRAN(r1) -> Memory_r1(over(b_RAN,r1,nv))
    []
    terminate -> SKIP
Memory_r2(b_RAN) =
    mget_r2.apply(b_RAN,r2) -> Memory_r2(b_RAN)
    []
    mset_r2?nv : typeRAN(r2) -> Memory_r2(over(b_RAN,r2,nv))
    []
    terminate -> SKIP
Memory4(b_RAN, b_NAT) =
    (((Memory_n1(b_NAT)
    [| {| terminate |} |]
    Memory_n2(b_NAT))
    [| {| terminate |} |]
    Memory_r1(b_RAN))
    [| {| terminate |} |]
    Memory_r2(b_RAN))
--------------------------------------------------------------------------------
-- Models
-- I`m using internal choice of bindings so I can test for any binding set.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- D24.1 -- Does not work for mixed types
--------------------------------------------------------------------------------
-- M1 = |~| b: BINDINGS @ Memory1(b)
-- M1a = |~| b: BINDINGS @ Memory1(b)[[mget.n1 <- mget_n1,
--                                     mget.n2 <- mget_n2,
--                                     mget.r1 <- mget_r1,
--                                     mget.r2 <- mget_r2,
--                                     mset.n1 <- mset_n1,
--                                     mset.n2 <- mset_n2,
--                                     mset.r1 <- mset_r1,
--                                     mset.r2 <- mset_r2]]

--------------------------------------------------------------------------------
-- Typed approach
--------------------------------------------------------------------------------
M2 = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT @ Memory2(b_RAN, b_NAT)
M2a = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT
          @ Memory2(b_RAN, b_NAT)[[mget.n1 <- mget_n1,
                                    mget.n2 <- mget_n2,
                                    mget.r1 <- mget_r1,
                                    mget.r2 <- mget_r2,
                                    mset.n1 <- mset_n1,
                                    mset.n2 <- mset_n2,
                                    mset.r1 <- mset_r1,
                                    mset.r2 <- mset_r2]]

--------------------------------------------------------------------------------
-- Distributed approach
--------------------------------------------------------------------------------
M3 = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT @ Memory3(b_RAN, b_NAT)
M3a = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT
          @ Memory3(b_RAN, b_NAT)[[mget.n1 <- mget_n1,
                                  mget.n2 <- mget_n2,
                                  mget.r1 <- mget_r1,
                                  mget.r2 <- mget_r2,
                                  mset.n1 <- mset_n1,
                                  mset.n2 <- mset_n2,
                                  mset.r1 <- mset_r1,
                                  mset.r2 <- mset_r2]]

--------------------------------------------------------------------------------
-- One mget and mset for each state variable
--------------------------------------------------------------------------------
M4 = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT @ Memory4(b_RAN, b_NAT)
M4a = |~| b_RAN:BINDINGS_RAN, b_NAT:BINDINGS_NAT @
          Memory4(b_RAN, b_NAT)[[mget_n1 <- mget.n1,
                                mget_n2 <- mget.n2,
                                mget_r1 <- mget.r1,
                                mget_r2 <- mget.r2,
                                mset_n1 <- mset.n1,
                                mset_n2 <- mset.n2,
                                mset_r1 <- mset.r1,
                                mset_r2 <- mset.r2]]

--------------------------------------------------------------------------------
-- Verification
--------------------------------------------------------------------------------
-- is the distributed approach a refinement of the typed one?
assert M2 [FD= M3 -- passed
-- is the typed approach a refinement of the distributed one?
assert M3 [FD= M2 -- passed
-- so they are equivalent!

-- is the prefixed approach a refinement of the typed one?
assert M2a [FD= M4 -- passed
-- is the typed approach a refinement of the prefixed one?
assert M4 [FD= M2a -- passed
-- so they are equivalent!

-- is the prefixed approach a refinement of the CTOC one?
assert M3a [FD= M4 -- passed
-- is the CTOC approach a refinement of the prefixed one?
assert M4 [FD= M3a -- passed
-- so they are equivalent!

--------------------------------------------------------------------------------
-- Now we test the inverse, with renaming from the
-- prefixed mgets to the other approaches
--------------------------------------------------------------------------------
assert M4a [FD= M2 -- passed
assert M4a [FD= M3 -- passed
assert M3 [FD= M4a -- passed
assert M2 [FD= M4a -- passed


--------------------------------------------------------------------------------
-- Finally, we test if all approaches renamed to
-- prefixed mgets are refinement from each other
--------------------------------------------------------------------------------
assert M2a [FD= M3a -- passed
assert M3a [FD= M4 -- passed
assert M4  [FD= M3a -- passed
assert M3a [FD= M2a -- passed
