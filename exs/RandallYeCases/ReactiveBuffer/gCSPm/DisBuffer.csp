include "sequence_aux.csp"
include "function_aux.csp"


maxbuff = 2
maxring = (maxbuff - 1)
NatValue = {0..maxbuff}
RingIndex = {1..maxring}
sNatValue = Seq(NatValue)
datatype Direction = req | ack

channel input, output : NatValue
channel read, write : RingIndex.Direction.NatValue
channel rdi, wrti : RingIndex.Direction.NatValue
channel rrd, wrt : Direction.NatValue
IRCell(i) = RingCell(b_NAT1)[[rrd <- rdi.i, wrt <- wrti.i]]
CtrI = {| rdi,wrti |}
Ring = |||i : RingIndex @ IRCell(i)
ControllerR = Controller(b_NAT1,b_RIN1)[[read <- rdi, write <- wrti]]
DBuffer = ( ( ControllerR [| CtrI |] Ring ) \ CtrI )
assert DBuffer [FD= Buffer(b_SNA1,b_NAT1)
assert Buffer(b_SNA1,b_NAT1) [FD= DBuffer
subtype U_RIN = RingIndex

subtype U_SNA = sNatValue

subtype U_NAT = NatValue

-- definition of NAME for the entire spec
datatype NAME = sv_v | sv_ringsize | sv_cache | sv_top | sv_bot | sv_buff | sv_size

subtype NAME_NAT = sv_v | sv_cache | sv_size

subtype NAME_RIN = sv_ringsize | sv_top | sv_bot

subtype NAME_SNA = sv_buff

-- Binding set for NatValue
b_NAT1 = {(sv_v, 0),(sv_size, 0),(sv_cache, 0),(sv_size, 0)}

-- Binding set for RingIndex
b_RIN1 = {(sv_ringsize, 1),(sv_top, 1),(sv_bot, 1)}

-- Binding set for sNatValue
b_SNA1 = {(sv_buff, <>)}

channel mget_sv_v, mset_sv_v : NatValue
channel mget_sv_ringsize, mset_sv_ringsize : RingIndex
channel mget_sv_cache, mset_sv_cache : NatValue
channel mget_sv_top, mset_sv_top : RingIndex
channel mget_sv_bot, mset_sv_bot : RingIndex
channel mget_sv_buff, mset_sv_buff : sNatValue
channel mget_sv_size, mset_sv_size : NatValue
channel terminate
MEMI = {| mget_sv_v,mset_sv_v,mget_sv_size,mset_sv_size,mget_sv_ringsize,mset_sv_ringsize,mget_sv_cache,mset_sv_cache,mget_sv_top,mset_sv_top,mget_sv_bot,mset_sv_bot,mget_sv_buff,mset_sv_buff,mget_sv_size,mset_sv_size,terminate |}
channel lget_sv_v, lset_sv_v : NatValue
channel lget_sv_ringsize, lset_sv_ringsize : RingIndex
channel lget_sv_cache, lset_sv_cache : NatValue
channel lget_sv_top, lset_sv_top : RingIndex
channel lget_sv_bot, lset_sv_bot : RingIndex
channel lget_sv_buff, lset_sv_buff : sNatValue
channel lget_sv_size, lset_sv_size : NatValue
channel lterminate
MEML = {| lget_sv_v,lset_sv_v,lget_sv_size,lset_sv_size,lget_sv_ringsize,lset_sv_ringsize,lget_sv_cache,lset_sv_cache,lget_sv_top,lset_sv_top,lget_sv_bot,lset_sv_bot,lget_sv_buff,lset_sv_buff,lget_sv_size,lset_sv_size,lterminate |}

RingCell(b_NAT) =
  let
     Memory_sv_v(b_NAT) =
        ( ( mget_sv_v.apply(b_NAT,sv_v) ->
      Memory_sv_v(b_NAT)
      [] mset_sv_v?nv ->
      Memory_sv_v(over(b_NAT,sv_v,nv)))
      [] terminate -> SKIP)
     Memory(b_NAT) =
        Memory_sv_v(b_NAT)
     MemoryMerge_sv_v(b_NAT) =
        ( ( lget_sv_v.apply(b_NAT,sv_v) ->
      MemoryMerge_sv_v(b_NAT)
      [] lset_sv_v?nv ->
      MemoryMerge_sv_v(over(b_NAT,sv_v,nv)))
      [] terminate -> SKIP)
     MemoryMerge(b_NAT) =
        MemoryMerge_sv_v(b_NAT)

  within ( ( ( ( let X = mget_sv_v?v_sv_v ->
      ( ( rrd.req?dumb ->
      rrd.ack.v_sv_v -> SKIP
      [] wrt.req?x ->
      wrt.ack?dumb ->
      mset_sv_v.x -> SKIP);
      X
 ) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(b_NAT))\MEMI )

Controller(b_NAT,b_RIN) =
  let
     Memory_sv_size(b_NAT) =
        ( ( mget_sv_size.apply(b_NAT,sv_size) ->
      Memory_sv_size(b_NAT)
      [] mset_sv_size?nv ->
      Memory_sv_size(over(b_NAT,sv_size,nv)))
      [] terminate -> SKIP)
     Memory_sv_ringsize(b_RIN) =
        ( ( mget_sv_ringsize.apply(b_RIN,sv_ringsize) ->
      Memory_sv_ringsize(b_RIN)
      [] mset_sv_ringsize?nv ->
      Memory_sv_ringsize(over(b_RIN,sv_ringsize,nv)))
      [] terminate -> SKIP)
     Memory_sv_cache(b_NAT) =
        ( ( mget_sv_cache.apply(b_NAT,sv_cache) ->
      Memory_sv_cache(b_NAT)
      [] mset_sv_cache?nv ->
      Memory_sv_cache(over(b_NAT,sv_cache,nv)))
      [] terminate -> SKIP)
     Memory_sv_top(b_RIN) =
        ( ( mget_sv_top.apply(b_RIN,sv_top) ->
      Memory_sv_top(b_RIN)
      [] mset_sv_top?nv ->
      Memory_sv_top(over(b_RIN,sv_top,nv)))
      [] terminate -> SKIP)
     Memory_sv_bot(b_RIN) =
        ( ( mget_sv_bot.apply(b_RIN,sv_bot) ->
      Memory_sv_bot(b_RIN)
      [] mset_sv_bot?nv ->
      Memory_sv_bot(over(b_RIN,sv_bot,nv)))
      [] terminate -> SKIP)
     Memory(b_NAT,b_RIN) =
        ( Memory_sv_size(b_NAT)
      [| {| terminate |} |]
      ( Memory_sv_ringsize(b_RIN)
      [| {| terminate |} |]
      ( Memory_sv_cache(b_NAT)
      [| {| terminate |} |]
      ( Memory_sv_top(b_RIN)
      [| {| terminate |} |]
      Memory_sv_bot(b_RIN) ) ) ) )
     MemoryMerge_sv_size(b_NAT) =
        ( ( lget_sv_size.apply(b_NAT,sv_size) ->
      MemoryMerge_sv_size(b_NAT)
      [] lset_sv_size?nv ->
      MemoryMerge_sv_size(over(b_NAT,sv_size,nv)))
      [] terminate -> SKIP)
     MemoryMerge_sv_ringsize(b_RIN) =
        ( ( lget_sv_ringsize.apply(b_RIN,sv_ringsize) ->
      MemoryMerge_sv_ringsize(b_RIN)
      [] lset_sv_ringsize?nv ->
      MemoryMerge_sv_ringsize(over(b_RIN,sv_ringsize,nv)))
      [] terminate -> SKIP)
     MemoryMerge_sv_cache(b_NAT) =
        ( ( lget_sv_cache.apply(b_NAT,sv_cache) ->
      MemoryMerge_sv_cache(b_NAT)
      [] lset_sv_cache?nv ->
      MemoryMerge_sv_cache(over(b_NAT,sv_cache,nv)))
      [] terminate -> SKIP)
     MemoryMerge_sv_top(b_RIN) =
        ( ( lget_sv_top.apply(b_RIN,sv_top) ->
      MemoryMerge_sv_top(b_RIN)
      [] lset_sv_top?nv ->
      MemoryMerge_sv_top(over(b_RIN,sv_top,nv)))
      [] terminate -> SKIP)
     MemoryMerge_sv_bot(b_RIN) =
        ( ( lget_sv_bot.apply(b_RIN,sv_bot) ->
      MemoryMerge_sv_bot(b_RIN)
      [] lset_sv_bot?nv ->
      MemoryMerge_sv_bot(over(b_RIN,sv_bot,nv)))
      [] terminate -> SKIP)
     MemoryMerge(b_NAT,b_RIN) =
        ( MemoryMerge_sv_size(b_NAT)
      [| {| terminate |} |]
      ( MemoryMerge_sv_ringsize(b_RIN)
      [| {| terminate |} |]
      ( MemoryMerge_sv_cache(b_NAT)
      [| {| terminate |} |]
      ( MemoryMerge_sv_top(b_RIN)
      [| {| terminate |} |]
      MemoryMerge_sv_bot(b_RIN) ) ) ) )

  within ( ( ( mset_sv_top.1 ->
      mset_sv_bot.1 ->
      mset_sv_size.0 ->
      ( let X = mget_sv_bot?v_sv_bot ->
      mget_sv_cache?v_sv_cache ->
      mget_sv_size?v_sv_size ->
      mget_sv_top?v_sv_top ->
      ( ( (v_sv_size < maxbuff)   & input?x ->
      ( ( ((v_sv_size == 0) and (v_sv_size == 0))   & mset_sv_cache.x ->
      mset_sv_size.1 ->
      X
 )
      [] ( (v_sv_size > 0)   & write.v_sv_top.req.x ->
      write.v_sv_top.ack?dumb ->
      ( ((v_sv_size < maxbuff) and (0 < v_sv_size))   & mset_sv_top.(v_sv_top % maxring + 1) ->
      mget_sv_size?v_sv_size ->
      mset_sv_size.(v_sv_size + 1) ->
      X
 ) )) )
      [] ( (v_sv_size > 0)   & output.v_sv_cache ->
      ( ( (v_sv_size > 1)   & ( ( |~| dumb : NatValue @
         read.v_sv_bot.req.dumb ->
      read.v_sv_bot.ack?x ->
      ( (v_sv_size > 1)   & mset_sv_bot.(v_sv_bot % maxring + 1) ->
      mset_sv_cache.x ->
      mget_sv_size?v_sv_size ->
      mset_sv_size.(v_sv_size - 1) -> SKIP ) );
      X
 ) )
      [] ( ((v_sv_size == 1) and (v_sv_size == 1))   & mset_sv_size.0 ->
      X
 )) )) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(b_NAT,b_RIN))\MEMI )

Buffer(b_SNA,b_NAT) =
  let
     Memory_sv_buff(b_SNA) =
        ( ( mget_sv_buff.apply(b_SNA,sv_buff) ->
      Memory_sv_buff(b_SNA)
      [] mset_sv_buff?nv ->
      Memory_sv_buff(over(b_SNA,sv_buff,nv)))
      [] terminate -> SKIP)
     Memory_sv_size(b_NAT) =
        ( ( mget_sv_size.apply(b_NAT,sv_size) ->
      Memory_sv_size(b_NAT)
      [] mset_sv_size?nv ->
      Memory_sv_size(over(b_NAT,sv_size,nv)))
      [] terminate -> SKIP)
     Memory(b_SNA,b_NAT) =
        ( Memory_sv_buff(b_SNA)
      [| {| terminate |} |]
      Memory_sv_size(b_NAT) )
     MemoryMerge_sv_buff(b_SNA) =
        ( ( lget_sv_buff.apply(b_SNA,sv_buff) ->
      MemoryMerge_sv_buff(b_SNA)
      [] lset_sv_buff?nv ->
      MemoryMerge_sv_buff(over(b_SNA,sv_buff,nv)))
      [] terminate -> SKIP)
     MemoryMerge_sv_size(b_NAT) =
        ( ( lget_sv_size.apply(b_NAT,sv_size) ->
      MemoryMerge_sv_size(b_NAT)
      [] lset_sv_size?nv ->
      MemoryMerge_sv_size(over(b_NAT,sv_size,nv)))
      [] terminate -> SKIP)
     MemoryMerge(b_SNA,b_NAT) =
        ( MemoryMerge_sv_buff(b_SNA)
      [| {| terminate |} |]
      MemoryMerge_sv_size(b_NAT) )

  within ( ( ( mset_sv_buff.<> ->
      mset_sv_size.0 ->
      ( let X = mget_sv_buff?v_sv_buff ->
      mget_sv_size?v_sv_size ->
      ( ( (v_sv_size < maxbuff)   & input?x ->
      ( (v_sv_size < maxbuff)   & mset_sv_size.(v_sv_size + 1) ->
      mget_sv_buff?v_sv_buff ->
      mset_sv_buff.(v_sv_buff^<x>) ->
      X
 ) )
      [] ( (v_sv_size > 0)   & output.head(v_sv_buff) ->
      ( (v_sv_size > 0)   & mset_sv_size.(v_sv_size - 1) ->
      mget_sv_buff?v_sv_buff ->
      mset_sv_buff.tail(v_sv_buff) ->
      X
 ) )) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(b_SNA,b_NAT))\MEMI )
