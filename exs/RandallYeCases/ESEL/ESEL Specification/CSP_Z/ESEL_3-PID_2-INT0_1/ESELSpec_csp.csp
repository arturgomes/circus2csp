-- This CSP specification is translated from a Circus program by Circus2ZCSP translator.

-- Minimum and maximum integers for model checking. Make sure they are set in advance.
MININT = 0
MAXINT = 1

-- Maximum instances generated for iseq.  Make sure it is set in advance.
MAXINS = 3

-- include a set of libraries
include "lib_basic.csp"
include "lib_num.csp"
include "lib_card.csp"
include "lib_log.csp"
include "lib_set.csp"
include "lib_rel.csp"
include "lib_fun.csp"
include "lib_seq.csp"


-- Axiomatic definition (Constant)
-- They should be assigned manually to meet its type and predicate restriction
-- and match the values assigned in Z as well
-- The variables defined below should meet the predicate below
--       (MAX_ESEL == 3 and MAX_PID == 2)
MAX_ESEL = 3
MAX_PID = 2

-- type
Price = Nat

datatype ESID = ES.{1 .. MAX_ESEL}
datatype PID = PD.{1 .. MAX_PID}
datatype FStatus = fail.ESID | NA


-- channel declarations
channel div
channel updateallmap : pfun(ESID, PID)
channel updatemap : pfun(ESID, PID)
channel updateallprice : pfun(PID, Price)
channel updateprice : pfun(PID, Price)
channel update
channel failures : pfun(PID, Set(FStatus))
channel resp : PID.FStatus
channel terminate
channel display
channel write : ESID.Price
channel read : ESID.Price
channel ondisplay : ESID
channel offdisplay : ESID
channel Controller_Init-- 
channel Controller_Init_fOp -- 
channel Controller_UpdateMap: pfun(ESID, PID)-- !map
channel Controller_UpdateMap_fOp: pfun(ESID, PID) -- !map
channel Controller_UpdateAllMap: pfun(ESID, PID)-- !map
channel Controller_UpdateAllMap_fOp: pfun(ESID, PID) -- !map
channel Controller_NewPrice: pfun(PID, Price)-- !price
channel Controller_NewPrice_fOp: pfun(PID, Price) -- !price
channel Controller_AllNewPrice: pfun(PID, Price)-- !price
channel Controller_AllNewPrice_fOp: pfun(PID, Price) -- !price
channel Controller_AssgnOp0-- 
channel Controller_AddOneFailure: FStatus.PID-- !fst!pid
channel Controller_AddOneFailure_fOp: FStatus.PID -- !fst!pid
channel Controller_OP_pumap : pfun(ESID, PID)
channel Controller_OP_ppmap : pfun(PID, Price)
channel Controller_OP_response : pfun(PID, Set(FStatus))

-- channel set declarations
RespInterface = {| resp, terminate |}

-- hidden event
HIDE_CSPB = {|Controller_OP_pumap, Controller_OP_ppmap, Controller_OP_response, Controller_Init, Controller_Init_fOp, Controller_UpdateMap, Controller_UpdateMap_fOp, Controller_UpdateAllMap, Controller_UpdateAllMap_fOp, Controller_NewPrice, Controller_NewPrice_fOp, Controller_AllNewPrice, Controller_AllNewPrice_fOp, Controller_AssgnOp0, Controller_AddOneFailure, Controller_AddOneFailure_fOp|}

-- processes for variable storing and retrieving 

-- processes 
-- Divergent Process 
DIV = div -> STOP


Controller = 
   ( (
  (   Controller_Init ->  SKIP
   [] Controller_Init_fOp -> DIV
  ) ; ( ||| u:ESID @ (offdisplay.(u) -> SKIP)))  ; 
  let X = 
     (
    (   
      (   
        (   updatemap?map -> 
          (   Controller_UpdateMap!map ->  SKIP
           [] Controller_UpdateMap_fOp!map -> DIV
          )
         [] updateallmap?map -> 
          (   Controller_UpdateAllMap!map ->  SKIP
           [] Controller_UpdateAllMap_fOp!map -> DIV
          )
        )
       [] 
        (   updateprice?price -> 
          (   Controller_NewPrice!price ->  SKIP
           [] Controller_NewPrice_fOp!price -> DIV
          )
         [] updateallprice?price -> 
          (   Controller_AllNewPrice!price ->  SKIP
           [] Controller_AllNewPrice_fOp!price -> DIV
          )
        )
      )
     []  ( ( (update -> (Controller_AssgnOp0 ->  SKIP) ; Controller_OP_ppmap?ppmap -> Controller_OP_pumap?pumap -> (( (( ||| pid:dom(ppmap) @ (
      (   (member(pid, ran(pumap)) & ( ||| uid:dom(rres(pumap, {pid})) @ (write.(uid).(fa(ppmap, pid)) -> read.(uid)?y -> Controller_OP_ppmap?ppmap -> 
        (   (y == fa(ppmap, pid) & SKIP)
         [] ((y != fa(ppmap, pid)) & resp.(pid).((fail.uid)) -> SKIP)
        ))))
       [] (not member(pid, ran(pumap)) & resp.(pid).(NA) -> SKIP)
      ))) ; terminate -> SKIP)  [| RespInterface |] 
      let X = 
        (    (resp?pid?fst -> 
          (   Controller_AddOneFailure!fst!pid ->  SKIP
           [] Controller_AddOneFailure_fOp!fst!pid -> DIV
          ) ; X) 
         [] terminate -> SKIP
        )
      within X) \ RespInterface))  ; ((( [| {| display |} |] uid:ESID @ (display -> Controller_OP_ppmap?ppmap -> Controller_OP_pumap?pumap -> Controller_OP_response?response -> 
      (   (((not (not member(uid, dom(pumap)))) and (not (member(uid, dom(pumap))))) & DIV)
       [] 
        (   ((not member(uid, dom(pumap)) and (not (member(uid, dom(pumap))))) & offdisplay.(uid) -> SKIP)
         [] 
          (   ((not member(uid, dom(pumap)) and member(uid, dom(pumap))) & 
            (    offdisplay.(uid) -> SKIP
             |~| 
              (   (((not (not member(fa(pumap, uid), dom(ppmap)))) and (not (member(fa(pumap, uid), dom(ppmap))))) & DIV)
               [] 
                (   ((not member(fa(pumap, uid), dom(ppmap)) and (not (member(fa(pumap, uid), dom(ppmap))))) & offdisplay.(uid) -> SKIP)
                 [] 
                  (   ((not member(fa(pumap, uid), dom(ppmap)) and member(fa(pumap, uid), dom(ppmap))) & 
                    (    offdisplay.(uid) -> SKIP
                     |~| 
                      (   (((not (not member(fa(pumap, uid), dom(response)))) and (not (member(fa(pumap, uid), dom(response))))) & DIV)
                       [] 
                        (   ((not member(fa(pumap, uid), dom(response)) and (not (member(fa(pumap, uid), dom(response))))) & ondisplay.(uid) -> SKIP)
                         [] 
                          (   ((not member(fa(pumap, uid), dom(response)) and member(fa(pumap, uid), dom(response))) & 
                            (    ondisplay.(uid) -> SKIP
                             |~| 
                              (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                               [] 
                                (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                                 [] 
                                  (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                    (    ondisplay.(uid) -> SKIP
                                     |~| offdisplay.(uid) -> SKIP
                                    ))
                                   [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                                  )
                                )
                              )
                            ))
                           [] (((not (not member(fa(pumap, uid), dom(response)))) and member(fa(pumap, uid), dom(response))) & 
                            (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                               [] 
                                (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                  (    ondisplay.(uid) -> SKIP
                                   |~| offdisplay.(uid) -> SKIP
                                  ))
                                 [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                                )
                              )
                            ))
                          )
                        )
                      )
                    ))
                   [] (((not (not member(fa(pumap, uid), dom(ppmap)))) and member(fa(pumap, uid), dom(ppmap))) & 
                    (   (((not (not member(fa(pumap, uid), dom(response)))) and (not (member(fa(pumap, uid), dom(response))))) & DIV)
                     [] 
                      (   ((not member(fa(pumap, uid), dom(response)) and (not (member(fa(pumap, uid), dom(response))))) & ondisplay.(uid) -> SKIP)
                       [] 
                        (   ((not member(fa(pumap, uid), dom(response)) and member(fa(pumap, uid), dom(response))) & 
                          (    ondisplay.(uid) -> SKIP
                           |~| 
                            (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                               [] 
                                (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                  (    ondisplay.(uid) -> SKIP
                                   |~| offdisplay.(uid) -> SKIP
                                  ))
                                 [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                                )
                              )
                            )
                          ))
                         [] (((not (not member(fa(pumap, uid), dom(response)))) and member(fa(pumap, uid), dom(response))) & 
                          (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                           [] 
                            (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                (    ondisplay.(uid) -> SKIP
                                 |~| offdisplay.(uid) -> SKIP
                                ))
                               [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                              )
                            )
                          ))
                        )
                      )
                    ))
                  )
                )
              )
            ))
           [] (((not (not member(uid, dom(pumap)))) and member(uid, dom(pumap))) & 
            (   (((not (not member(fa(pumap, uid), dom(ppmap)))) and (not (member(fa(pumap, uid), dom(ppmap))))) & DIV)
             [] 
              (   ((not member(fa(pumap, uid), dom(ppmap)) and (not (member(fa(pumap, uid), dom(ppmap))))) & offdisplay.(uid) -> SKIP)
               [] 
                (   ((not member(fa(pumap, uid), dom(ppmap)) and member(fa(pumap, uid), dom(ppmap))) & 
                  (    offdisplay.(uid) -> SKIP
                   |~| 
                    (   (((not (not member(fa(pumap, uid), dom(response)))) and (not (member(fa(pumap, uid), dom(response))))) & DIV)
                     [] 
                      (   ((not member(fa(pumap, uid), dom(response)) and (not (member(fa(pumap, uid), dom(response))))) & ondisplay.(uid) -> SKIP)
                       [] 
                        (   ((not member(fa(pumap, uid), dom(response)) and member(fa(pumap, uid), dom(response))) & 
                          (    ondisplay.(uid) -> SKIP
                           |~| 
                            (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                               [] 
                                (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                  (    ondisplay.(uid) -> SKIP
                                   |~| offdisplay.(uid) -> SKIP
                                  ))
                                 [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                                )
                              )
                            )
                          ))
                         [] (((not (not member(fa(pumap, uid), dom(response)))) and member(fa(pumap, uid), dom(response))) & 
                          (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                           [] 
                            (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                (    ondisplay.(uid) -> SKIP
                                 |~| offdisplay.(uid) -> SKIP
                                ))
                               [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                              )
                            )
                          ))
                        )
                      )
                    )
                  ))
                 [] (((not (not member(fa(pumap, uid), dom(ppmap)))) and member(fa(pumap, uid), dom(ppmap))) & 
                  (   (((not (not member(fa(pumap, uid), dom(response)))) and (not (member(fa(pumap, uid), dom(response))))) & DIV)
                   [] 
                    (   ((not member(fa(pumap, uid), dom(response)) and (not (member(fa(pumap, uid), dom(response))))) & ondisplay.(uid) -> SKIP)
                     [] 
                      (   ((not member(fa(pumap, uid), dom(response)) and member(fa(pumap, uid), dom(response))) & 
                        (    ondisplay.(uid) -> SKIP
                         |~| 
                          (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                           [] 
                            (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                             [] 
                              (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                                (    ondisplay.(uid) -> SKIP
                                 |~| offdisplay.(uid) -> SKIP
                                ))
                               [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                              )
                            )
                          )
                        ))
                       [] (((not (not member(fa(pumap, uid), dom(response)))) and member(fa(pumap, uid), dom(response))) & 
                        (   (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & DIV)
                         [] 
                          (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and (not (member((fail.uid), fa(response, fa(pumap, uid)))))) & ondisplay.(uid) -> SKIP)
                           [] 
                            (   ((not member((fail.uid), fa(response, fa(pumap, uid))) and member((fail.uid), fa(response, fa(pumap, uid)))) & 
                              (    ondisplay.(uid) -> SKIP
                               |~| offdisplay.(uid) -> SKIP
                              ))
                             [] (((not (not member((fail.uid), fa(response, fa(pumap, uid))))) and member((fail.uid), fa(response, fa(pumap, uid)))) & offdisplay.(uid) -> SKIP)
                            )
                          )
                        ))
                      )
                    )
                  ))
                )
              )
            ))
          )
        )
      )))) \ {| display |}))  ; Controller_OP_response?response -> failures.(response) -> SKIP) 
    ) ; X) 
  within X) 

ESELSpec = Controller

MAIN = ESELSpec


-- assertions 
assert MAIN :[ livelock free ]
assert MAIN :[ deadlock free [F] ]
assert MAIN :[ deadlock free [FD] ]

