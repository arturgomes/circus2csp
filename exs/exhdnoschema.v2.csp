include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..2}
datatype BUTTON = ON | OFF
datatype SWITCH = ENABLED | DISABLED
datatype DIRECTION = FORWARD | BACKWARDS
datatype STATEPHASE = connectThePatient | initPhase 
datatype ACTIVITY =  applicationArterialBolus | idle
datatype LIDD = OPEN | CLOSED
datatype CONCENTRATE = ACID 
TIME = (NatValue,NatValue)
datatype HDMODE = RUN | BYPASS
datatype LAMP = GREEN | YELLOW
datatype BOOL = TRUE | FALSE
chkInterval = 1
--------------------------------
-- The universe of values
 datatype UNIVERSE = LID.LIDD | PAC.ACTIVITY | PST.STATEPHASE | HDM.HDMODE | DIR.DIRECTION | LAM.LAMP | BOO.BOOL | BUT.BUTTON | CON.CONCENTRATE | TIM.TIME | SWI.SWITCH | NAT.NatValue

--------------------------------
--Conversions
subtype U_LID = LID.LIDD
subtype U_PAC = PAC.ACTIVITY
subtype U_PST = PST.STATEPHASE
subtype U_HDM = HDM.HDMODE
subtype U_DIR = DIR.DIRECTION
subtype U_LAM = LAM.LAMP
subtype U_BOO = BOO.BOOL
subtype U_BUT = BUT.BUTTON
subtype U_CON = CON.CONCENTRATE
subtype U_TIM = TIM.TIME
subtype U_SWI = SWI.SWITCH
subtype U_NAT = NAT.NatValue


valueLID(LID.v) = v
valuePAC(PAC.v) = v
valuePST(PST.v) = v
valueHDM(HDM.v) = v
valueDIR(DIR.v) = v
valueLAM(LAM.v) = v
valueBOO(BOO.v) = v
valueBUT(BUT.v) = v
valueCON(CON.v) = v
valueTIM(TIM.v) = v
valueSWI(SWI.v) = v
valueNAT(NAT.v) = v


typeLID(x) = U_LID
typePAC(x) = U_PAC
typePST(x) = U_PST
typeHDM(x) = U_HDM
typeDIR(x) = U_DIR
typeLAM(x) = U_LAM
typeBOO(x) = U_BOO
typeBUT(x) = U_BUT
typeCON(x) = U_CON
typeTIM(x) = U_TIM
typeSWI(x) = U_SWI
typeNAT(x) = U_NAT


tagLID(x) = LID
tagPAC(x) = PAC
tagPST(x) = PST
tagHDM(x) = HDM
tagDIR(x) = DIR
tagLAM(x) = LAM
tagBOO(x) = BOO
tagBUT(x) = BUT
tagCON(x) = CON
tagTIM(x) = TIM
tagSWI(x) = SWI
tagNAT(x) = NAT


--------------------------------
-- MEMORY
--------------------------------
Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT) = 
	([] n:dom(b_LID) @ mget.n!(apply(b_LID,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_PAC) @ mget.n!(apply(b_PAC,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_PST) @ mget.n!(apply(b_PST,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_HDM) @ mget.n!(apply(b_HDM,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_DIR) @ mget.n!(apply(b_DIR,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_LAM) @ mget.n!(apply(b_LAM,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_BOO) @ mget.n!(apply(b_BOO,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_BUT) @ mget.n!(apply(b_BUT,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_CON) @ mget.n!(apply(b_CON,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_TIM) @ mget.n!(apply(b_TIM,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_SWI) @ mget.n!(apply(b_SWI,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_NAT) @ mget.n!(apply(b_NAT,n)) -> Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT))
	[] ([] n:dom(b_LID) @ mset.n?x:typeLID(n) -> Memory(over(b_LID,n,x),b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_PAC) @ mset.n?x:typePAC(n) -> Memory(b_LID,over(b_PAC,n,x),b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_PST) @ mset.n?x:typePST(n) -> Memory(b_LID,b_PAC,over(b_PST,n,x),b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_HDM) @ mset.n?x:typeHDM(n) -> Memory(b_LID,b_PAC,b_PST,over(b_HDM,n,x),b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_DIR) @ mset.n?x:typeDIR(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,over(b_DIR,n,x),b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_LAM) @ mset.n?x:typeLAM(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,over(b_LAM,n,x),b_BOO,b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_BOO) @ mset.n?x:typeBOO(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,over(b_BOO,n,x),b_BUT,b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_BUT) @ mset.n?x:typeBUT(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,over(b_BUT,n,x),b_CON,b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_CON) @ mset.n?x:typeCON(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,over(b_CON,n,x),b_TIM,b_SWI,b_NAT))
	[] ([] n:dom(b_TIM) @ mset.n?x:typeTIM(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,over(b_TIM,n,x),b_SWI,b_NAT))
	[] ([] n:dom(b_SWI) @ mset.n?x:typeSWI(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,over(b_SWI,n,x),b_NAT))
	[] ([] n:dom(b_NAT) @ mset.n?x:typeNAT(n) -> Memory(b_LID,b_PAC,b_PST,b_HDM,b_DIR,b_LAM,b_BOO,b_BUT,b_CON,b_TIM,b_SWI,over(b_NAT,n,x)))
		[] terminate -> SKIP

Memorise(P,b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT) = 
    ((P; terminate -> SKIP) [| MEM_I |] Memory(b_LID, b_PAC, b_PST, b_HDM, b_DIR, b_LAM, b_BOO, b_BUT, b_CON, b_TIM, b_SWI, b_NAT)) \ MEM_I

datatype NAME = sv_HDMachine_airVolLimit_U_NAT | sv_HDMachine_airVol_U_NAT | sv_HDMachine_alarm_U_SWI | sv_HDMachine_artBolusVol_U_NAT | sv_HDMachine_apTransdPress_U_NAT | sv_HDMachine_bloodFlowInEBC_U_NAT | sv_HDMachine_bypassValve_U_LID | sv_HDMachine_fflowDirect_U_DIR | sv_HDMachine_hdActivity_U_PAC | sv_HDMachine_hdMachineState_U_PST | sv_HDMachine_hdMode_U_HDM | sv_HDMachine_infSalineVol_U_NAT | sv_HDMachine_lastNonZeroBF_U_NAT | sv_HDMachine_lowerPressureLimit_U_NAT | sv_HDMachine_netFluidRemovalRate_U_NAT | sv_HDMachine_netFluidRemoval_U_SWI | sv_HDMachine_rotDirectionBP_U_DIR | sv_HDMachine_rotDirectionUFP_U_DIR | sv_HDMachine_safeUpperLimit_U_NAT | sv_HDMachine_signalLamp_U_LAM | sv_HDMachine_timerIntervalR9_U_NAT | sv_HDMachine_timerIntervalR10_U_NAT | sv_HDMachine_timerIntervalR11_U_NAT | sv_HDMachine_timerIntervalR12_U_NAT | sv_HDMachine_timerIntervalR13_U_NAT | sv_HDMachine_time_U_NAT | sv_HDMachine_upperPressureLimit_U_NAT | sv_HDMachine_volumeInEBC_U_NAT | sv_HDMachine_vpTransdPress_U_NAT | sv_HDMachine_sadSensorFlow_U_NAT | sv_HDMachine_bloodLines_U_BOO | sv_HDMachine_minUFRateTreat_U_BUT | sv_HDMachine_fillingBPRate_U_NAT | sv_HDMachine_rinsingBPRate_U_NAT | sv_HDMachine_rinsingTime_U_NAT | sv_HDMachine_ufRateForRinsing_U_NAT | sv_HDMachine_ufVolForRinsing_U_NAT | sv_HDMachine_bloodFlowForConnectingPatient_U_NAT | sv_HDMachine_conductivity_U_NAT | sv_HDMachine_bicarbonateAcetate_U_CON | sv_HDMachine_bicarbonateConductivity_U_NAT | sv_HDMachine_dfTemperature_U_NAT | sv_HDMachine_dfFlow_U_NAT | sv_HDMachine_ufVol_U_NAT | sv_HDMachine_therapyTime_U_NAT | sv_HDMachine_minUFRate_U_NAT | sv_HDMachine_maxUFRate_U_NAT | sv_HDMachine_limitDeltaMinMaxAP_U_NAT | sv_HDMachine_actualTMPMaxTMP_U_NAT | sv_HDMachine_limitsTMP_U_SWI | sv_HDMachine_lowHigh_U_NAT | sv_HDMachine_extendedTMPLimitRange_U_SWI | sv_HDMachine_heparinStopTime_U_TIM | sv_HDMachine_heparinBolusVol_U_NAT | sv_HDMachine_heparinProfileRate_U_NAT | sv_HDMachine_treatmentWithoutHeparin_U_SWI | sv_HDMachine_syringeType_U_NAT | sv_SysClock_stime_U_NAT
subtype NAME_LID = sv_HDMachine_bypassValve_U_LID
subtype NAME_PAC = sv_HDMachine_hdActivity_U_PAC
subtype NAME_PST = sv_HDMachine_hdMachineState_U_PST
subtype NAME_HDM = sv_HDMachine_hdMode_U_HDM
subtype NAME_DIR = sv_HDMachine_fflowDirect_U_DIR | sv_HDMachine_rotDirectionBP_U_DIR | sv_HDMachine_rotDirectionUFP_U_DIR
subtype NAME_LAM = sv_HDMachine_signalLamp_U_LAM
subtype NAME_BOO = sv_HDMachine_bloodLines_U_BOO
subtype NAME_BUT = sv_HDMachine_minUFRateTreat_U_BUT
subtype NAME_CON = sv_HDMachine_bicarbonateAcetate_U_CON
subtype NAME_TIM = sv_HDMachine_heparinStopTime_U_TIM
subtype NAME_SWI = sv_HDMachine_alarm_U_SWI | sv_HDMachine_netFluidRemoval_U_SWI | sv_HDMachine_limitsTMP_U_SWI | sv_HDMachine_extendedTMPLimitRange_U_SWI | sv_HDMachine_treatmentWithoutHeparin_U_SWI
subtype NAME_NAT = sv_HDMachine_airVolLimit_U_NAT | sv_HDMachine_airVol_U_NAT | sv_HDMachine_artBolusVol_U_NAT | sv_HDMachine_apTransdPress_U_NAT | sv_HDMachine_bloodFlowInEBC_U_NAT | sv_HDMachine_infSalineVol_U_NAT | sv_HDMachine_lastNonZeroBF_U_NAT | sv_HDMachine_lowerPressureLimit_U_NAT | sv_HDMachine_netFluidRemovalRate_U_NAT | sv_HDMachine_safeUpperLimit_U_NAT | sv_HDMachine_timerIntervalR9_U_NAT | sv_HDMachine_timerIntervalR10_U_NAT | sv_HDMachine_timerIntervalR11_U_NAT | sv_HDMachine_timerIntervalR12_U_NAT | sv_HDMachine_timerIntervalR13_U_NAT | sv_HDMachine_time_U_NAT | sv_HDMachine_upperPressureLimit_U_NAT | sv_HDMachine_volumeInEBC_U_NAT | sv_HDMachine_vpTransdPress_U_NAT | sv_HDMachine_sadSensorFlow_U_NAT | sv_HDMachine_fillingBPRate_U_NAT | sv_HDMachine_rinsingBPRate_U_NAT | sv_HDMachine_rinsingTime_U_NAT | sv_HDMachine_ufRateForRinsing_U_NAT | sv_HDMachine_ufVolForRinsing_U_NAT | sv_HDMachine_bloodFlowForConnectingPatient_U_NAT | sv_HDMachine_conductivity_U_NAT | sv_HDMachine_bicarbonateConductivity_U_NAT | sv_HDMachine_dfTemperature_U_NAT | sv_HDMachine_dfFlow_U_NAT | sv_HDMachine_ufVol_U_NAT | sv_HDMachine_therapyTime_U_NAT | sv_HDMachine_minUFRate_U_NAT | sv_HDMachine_maxUFRate_U_NAT | sv_HDMachine_limitDeltaMinMaxAP_U_NAT | sv_HDMachine_actualTMPMaxTMP_U_NAT | sv_HDMachine_lowHigh_U_NAT | sv_HDMachine_heparinBolusVol_U_NAT | sv_HDMachine_heparinProfileRate_U_NAT | sv_HDMachine_syringeType_U_NAT | sv_SysClock_stime_U_NAT
--------------------------------
-- All possible bidings

NAMES_VALUES_LID = seq({seq({(n,v) | v <- typeLID(n)}) | n <- NAME_LID})
NAMES_VALUES_PAC = seq({seq({(n,v) | v <- typePAC(n)}) | n <- NAME_PAC})
NAMES_VALUES_PST = seq({seq({(n,v) | v <- typePST(n)}) | n <- NAME_PST})
NAMES_VALUES_HDM = seq({seq({(n,v) | v <- typeHDM(n)}) | n <- NAME_HDM})
NAMES_VALUES_DIR = seq({seq({(n,v) | v <- typeDIR(n)}) | n <- NAME_DIR})
NAMES_VALUES_LAM = seq({seq({(n,v) | v <- typeLAM(n)}) | n <- NAME_LAM})
NAMES_VALUES_BOO = seq({seq({(n,v) | v <- typeBOO(n)}) | n <- NAME_BOO})
NAMES_VALUES_BUT = seq({seq({(n,v) | v <- typeBUT(n)}) | n <- NAME_BUT})
NAMES_VALUES_CON = seq({seq({(n,v) | v <- typeCON(n)}) | n <- NAME_CON})
NAMES_VALUES_TIM = seq({seq({(n,v) | v <- typeTIM(n)}) | n <- NAME_TIM})
NAMES_VALUES_SWI = seq({seq({(n,v) | v <- typeSWI(n)}) | n <- NAME_SWI})
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

BINDINGS_LID = {set(b) | b <- set(distCartProd(NAMES_VALUES_LID))}
BINDINGS_PAC = {set(b) | b <- set(distCartProd(NAMES_VALUES_PAC))}
BINDINGS_PST = {set(b) | b <- set(distCartProd(NAMES_VALUES_PST))}
BINDINGS_HDM = {set(b) | b <- set(distCartProd(NAMES_VALUES_HDM))}
BINDINGS_DIR = {set(b) | b <- set(distCartProd(NAMES_VALUES_DIR))}
BINDINGS_LAM = {set(b) | b <- set(distCartProd(NAMES_VALUES_LAM))}
BINDINGS_BOO = {set(b) | b <- set(distCartProd(NAMES_VALUES_BOO))}
BINDINGS_BUT = {set(b) | b <- set(distCartProd(NAMES_VALUES_BUT))}
BINDINGS_CON = {set(b) | b <- set(distCartProd(NAMES_VALUES_CON))}
BINDINGS_TIM = {set(b) | b <- set(distCartProd(NAMES_VALUES_TIM))}
BINDINGS_SWI = {set(b) | b <- set(distCartProd(NAMES_VALUES_SWI))}
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

channel mget, mset : NAME.UNIVERSE
channel terminate
MEM_I = {| mset,mget,terminate |}


SysClock = 
	(let 		restrictLID(bs) = dres(bs,{})
		restrictPAC(bs) = dres(bs,{})
		restrictPST(bs) = dres(bs,{})
		restrictHDM(bs) = dres(bs,{})
		restrictDIR(bs) = dres(bs,{})
		restrictLAM(bs) = dres(bs,{})
		restrictBOO(bs) = dres(bs,{})
		restrictBUT(bs) = dres(bs,{})
		restrictCON(bs) = dres(bs,{})
		restrictTIM(bs) = dres(bs,{})
		restrictSWI(bs) = dres(bs,{})
		restrictNAT(bs) = dres(bs,{sv_SysClock_stime_U_NAT})
	within
		|~| b_LID : BINDINGS_LID, b_PAC : BINDINGS_PAC, b_PST : BINDINGS_PST, b_HDM : BINDINGS_HDM, b_DIR : BINDINGS_DIR, b_LAM : BINDINGS_LAM, b_BOO : BINDINGS_BOO, b_BUT : BINDINGS_BUT, b_CON : BINDINGS_CON, b_TIM : BINDINGS_TIM, b_SWI : BINDINGS_SWI, b_NAT : BINDINGS_NAT @ Memorise(
		mget.sv_SysClock_stime_U_NAT?v_sv_SysClock_stime_U_NAT:(typeNAT(sv_SysClock_stime_U_NAT)) -> 
		mset.sv_SysClock_stime_U_NAT.(NAT.0) -> ( let X = ( 
		mget.sv_SysClock_stime_U_NAT?v_sv_SysClock_stime_U_NAT:(typeNAT(sv_SysClock_stime_U_NAT)) -> (valueNAT(v_sv_SysClock_stime_U_NAT) <= 3 & ( tick -> 
		mset.sv_SysClock_stime_U_NAT.(NAT.(valueNAT(v_sv_SysClock_stime_U_NAT) + 1)) -> SKIP
		 ||| getCurrentTime.valueNAT(v_sv_SysClock_stime_U_NAT) -> SKIP ) [] valueNAT(v_sv_SysClock_stime_U_NAT) > 2 & 
		mset.sv_SysClock_stime_U_NAT.(NAT.0) -> SKIP) ; X ) within X ), restrictLID(b_LID), restrictPAC(b_PAC), restrictPST(b_PST), restrictHDM(b_HDM), restrictDIR(b_DIR), restrictLAM(b_LAM), restrictBOO(b_BOO), restrictBUT(b_BUT), restrictCON(b_CON), restrictTIM(b_TIM), restrictSWI(b_SWI), restrictNAT(b_NAT))
)

channel getCurrentTime : NatValue
channel tick