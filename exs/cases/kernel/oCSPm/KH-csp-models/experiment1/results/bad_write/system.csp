

channel tick --used for syncing each hardware component
CLOCK = tick -> CLOCK

-------------------------------------------------------------------------------------------------





channel STACKFULL, BADINTERRUPTTAG, SCENARIO_COMPLETED   --something bad has happened - show status before STOP



{- Memory and Bus -}

--Memory is represented by a map where Mem_Region is a key for Data

datatype CodeOwner = jDC | kernel | kernel_error | partition1 | partition2 | mf_handler | supI_handler | timer1_handler | timer2_handler | scheduler | scenario_completed
--(DC stands for DontCare)


--convention - aX is always forbidden to everyone, even the kernel (for debugging)
datatype Mem_Region =  a0 | a1 | a2  | aDC | aX 


datatype Data =   d0 | d1 | dDC   

datatype Op  =  nopInst | writeInst | readInst | mmuBlockInst | mmuUnBlockInst | setSupModeInst |  setUsrModeInst | jumpInst | returnInst | parSwitchInst | handlerReturnInst



--memory is made up of 'memory regions'


mem_init = (|  a0 => d0, a1 => d0, a2 => d0, aDC => d0, aX => d0 |)

--supervisor mode only instructions and memory regions
supervisor_instructions = {mmuBlockInst,mmuUnBlockInst, setSupModeInst}
--supervisor_mem_regions = {krnl_init,handler0}






datatype Bus_Dir =  r | w 
channel read, write : Data      --synced with CPU
channel bus : Bus_Dir.Mem_Region   --synced with MMU
channel badaccess , mmuOK              --synced with MMU 

--m is the memory map

MEM_BUS(m) 
=   tick -> ( MEM_BUS_READ(m) 
              [] MEM_BUS_WRITE(m) 
              [] MEM_BUS(m) )

MEM_BUS_READ(m) 
= bus.r?a -> (  (  mmuOK -> read!(mapLookup(m,a)) -> MEM_BUS(m)  )
               [] (badaccess -> MEM_BUS(m) )  )

MEM_BUS_WRITE(m) 
=  bus.w?a -> ( ( mmuOK -> write?d  -> MEM_BUS(mapUpdate(m, a, d))  )
               [](badaccess -> MEM_BUS(m)) )



--(interrupt is a InTag combined with InLevel using the '.' operator.)
channel  raise, raiseFailed : InTag     --synced with IRQ

channel mmuBlock, mmuUnBlock : Mem_Region         --synced with CPU

MMU(blocked) 
=   tick -> ( TRANSFER(blocked) 
            [] BLOCK_MEM_REGION(blocked) 
            [] UNBLOCK_MEM_REGION(blocked) 
            [] MMU(blocked) )

TRANSFER(blocked) 
= bus?dir?addr ->  ( if member(addr, blocked) 
                     then ( badaccess -> raise!memfault -> MMU(blocked) )  
                                         
                     else ( mmuOK -> MMU(blocked) )
                    )
                   
BLOCK_MEM_REGION(blocked) 
= mmuBlock?a -> MMU(union(blocked,{a}))  
                           
UNBLOCK_MEM_REGION(blocked) 
= mmuUnBlock?a -> MMU(diff(blocked,{a}))



mmu_init= {aX}  



 


{- Interrupts and IRQ -}





--InTag =  {0..1}
--InLevel = {0..1}


--datatype on_off = on | off




datatype InTag = memfault | supInst | timer1Interrupt | timer2Interrupt | schedulerInterrupt | scenarioDone

interruptVector = < (scenarioDone, false), 
                    (supInst, false), 
                    (memfault, false),  
                    (schedulerInterrupt, false),
                    (timer1Interrupt, false), 
                    (timer2Interrupt, false) >  --(list in order of priority high to low)


--raiseFailed    -- synced with MMU / Device
--raise          -- synced with MMU / Device      

channel irqForward, devRaise : InTag    --synced with CPU
channel noPendingIRQs         --synced with CPU

channel devStart, devEnd

IRQ(vector)
=  ( RAISE(vector) )
   [] ( FORWARD_TO_CPU(vector) )
   [] ( devStart -> PROCESS_DEVICE_INTERRUPTS(vector) ) 

RAISE(vector) = raise?(x)  -> IRQ(raise_interrupt(x, vector) )
                              

PROCESS_DEVICE_INTERRUPTS(vector) 
=  (  devEnd -> IRQ(vector) ) 
   [] ( DEV_INTERRUPT(vector) ) 

DEV_INTERRUPT(vector)
= devRaise?x   -> ( (DEV_INTERRUPT(raise_interrupt(x, vector) ))
                    [](devEnd -> IRQ(raise_interrupt(x, vector) )) 
                  ) 



FORWARD_TO_CPU(vector)
 = ( if is_irq_pending(<>,vector)   == false
     then (  noPendingIRQs -> IRQ(vector) )
     else (  irqForward!(get_next_tag(<>,vector)) -> 
             IRQ(clear_bit(get_next_tag(<>,vector), <>, vector)) 
          )  
   ) 

--raise an interrupt 
   
raise_interrupt(tag, vector) = set_bit(tag, <>, vector)


--find a tuple and set bool true while maintaining list order

set_bit(tag, sublist1, sublist2) 
= if sublist2 == <>
  then sublist1
  else if head(sublist2) == (tag, false)
       then ( sublist1 ^ <(tag, true)> ^ tail(sublist2) ) 
       else set_bit(tag, sublist1 ^ <head(sublist2)>, tail(sublist2))


--find a tuple and set bool false while maintaining list order

clear_bit(tag, sublist1, sublist2) 
= if sublist2 == <>
  then sublist1
  else if head(sublist2) == (tag, true)
       then ( sublist1 ^ <(tag, false)> ^ tail(sublist2) ) 
       else clear_bit(tag, sublist1 ^ <head(sublist2)>, tail(sublist2))




    

is_irq_pending(sublist1, sublist2) 
= if sublist2 == <>
  then false
  else if is_irq_activated(head(sublist2)) == true
       then true
       else is_irq_pending(<head(sublist1)>, tail(sublist2) )  

is_irq_activated( (tag,status) ) 
= if status == true
  then true
  else false


get_next_tag(sublist1, sublist2)
= if sublist2 == <>
  then head(sublist1)   ---throws an emptylist exception. hen you call this function you assume there is an IRQ present. 
  else if is_irq_activated(head(sublist2)) == true
       then get_irq_tag(head(sublist2))
       else get_next_tag(<head(sublist1)>, tail(sublist2) )  

get_irq_tag( (tag, status) )
= tag




{- CPU -}
channel irqFwdDisabled   --not synced with anything, just for info

--Return popped stack. Keep the bottom element (kernel) on the bottom of the stack always
popped_stack(stack) =  if length(stack) ==1
                        then ( stack )   
                        else ( tail(stack) )




--fetch channel - Reads like fetch code from mem_region to do Op on mem_region, possibly using data
channel fe :  CodeOwner.Op.CodeOwner.Mem_Region.Data   --synced with CODE.  







CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)--(currLoc, currSupBit, lastLoc, lastSupBit)

= tick -> SYNC_DEVICES(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)

--used to make sending interrupts from DEVICES to IRQ more deterministic
SYNC_DEVICES(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)
= devStart -> devEnd -> CHECK_IRQ_ENABLED(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) 

CHECK_IRQ_ENABLED(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) 
= ( if TrapsEnabled == false
    then  ( irqFwdDisabled -> FETCH(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)  )
    else (  CHECK_INTERRUPTS(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) )
  )

--channel test
CHECK_INTERRUPTS(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)
= (noPendingIRQs -> FETCH(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) )
                             
  [] ( irqForward?tag -> 
     ( --this block of code is equivilent to trap table (matching interrupts to handler code)
     if tag == memfault
     then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit,  TrapsEnabled, mf_handler) )
     else ( if tag == supInst
            then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit,  TrapsEnabled, supI_handler) )
            else ( if tag == timer1Interrupt
                   then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit,  TrapsEnabled, timer1_handler) )
                   else ( if tag == timer2Interrupt
                          then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit,  TrapsEnabled, timer2_handler) )
                          else ( if tag == schedulerInterrupt
                                 then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled,  scheduler) )
                                 else( if tag == scenarioDone
                                       then ( HANDLE(currLoc, currSupBit, lastLoc, lastSupBit,  TrapsEnabled, scenario_completed) )
                                       else( BADINTERRUPTTAG -> STOP )  
                                     )  
                               ) 
                        )
                 )
          )
     )  
     ) 
  
HANDLE(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled,handler) 
=  FETCH(handler, true, currLoc, currSupBit, false)
  
  






FETCH(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) 
= (fe.(currLoc)?inst -> CHECK_SUP_BIT_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, inst ) )


get_owner((owner, mode)) = owner

get_mode((owner, mode)) = mode


CHECK_SUP_BIT_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
=  (if currSupBit == false
   then (if member(op, supervisor_instructions)
         then ( raise!supInst ->  CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) )
         else EXEC_RETURN_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat ) ) 

  else EXEC_RETURN_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat ) )



EXEC_RETURN_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= if op == handlerReturnInst
  then ( --enable IRQs and pop stack
         CPU(lastLoc, lastSupBit, currLoc, currSupBit, true)
       ) 
  else ( EXEC_JUMP_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat ) )



  
EXEC_JUMP_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= if op == jumpInst
  then ( CPU(jmp, currSupBit, currLoc, currSupBit, TrapsEnabled) 
       --if jmp == jDC  
         --then ( CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) )  --jump to DONTCARE is a nop
         --else ( CPU(jmp, currSupBit, currLoc, currSupBit, TrapsEnabled) )
       )
       
  else ( EXEC_READINST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )  )






--replace_head(stack, jmp, trapBit ) = <(jmp, trapBit)> ^ popped_stack(stack)

--channel execute : Op.Mem_Region.Data

EXEC_READINST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= (if op == readInst
   then (bus.r.addr ->  ( (read?d ->  CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)) 
                      [] ( CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)) ) )
   else (EXEC_SUPMODE_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )  )
   )


 EXEC_SUPMODE_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
 = (if op == setSupModeInst
    then CPU(currLoc, true, lastLoc, lastSupBit, TrapsEnabled)
    else EXEC_USRMODE_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat ) )


EXEC_USRMODE_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
 = (if op == setUsrModeInst
    then CPU(currLoc, false, lastLoc, lastSupBit, TrapsEnabled)
    else EXEC_MMU_BLOCK_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat ) )


EXEC_MMU_BLOCK_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= (if op == mmuBlockInst
   then mmuBlock!addr ->  CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)
   else EXEC_MMU_UNBLOCK_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )  )

EXEC_MMU_UNBLOCK_INST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= (if op == mmuUnBlockInst
   then mmuUnBlock!addr ->  CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled)
   else EXEC_WRITEINST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )  )


EXEC_WRITEINST(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled, op.jmp.addr.dat )
= (if op == writeInst
   then bus.w.addr ->((write!dat ->  CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled))
                      [](CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled))) 
   else CPU(currLoc, currSupBit, lastLoc, lastSupBit, TrapsEnabled) )








INTERNAL_SYSTEM0 = CPU(kernel, true, kernel, true, true)   
INTERNAL_SYSTEM1 = INTERNAL_SYSTEM0 [| {| tick, read, bus, write |} |]  MEM_BUS (mem_init)
INTERNAL_SYSTEM2 = INTERNAL_SYSTEM1 [| {| tick, bus, badaccess, mmuOK, mmuBlock, mmuUnBlock |} |] MMU(mmu_init) 
--INTERNAL_SYSTEM3 = INTERNAL_SYSTEM2 [| {| tick, devStart, devEnd |} |] DEVICES
INTERNAL_SYSTEM4 = INTERNAL_SYSTEM2 [| {| noPendingIRQs, raise,  irqForward, devStart, devRaise, devEnd|} |] IRQ(interruptVector) 



INTERNAL_SYSTEM5 = INTERNAL_SYSTEM4 [| {| tick, raise  |} |] CHECKER

INTERNAL_SYSTEM6 = INTERNAL_SYSTEM5 [| {| fe, SCENARIO_COMPLETED  |} |] CODE


SYSTEM = INTERNAL_SYSTEM6  [| {| tick  |} |] CLOCK

assert SYSTEM :[deadlock free [F]]


