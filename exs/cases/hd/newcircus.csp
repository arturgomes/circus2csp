include "sequence_aux.csp"
include "function_aux.csp"


NUMBER = { 0.. 1}
datatype ACTIVITY = AC1 | AC2 | AC3

channel preparationPhase, therapyInitiation
channel connectingToPatient, duringTherapy, therapyEnding
channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer, setBloodLines, endTreatment
channel lampOn, lampOff
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : NUMBER
channel salineBagLevel : NUMBER
channel senAirVol : NUMBER
channel senApTransdPress : NUMBER
channel senBloodFlowInEBC : NUMBER
channel senBypassVol : NUMBER
channel senFflowDirect : NUMBER
channel senInfVol : NUMBER
channel senLastNonZeroBF : NUMBER
channel senNetFluidRemoval : NUMBER
channel senNetFluidRemovalRate : NUMBER
channel senRotDirectBP : NUMBER
channel senRotDirectUFP : NUMBER
channel senVolInEBC : NUMBER
channel senVpTransdPress : NUMBER
channel senSADSensorFlow : NUMBER
channel senHDMode : NUMBER
channel setBloodFlow : NUMBER
TherapyPhaseChanSet = {| preparationPhase,therapyInitiation,connectingToPatient,duringTherapy,therapyEnding |}
SensorReadingsComm = {| senAirVol,senApTransdPress,senBloodFlowInEBC,senHDMode,senSADSensorFlow,senVpTransdPress |}
HDGenComPACChanSet = {| preparationPhase,connectingToPatient,therapyInitiation,therapyEnding |}
assert HDMachine(b_PAC1,b_NUM1) :[deadlock free]
assert HDMachine(b_PAC1,b_NUM1) :[deterministic]
--------------------------------
-- The universe of values
 datatype UNIVERSE =  PAC.Set(ACTIVITY) | NUM.NUMBER
--Conversions
valuePAC(PAC.v) = v
valueNUM(NUM.v) = v

typePAC(x) = U_PAC
typeNUM(x) = U_NUM

tagPAC(x) = PAC
tagNUM(x) = NUM

-- subtypes of UNIVERSE for PAC
subtype U_PAC = PAC.Set(ACTIVITY)

-- subtypes of UNIVERSE for NUM
subtype U_NUM = NUM.NUMBER

-- definition of NAME for the entire spec
datatype NAME = sv_airVolLimit | sv_airVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_hdActivity | sv_hdMachineState | sv_infSalineVol | sv_lowerPressureLimit | sv_upperPressureLimit | sv_vpTransdPress

-- Subtype definition for NUM
b_NUM1 = {(sv_airVolLimit, NUM.0),(sv_airVol, NUM.0),(sv_apTransdPress, NUM.0),(sv_bloodFlowInEBC, NUM.0),(sv_infSalineVol, NUM.0),(sv_lowerPressureLimit, NUM.0),(sv_upperPressureLimit, NUM.0),(sv_vpTransdPress, NUM.0)}
subtype NAME_NUM = sv_airVolLimit | sv_airVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_infSalineVol | sv_lowerPressureLimit | sv_upperPressureLimit | sv_vpTransdPress
NAMES_VALUES_NUM = seq({seq({(n,v) | v <- typeNUM(n)}) | n <- NAME_NUM})

-- Subtype definition for PAC
b_PAC1 = {(sv_hdMachineState, PAC.{AC1}),(sv_hdActivity, PAC.{AC1})}
subtype NAME_PAC = sv_hdMachineState
NAMES_VALUES_PAC = seq({seq({(n,v) | v <- typePAC(n)}) | n <- NAME_PAC})

-- Bindings definitions for NUM
BINDINGS_NUM = {set(b) | b <- set(distCartProd(NAMES_VALUES_NUM))}

-- Bindings definitions for PAC
BINDINGS_PAC = {set(b) | b <- set(distCartProd(NAMES_VALUES_PAC))}


--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_PAC,b_NUM) =
  let
     Memory(b_PAC,b_NUM) =
        ( ( ( ( [] n : dom(b_PAC) @ mget.n.apply(b_PAC,n) ->
      Memory(b_PAC,b_NUM) )
      [] ( [] n : dom(b_NUM) @ mget.n.apply(b_NUM,n) ->
      Memory(b_PAC,b_NUM) ))
      [] ( ( [] n : dom(b_PAC) @ mset.n?nv:typePAC(n) ->
      Memory(over(b_PAC,n,nv),b_NUM) )
      [] ( [] n : dom(b_NUM) @ mset.n?nv:typeNUM(n) ->
      Memory(b_PAC,over(b_NUM,n,nv)) )))
      [] terminate -> SKIP)

  within ( ( ( ( preparationPhase ->
      autSelfTest ->
      lampOn ->
      ( ( ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?t_sv_infSalineVol ->
      mset.sv_infSalineVol.(NUM.t_sv_infSalineVol) -> SKIP );
      setBloodLines -> SKIP );
      insertHeparinSyringe ->
      heparinLineIsVented -> SKIP );
      connectDialyzer ->
      fillArterialDrip ->
      stopBP -> SKIP );
      therapyInitiation ->
      mset.sv_hdMachineState.(PAC.{AC1}) ->
      lampOff ->
      connPatientArterially ->
      setBloodFlow?t_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NUM.t_sv_bloodFlowInEBC) ->
      connPatientVenously ->
      lampOn ->
      ( senHDMode.0 ->
      lampOff ->
      endTreatment ->
      lampOff -> SKIP ) );
      therapyEnding -> SKIP )
      ||| ( let X = ( ( ( ( ( ( ( ( ( ( let muR1 = mget.sv_hdActivity?v_sv_hdActivity:(typePAC(sv_hdActivity)) ->
      mget.sv_infSalineVol?v_sv_infSalineVol:(typeNUM(sv_infSalineVol)) ->
      ( ( valuePAC(v_sv_hdActivity) == {AC2} and valueNUM(v_sv_infSalineVol) > 0 & ( stopBloodFlow -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdActivity) == {AC2} and valueNUM(v_sv_infSalineVol) > 0 & muR1 )) within muR1 )
      ||| ( let muR5 = mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      mget.sv_upperPressureLimit?v_sv_upperPressureLimit:(typeNUM(sv_upperPressureLimit)) ->
      mget.sv_vpTransdPress?v_sv_vpTransdPress:(typeNUM(sv_vpTransdPress)) ->
      ( ( valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_vpTransdPress) > valueNUM(v_sv_upperPressureLimit) & ( stopBP -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_vpTransdPress) > valueNUM(v_sv_upperPressureLimit) & muR5 )) within muR5 ) )
      ||| ( let muR6 = mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      mget.sv_lowerPressureLimit?v_sv_lowerPressureLimit:(typeNUM(sv_lowerPressureLimit)) ->
      mget.sv_vpTransdPress?v_sv_vpTransdPress:(typeNUM(sv_vpTransdPress)) ->
      ( ( valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_vpTransdPress) < valueNUM(v_sv_lowerPressureLimit) & ( stopBP -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_vpTransdPress) < valueNUM(v_sv_lowerPressureLimit) & muR6 )) within muR6 ) )
      ||| ( let muR7 = mget.sv_apTransdPress?v_sv_apTransdPress:(typeNUM(sv_apTransdPress)) ->
      mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      mget.sv_upperPressureLimit?v_sv_upperPressureLimit:(typeNUM(sv_upperPressureLimit)) ->
      ( ( valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_apTransdPress) > valueNUM(v_sv_upperPressureLimit) & ( stopBP -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_apTransdPress) > valueNUM(v_sv_upperPressureLimit) & muR7 )) within muR7 ) )
      ||| ( let muR8 = mget.sv_apTransdPress?v_sv_apTransdPress:(typeNUM(sv_apTransdPress)) ->
      mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      mget.sv_lowerPressureLimit?v_sv_lowerPressureLimit:(typeNUM(sv_lowerPressureLimit)) ->
      ( ( valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_apTransdPress) < valueNUM(v_sv_lowerPressureLimit) & ( stopBP -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdMachineState) == {AC2} and valueNUM(v_sv_apTransdPress) < valueNUM(v_sv_lowerPressureLimit) & muR8 )) within muR8 ) )
      ||| ( let muR14 = mget.sv_bloodFlowInEBC?v_sv_bloodFlowInEBC:(typeNUM(sv_bloodFlowInEBC)) ->
      mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      ( ( valuePAC(v_sv_hdMachineState) == {AC1} and valueNUM(v_sv_bloodFlowInEBC) == 0 & ( stopBP -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdMachineState) == {AC1} and valueNUM(v_sv_bloodFlowInEBC) == 0 & muR14 )) within muR14 ) )
      ||| connectingToPatient ->
      therapyInitiation -> SKIP )
      ||| ( let muR27 = senAirVol?t_sv_airVol ->
      mset.sv_airVol.(NUM.t_sv_airVol) ->
      muR27 within muR27 ) )
      ||| ( let muR2832 = mget.sv_airVol?v_sv_airVol:(typeNUM(sv_airVol)) ->
      mget.sv_airVolLimit?v_sv_airVolLimit:(typeNUM(sv_airVolLimit)) ->
      mget.sv_hdActivity?v_sv_hdActivity:(typePAC(sv_hdActivity)) ->
      mget.sv_hdMachineState?v_sv_hdMachineState:(typePAC(sv_hdMachineState)) ->
      ( ( valueNUM(v_sv_airVol) > valueNUM(v_sv_airVolLimit) and valuePAC(v_sv_hdActivity) == {AC1} and valuePAC(v_sv_hdMachineState) == {AC3} or valuePAC(v_sv_hdActivity) == {AC2,AC3} or valuePAC(v_sv_hdMachineState) == {AC1,AC2} & ( stopBloodFlow -> SKIP
      ||| produceAlarmSound -> SKIP ) )
      [] ( not valueNUM(v_sv_airVol) > valueNUM(v_sv_airVolLimit) and valuePAC(v_sv_hdActivity) == {AC1} and valuePAC(v_sv_hdMachineState) == {AC3} or valuePAC(v_sv_hdActivity) == {AC2,AC3} or valuePAC(v_sv_hdMachineState) == {AC1,AC2} & muR2832 )) within muR2832 ) );
      X ) within X ) );
      terminate -> SKIP )
      [| MEMI |] Memory(b_PAC,b_NUM))\MEMI )
