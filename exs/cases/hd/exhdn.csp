include "sequence_aux.csp"
include "function_aux.csp"

NatValue = {0..1}
datatype BUTTON = ON | OFF

datatype STATEPHASE = connectThePatient | initPhase | prepPhase

datatype ACTIVITY = rinsingEBC | applicationArterialBolus | anticoagDelivRun | reinfProcess | preparationOfDF | priming | rinsing | idle

TIME = (NatValue,NatValue)
chkInterval = 1
channel preparationPhase, therapyInitiation
channel connectingToPatient, duringTherapy, therapyEnding
channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : BUTTON
channel salineBagLevel : NatValue
channel tick
channel getCurrentTime : NatValue
channel getRinsingBPRate, setRinsingBPRate : NatValue
channel getBloodFlowInEBC, setBloodFlowInEBC : NatValue
channel getMinUFRateTreat, setMinUFRateTreat : BUTTON
channel getArtBolusVol, setArtBolusVol : NatValue
channel setBloodLines
channel senAirVolLimit : NatValue
channel senAirVol : NatValue
channel senApTransdPress : NatValue
channel senBloodFlowInEBC : NatValue
channel senBypassVol : BUTTON
channel senFflowDirect : BUTTON
channel senHDMode : BUTTON
channel senInfVol : NatValue
channel senLastNonZeroBF : NatValue
channel senNetFluidRemovalRate : NatValue
channel senNetFluidRemoval : BUTTON
channel senRotDirectBP : BUTTON
channel senRotDirectUFP : BUTTON
channel senSADSensorFlow : NatValue
channel senVolInEBC : NatValue
channel senVpTransdPress : NatValue
channel inputOfSetRinsingParameters
channel inputOfSetDFParameters
channel inputOfSetUFParameters
channel inputOfSetPressureParameters
channel inputOfSetHeparinParameters

INT_CHAN = {|autSelfTest, atrialTubing,
              ventricularTubing, connectDialyzer,
              stopBloodFlow, produceAlarmSound, stopBP,
              disconnectDF, stopFlowDialyzer, stopCoagulantFlow,
              fillArterialDrip, connPatientArterially, connPatientVenously,
              insertHeparinSyringe, heparinLineIsVented,
              connectingConcentrate,
              salineBagLevel,
              getRinsingBPRate, setRinsingBPRate,
              getBloodFlowInEBC, setBloodFlowInEBC,
              getMinUFRateTreat, setMinUFRateTreat,
              getArtBolusVol, setArtBolusVol,
              setBloodLines,
              senAirVolLimit,
              senAirVol,
              senApTransdPress,
              senBloodFlowInEBC,
              senBypassVol,
              senFflowDirect,
              senHDMode,
              senInfVol,
              senLastNonZeroBF,
              senNetFluidRemovalRate,
              senNetFluidRemoval,
              senRotDirectBP,
              senRotDirectUFP,
              senSADSensorFlow,
              senVolInEBC,
              senVpTransdPress
              |}
 HDEnv = ( ( (HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) \ INT_CHAN) [| {| tick,getCurrentTime |} |] SysClock(b_NAT1) ) \ {| tick,getCurrentTime |} )
MyHDMACHINE = let X = HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1); X within X
assert (HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) \ INT_CHAN) :[ deadlock free [FD] ]
assert (HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) \ INT_CHAN) :[ livelock free ]
assert (HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) \ INT_CHAN) :[ deterministic [F] ]
assert HDEnv :[ deadlock free [FD] ]
assert HDEnv :[ livelock free ]
assert HDEnv :[ deterministic [F] ]
--------------------------------
-- The universe of values
 datatype UNIVERSE = PAC.Set(ACTIVITY) | PST.Set(STATEPHASE) | BUT.BUTTON | NAT.NatValue
--Conversions
valuePAC(PAC.v) = v
valuePST(PST.v) = v
valueBUT(BUT.v) = v
valueNAT(NAT.v) = v

typePAC(x) = U_PAC
typePST(x) = U_PST
typeBUT(x) = U_BUT
typeNAT(x) = U_NAT

tagPAC(x) = PAC
tagPST(x) = PST
tagBUT(x) = BUT
tagNAT(x) = NAT

-- subtypes of UNIVERSE for PAC
subtype U_PAC = PAC.Set(ACTIVITY)

-- subtypes of UNIVERSE for PST
subtype U_PST = PST.Set(STATEPHASE)

-- subtypes of UNIVERSE for BUT
subtype U_BUT = BUT.BUTTON

-- subtypes of UNIVERSE for NAT
subtype U_NAT = NAT.NatValue

-- definition of NAME for the entire spec
datatype NAME = sv_airVol | sv_alarm | sv_artBolusVol | sv_bloodFlowInEBC | sv_hdActivity | sv_hdMachineState | sv_hdMode | sv_infSalineVol | sv_lastNonZeroBF | sv_rotDirectionBP | sv_signalLamp | sv_time | sv_stime

-- Subtype definition for NAT
b_NAT1 = {(sv_airVol, NAT.0),(sv_artBolusVol, NAT.0),(sv_bloodFlowInEBC, NAT.0),(sv_infSalineVol, NAT.0),(sv_lastNonZeroBF, NAT.0),(sv_time, NAT.0),(sv_stime, NAT.0)}
subtype NAME_NAT = sv_airVol | sv_artBolusVol | sv_bloodFlowInEBC | sv_infSalineVol | sv_lastNonZeroBF | sv_time | sv_stime
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

-- Subtype definition for BUT
b_BUT1 = {(sv_alarm, BUT.ON),(sv_hdMode, BUT.ON),(sv_rotDirectionBP, BUT.ON),(sv_signalLamp, BUT.ON)}
subtype NAME_BUT = sv_alarm | sv_hdMode | sv_rotDirectionBP | sv_signalLamp
NAMES_VALUES_BUT = seq({seq({(n,v) | v <- typeBUT(n)}) | n <- NAME_BUT})

-- Subtype definition for PAC
b_PAC1 = {(sv_hdActivity, PAC.{rinsingEBC})}
subtype NAME_PAC = sv_hdActivity
NAMES_VALUES_PAC = seq({seq({(n,v) | v <- typePAC(n)}) | n <- NAME_PAC})

-- Subtype definition for PST
b_PST1 = {(sv_hdMachineState, PST.{connectThePatient})}
subtype NAME_PST = sv_hdMachineState
NAMES_VALUES_PST = seq({seq({(n,v) | v <- typePST(n)}) | n <- NAME_PST})

-- Bindings definitions for NAT
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

-- Bindings definitions for BUT
BINDINGS_BUT = {set(b) | b <- set(distCartProd(NAMES_VALUES_BUT))}

-- Bindings definitions for PAC
BINDINGS_PAC = {set(b) | b <- set(distCartProd(NAMES_VALUES_PAC))}

-- Bindings definitions for PST
BINDINGS_PST = {set(b) | b <- set(distCartProd(NAMES_VALUES_PST))}


--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_PAC,b_PST,b_BUT,b_NAT) =
  let
     Memory(b_PAC,b_PST,b_BUT,b_NAT) =
        ( ( ( ( [] n : dom(b_PAC) @ mget.n.apply(b_PAC,n) ->
      Memory(b_PAC,b_PST,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_PST) @ mget.n.apply(b_PST,n) ->
      Memory(b_PAC,b_PST,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_BUT) @ mget.n.apply(b_BUT,n) ->
      Memory(b_PAC,b_PST,b_BUT,b_NAT) )
      [] ( [] n : dom(b_NAT) @ mget.n.apply(b_NAT,n) ->
      Memory(b_PAC,b_PST,b_BUT,b_NAT) ))))
      [] ( ( [] n : dom(b_PAC) @ mset.n?nv:typePAC(n) ->
      Memory(over(b_PAC,n,nv),b_PST,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_PST) @ mset.n?nv:typePST(n) ->
      Memory(b_PAC,over(b_PST,n,nv),b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_BUT) @ mset.n?nv:typeBUT(n) ->
      Memory(b_PAC,b_PST,over(b_BUT,n,nv),b_NAT) )
      [] ( [] n : dom(b_NAT) @ mset.n?nv:typeNAT(n) ->
      Memory(b_PAC,b_PST,b_BUT,over(b_NAT,n,nv)) )))))
      [] terminate -> SKIP)
  within
     let  restrictPAC(bs) = dres(bs,{sv_hdActivity})
         restrictPST(bs) = dres(bs,{sv_hdMachineState})
         restrictBUT(bs) = dres(bs,{sv_alarm, sv_hdMode, sv_rotDirectionBP, sv_signalLamp})
         restrictNAT(bs) = dres(bs,{sv_airVol, sv_artBolusVol, sv_bloodFlowInEBC, sv_infSalineVol, sv_lastNonZeroBF, sv_time, sv_stime})
     within ( ( ( mset.sv_airVol.(NAT.0) ->
      mset.sv_alarm.(BUT.OFF) ->
      mset.sv_bloodFlowInEBC.(NAT.0) ->
      mset.sv_hdActivity.(PAC.{idle}) ->
      mset.sv_hdMachineState.(PST.{initPhase}) ->
      mset.sv_infSalineVol.(NAT.0) ->
      mset.sv_lastNonZeroBF.(NAT.0) ->
      mset.sv_time.(NAT.0) ->
      mset.sv_rotDirectionBP.(BUT.ON) ->
      mset.sv_hdMode.(BUT.ON) ->
      ( ( ( preparationPhase ->
      autSelfTest ->
      mset.sv_signalLamp.(BUT.ON) ->
      connectingConcentrate?bicarbonateAcetate ->
      inputOfSetRinsingParameters ->
      ( ( ( ( ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?t_sv_infSalineVol ->
      mset.sv_infSalineVol.(NAT.t_sv_infSalineVol) -> SKIP );
      setBloodLines -> SKIP );
      setRinsingBPRate?rinsingBPRate -> SKIP );
      insertHeparinSyringe ->
      heparinLineIsVented -> SKIP );
      inputOfSetDFParameters ->
      inputOfSetUFParameters ->
      inputOfSetPressureParameters ->
      inputOfSetHeparinParameters -> SKIP );
      connectDialyzer ->
      fillArterialDrip ->
      stopBP -> SKIP );
      therapyInitiation ->
      mset.sv_hdMachineState.(PST.{connectThePatient}) ->
      mset.sv_signalLamp.(BUT.OFF) ->
      connPatientArterially ->
      setBloodFlowInEBC?t_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NAT.t_sv_bloodFlowInEBC) ->
      connPatientVenously ->
      mset.sv_signalLamp.(BUT.ON) ->
      mset.sv_hdMode.(BUT.ON) ->
      ( ( ( ( setMinUFRateTreat?ON -> SKIP )
      ||| setArtBolusVol?t_sv_artBolusVol ->
      mset.sv_artBolusVol.(NAT.t_sv_artBolusVol) -> SKIP )
      ||| senHDMode.OFF ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP );
      therapyEnding ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP ) );
      therapyEnding -> SKIP )
      ||| getCurrentTime?t_sv_time ->
      mset.sv_time.(NAT.t_sv_time) -> SKIP )
      ||| ( let X = ( ( let muR1 = mget.sv_hdActivity?v_sv_hdActivity:(typePAC(sv_hdActivity)) ->
      mget.sv_infSalineVol?v_sv_infSalineVol:(typeNAT(sv_infSalineVol)) ->
      (valuePAC(v_sv_hdActivity) == {applicationArterialBolus} and valueNAT(v_sv_infSalineVol) > 0 &
         ( stopBloodFlow -> SKIP
      ||| mset.sv_alarm.(BUT.ON) ->
      produceAlarmSound -> SKIP ) [] not valuePAC(v_sv_hdActivity) == {applicationArterialBolus} and valueNAT(v_sv_infSalineVol) > 0 &
         muR1) within muR1 );
      X ) within X ) )
      ||| ( let muSensorReadings = mget.sv_bloodFlowInEBC?v_sv_bloodFlowInEBC:(typeNAT(sv_bloodFlowInEBC)) ->
      mget.sv_hdMode?v_sv_hdMode:(typeBUT(sv_hdMode)) ->
      mget.sv_lastNonZeroBF?v_sv_lastNonZeroBF:(typeNAT(sv_lastNonZeroBF)) ->
      mget.sv_rotDirectionBP?v_sv_rotDirectionBP:(typeBUT(sv_rotDirectionBP)) ->
      ( ( ( ( ( senBloodFlowInEBC?t_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NAT.t_sv_bloodFlowInEBC) ->
      muSensorReadings
      [] senFflowDirect?fflowDirect ->
      muSensorReadings)
      [] senInfVol?infVol ->
      muSensorReadings)
      [] senLastNonZeroBF?t_sv_lastNonZeroBF ->
      mset.sv_lastNonZeroBF.(NAT.t_sv_lastNonZeroBF) ->
      muSensorReadings)
      [] senRotDirectBP?t_sv_rotDirectionBP ->
      mset.sv_rotDirectionBP.(BUT.t_sv_rotDirectionBP) ->
      muSensorReadings)
      [] senHDMode?t_sv_hdMode ->
      mset.sv_hdMode.(BUT.t_sv_hdMode) ->
      muSensorReadings) within muSensorReadings ) );
      terminate -> SKIP )
      [| MEMI |] Memory(restrictPAC(b_PAC),restrictPST(b_PST),restrictBUT(b_BUT),restrictNAT(b_NAT)))\MEMI )


SysClock(b_NAT) =
  let
     Memory(b_NAT) =
        ( ( ( [] n : dom(b_NAT) @ mget.n.apply(b_NAT,n) ->
      Memory(b_NAT) )
      [] ( [] n : dom(b_NAT) @ mset.n?nv:typeNAT(n) ->
      Memory(over(b_NAT,n,nv)) ))
      [] terminate -> SKIP)

  within
     let  restrictNAT(bs) = dres(bs,{sv_stime})
     within( ( ( mset.sv_stime.(NAT.0) ->
      ( let X = mget.sv_stime?v_sv_stime:(typeNAT(sv_stime)) ->
      ( (valueNAT(v_sv_stime) <= 1 &
         ( tick ->
      mget.sv_stime?v_sv_stime:(typeNAT(sv_stime)) -> mset.sv_stime.(NAT.(valueNAT(v_sv_stime) + 1)%1) -> SKIP
      ||| getCurrentTime.valueNAT(v_sv_stime) -> SKIP ) [] valueNAT(v_sv_stime) > 0 &
         mset.sv_stime.(NAT.0) -> SKIP);
      X ) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(restrictNAT(b_NAT)))\MEMI )
