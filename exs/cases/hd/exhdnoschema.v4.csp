include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..2}
TIME = (NatValue,NatValue)
datatype BOOL = TRUE | FALSE

chkInterval = 1
channel preparationPhase, therapyInitiation
channel connectingToPatient, duringTherapy, therapyEnding, endTreatment
channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : BOOL
channel salineBagLevel : NatValue
channel tick
channel getCurrentTime : NatValue
channel senAirVolLimit : NatValue
channel senAirVol : NatValue
channel senApTransdPress : NatValue
channel senbloodFlowInEBC : NatValue
channel setbloodFlowInEBC : NatValue
channel setBloodFlow : NatValue
channel senBypassVol : BOOL
channel senFflowDirect : BOOL
channel senHDMode : BOOL
channel senInfVol : NatValue
channel senLastNonZeroBF : NatValue
channel senNetFluidRemovalRate : NatValue
channel senNetFluidRemoval : BOOL
channel setMinUFRateTreat : BOOL
channel senRotDirectBP : BOOL
channel senRotDirectUFP : BOOL
channel senSADSensorFlow : NatValue
channel senVolInEBC : NatValue
channel senVpTransdPress : NatValue
channel setRinsingBPSpeed : NatValue
channel setRinsingBPRate : NatValue
channel inputOfSetDFParameters : NatValue.BOOL.NatValue.NatValue.NatValue
channel inputOfSetHeparinParameters : TIME.NatValue.NatValue.BOOL.NatValue
HDMachineChanSet = {| senApTransdPress,senbloodFlowInEBC,senBypassVol,senFflowDirect,senInfVol,senLastNonZeroBF,senNetFluidRemoval,senNetFluidRemovalRate,senRotDirectBP,senRotDirectUFP,senVolInEBC,senSADSensorFlow,senVpTransdPress,senHDMode,setMinUFRateTreat |}
TherapyPhaseChanSet = {| preparationPhase,therapyInitiation,connectingToPatient,duringTherapy,therapyEnding |}

--------------------------------
-- The universe of values
 datatype UNIVERSE = PBO.Set(BOOL) | BOO.BOOL | NAT.NatValue
--Conversions
valuePBO(PBO.v) = v
valueBOO(BOO.v) = v
valueNAT(NAT.v) = v

typePBO(x) = U_PBO
typeBOO(x) = U_BOO
typeNAT(x) = U_NAT

tagPBO(x) = PBO
tagBOO(x) = BOO
tagNAT(x) = NAT

-- subtypes of UNIVERSE for PBO
subtype U_PBO = PBO.Set(BOOL)

-- subtypes of UNIVERSE for BOO
subtype U_BOO = BOO.BOOL

-- subtypes of UNIVERSE for NAT
subtype U_NAT = NAT.NatValue

-- definition of NAME for the entire spec
datatype NAME = sv_airVolLimit | sv_airVol | sv_alarm | sv_apTransdPress | sv_bloodFlowInEBC | sv_bypassValve | sv_fflowDirect | sv_hdActivity | sv_hdMachineState | sv_hdMode | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_time | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_signalLamp | sv_bicarbonateAcetate | sv_dfTemperature | sv_dfFlow

-- Subtype definition for NAT
b_NAT1 = {(sv_airVolLimit, NAT.0),(sv_airVol, NAT.0),(sv_apTransdPress, NAT.0),(sv_bloodFlowInEBC, NAT.0),(sv_infSalineVol, NAT.0),(sv_lastNonZeroBF, NAT.0),(sv_lowerPressureLimit, NAT.0),(sv_netFluidRemovalRate, NAT.0),(sv_safeUpperLimit, NAT.0),(sv_timerIntervalR9, NAT.0),(sv_timerIntervalR10, NAT.0),(sv_timerIntervalR11, NAT.0),(sv_timerIntervalR12, NAT.0),(sv_timerIntervalR13, NAT.0),(sv_time, NAT.0),(sv_upperPressureLimit, NAT.0),(sv_volumeInEBC, NAT.0),(sv_vpTransdPress, NAT.0),(sv_sadSensorFlow, NAT.0),(sv_dfTemperature, NAT.0),(sv_dfFlow, NAT.0)}
subtype NAME_NAT = sv_airVolLimit | sv_airVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_time | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_dfTemperature | sv_dfFlow
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

-- Subtype definition for BOO
b_BOO1 = {(sv_alarm, BOO.TRUE),(sv_bypassValve, BOO.TRUE),(sv_fflowDirect, BOO.TRUE),(sv_hdMode, BOO.TRUE),(sv_netFluidRemoval, BOO.TRUE),(sv_rotDirectionBP, BOO.TRUE),(sv_rotDirectionUFP, BOO.TRUE),(sv_signalLamp, BOO.TRUE),(sv_bicarbonateAcetate, BOO.TRUE)}
subtype NAME_BOO = sv_alarm | sv_bypassValve | sv_fflowDirect | sv_hdMode | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_signalLamp | sv_bicarbonateAcetate
NAMES_VALUES_BOO = seq({seq({(n,v) | v <- typeBOO(n)}) | n <- NAME_BOO})

-- Subtype definition for PBO
b_PBO1 = {(sv_hdActivity, PBO.{TRUE}),(sv_hdMachineState, PBO.{TRUE})}
subtype NAME_PBO = sv_hdActivity | sv_hdMachineState
NAMES_VALUES_PBO = seq({seq({(n,v) | v <- typePBO(n)}) | n <- NAME_PBO})

-- Bindings definitions for NAT
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

-- Bindings definitions for BOO
BINDINGS_BOO = {set(b) | b <- set(distCartProd(NAMES_VALUES_BOO))}

-- Bindings definitions for PBO
BINDINGS_PBO = {set(b) | b <- set(distCartProd(NAMES_VALUES_PBO))}


--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_PBO,b_BOO,b_NAT) =
  let
     MemoryPBOVar(n,b_PBO) =
        ( ( mget.n.apply(b_PBO,n) ->
    MemoryPBOVar(n,b_PBO)
      [] mset.n?nv:typePBO(n) ->
    MemoryPBOVar(n,over(b_PBO,n,nv)))
      [] terminate -> SKIP)
     MemoryBOOVar(n,b_BOO) =
        ( ( mget.n.apply(b_BOO,n) ->
    MemoryBOOVar(n,b_BOO)
      [] mset.n?nv:typeBOO(n) ->
    MemoryBOOVar(n,over(b_BOO,n,nv)))
      [] terminate -> SKIP)
     MemoryNATVar(n,b_NAT) =
        ( ( mget.n.apply(b_NAT,n) ->
    MemoryNATVar(n,b_NAT)
      [] mset.n?nv:typeNAT(n) ->
    MemoryNATVar(n,over(b_NAT,n,nv)))
      [] terminate -> SKIP)
     MemoryPBO(b_PBO) =
        ( [| {| terminate |} |] n : dom(b_PBO) @ MemoryPBOVar(n,b_PBO) )
     MemoryBOO(b_BOO) =
        ( [| {| terminate |} |] n : dom(b_BOO) @ MemoryBOOVar(n,b_BOO) )
     MemoryNAT(b_NAT) =
        ( [| {| terminate |} |] n : dom(b_NAT) @ MemoryNATVar(n,b_NAT) )
     Memory(b_PBO,b_BOO,b_NAT) =
        ( ( MemoryNAT(b_NAT)
      [| {| terminate |} |]
      MemoryBOO(b_BOO) )
      [| {| terminate |} |]
      MemoryPBO(b_PBO) )
     MemoryMergePBOVar(n,b_PBO,ns) =
        ( ( lget.n.apply(b_PBO,n) ->
    MemoryMergePBOVar(n,b_PBO,ns)
      [] lset.n?nv:typePBO(n) ->
    MemoryMergePBOVar(n,over(b_PBO,n,nv),ns))
      [] lterminate ->
    (  ; bd : <b_PBO> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))
     MemoryMergeBOOVar(n,b_BOO,ns) =
        ( ( lget.n.apply(b_BOO,n) ->
    MemoryMergeBOOVar(n,b_BOO,ns)
      [] lset.n?nv:typeBOO(n) ->
    MemoryMergeBOOVar(n,over(b_BOO,n,nv),ns))
      [] lterminate ->
    (  ; bd : <b_BOO> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))
     MemoryMergeNATVar(n,b_NAT,ns) =
        ( ( lget.n.apply(b_NAT,n) ->
    MemoryMergeNATVar(n,b_NAT,ns)
      [] lset.n?nv:typeNAT(n) ->
    MemoryMergeNATVar(n,over(b_NAT,n,nv),ns))
      [] lterminate ->
    (  ; bd : <b_NAT> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))
     MemoryMergePBO(b_PBO,ns) =
        ( [| {| lterminate |} |] n : dom(b_PBO) @ MemoryMergePBOVar(n,b_PBO,ns) )
     MemoryMergeBOO(b_BOO,ns) =
        ( [| {| lterminate |} |] n : dom(b_BOO) @ MemoryMergeBOOVar(n,b_BOO,ns) )
     MemoryMergeNAT(b_NAT,ns) =
        ( [| {| lterminate |} |] n : dom(b_NAT) @ MemoryMergeNATVar(n,b_NAT,ns) )
     MemoryMerge(b_PBO,b_BOO,b_NAT,ns) =
        ( ( MemoryMergeNAT(b_NAT,ns)
      [| {| lterminate |} |]
      MemoryMergeBOO(b_BOO,ns) )
      [| {| lterminate |} |]
      MemoryMergePBO(b_PBO,ns) )

  within ( ( ( ( preparationPhase ->
    autSelfTest ->
    mset.sv_signalLamp.(BOO.TRUE) ->
    connectingConcentrate?x ->
    mset.sv_bicarbonateAcetate.(BOO.x) ->
    ( ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?ifs ->
    mset.sv_infSalineVol.(NAT.ifs) -> SKIP );
      insertHeparinSyringe ->
    heparinLineIsVented -> SKIP );
      inputOfSetDFParameters?sCond.sBAc.sBCond.sDFTemp.sDFFlow ->
    mset.sv_bicarbonateAcetate.(BOO.sBAc) ->
    mset.sv_dfTemperature.(NAT.sDFTemp) ->
    mset.sv_dfFlow.(NAT.sDFFlow) -> SKIP );
      connectDialyzer ->
    fillArterialDrip ->
    stopBP -> SKIP );
      therapyInitiation ->
    connectingToPatient ->
    mset.sv_signalLamp.(BOO.FALSE) ->
    connPatientArterially ->
    setbloodFlowInEBC?bf ->
    mset.sv_bloodFlowInEBC.(NAT.bf) ->
    connPatientVenously ->
    mset.sv_signalLamp.(BOO.TRUE) ->
    mset.sv_hdMode.(BOO.TRUE) ->
    mset.sv_hdMode.(BOO.FALSE) ->
    mset.sv_signalLamp.(BOO.FALSE) ->
    therapyEnding ->
    mset.sv_signalLamp.(BOO.FALSE) -> SKIP )
      ||| ( let muR1 = mget.sv_hdActivity?v_sv_hdActivity:(typePBO(sv_hdActivity)) ->
    mget.sv_infSalineVol?v_sv_infSalineVol:(typeNAT(sv_infSalineVol)) ->
    (((valuePBO(v_sv_hdActivity) == {TRUE}) and (valueNAT(v_sv_infSalineVol) > 0)) &
         ( stopBloodFlow -> SKIP
      ||| mset.sv_alarm.(BOO.TRUE) ->
    produceAlarmSound -> SKIP ) [] not (((valuePBO(v_sv_hdActivity) == {TRUE}) and (valueNAT(v_sv_infSalineVol) > 0))) &
         tick ->
    muR1) within muR1 ) );
      terminate -> SKIP )
      [| MEMI |] Memory(b_PBO,b_BOO,b_NAT))\MEMI )
