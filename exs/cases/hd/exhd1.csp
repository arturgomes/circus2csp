include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..1}
datatype BUTTON = ON | OFF

channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : BUTTON
channel salineBagLevel : NatValue
channel senAirVol : NatValue
channel senAirVolLimit : NatValue
channel senApTransdPress : NatValue
channel senBloodFlowInEBC : NatValue
channel senBypassVol : BUTTON
channel senFflowDirect : BUTTON
channel senInfVol : NatValue
channel senLastNonZeroBF : NatValue
channel senNetFluidRemoval : BUTTON
channel senNetFluidRemovalRate : NatValue
channel senRotDirectBP : BUTTON
channel senRotDirectUFP : BUTTON
channel senVolInEBC : NatValue
channel senVpTransdPress : NatValue
channel senSADSensorFlow : NatValue
channel senHDMode : BUTTON
channel getCurrentTime : NatValue
channel tick, connectThePatient, initPhase, prepPhase, endPhase, applicationArterialBolus, rinsing, idle
channel preparationPhase, connectingToPatient, therapyInitiation, therapyEnding
channel setRinsingParameters : NatValue.NatValue.NatValue.NatValue.NatValue.NatValue
channel setDFParameters : NatValue.BUTTON.NatValue.NatValue.NatValue.NatValue
channel setRinsingBPSpeed : NatValue
channel setUFParameters : NatValue.NatValue.NatValue.NatValue
channel setMinUFRateTreat : BUTTON
channel setArtBolusVol : NatValue
channel setBloodLines
channel setPressureParameters : NatValue.NatValue.BUTTON.NatValue.BUTTON
channel endTreatment

INT_CHAN = {|autSelfTest, atrialTubing,
              ventricularTubing, connectDialyzer,
              stopBloodFlow, produceAlarmSound, stopBP,
              disconnectDF, stopFlowDialyzer, stopCoagulantFlow,
              fillArterialDrip, connPatientArterially, connPatientVenously,
              insertHeparinSyringe, heparinLineIsVented,
              connectingConcentrate,
              salineBagLevel,
              getRinsingBPRate, setRinsingBPRate,
              getBloodFlowInEBC, setBloodFlowInEBC,
              getMinUFRateTreat, setMinUFRateTreat,
              getArtBolusVol, setArtBolusVol,
              setBloodLines,
              senAirVolLimit,
              senAirVol,
              senApTransdPress,
              senBloodFlowInEBC,
              senBypassVol,
              senFflowDirect,
              senHDMode,
              senInfVol,
              senLastNonZeroBF,
              senNetFluidRemovalRate,
              senNetFluidRemoval,
              senRotDirectBP,
              senRotDirectUFP,
              senSADSensorFlow,
              senVolInEBC,
              senVpTransdPress
              |}
 HDEnv = ( ( (HDMachine(b_NAT1,b_BUT) \ INT_CHAN) [| {| tick,getCurrentTime |} |] SysClock(b_NAT1) ) \ {| tick,getCurrentTime |} )
MyHDMACHINE = let X = HDMachine(b_NAT1,b_BUT); X within X
assert (HDMachine(b_NAT1,b_BUT) \ INT_CHAN) :[ deadlock free [FD] ]
assert (HDMachine(b_NAT1,b_BUT) \ INT_CHAN) :[ livelock free ]
assert (HDMachine(b_NAT1,b_BUT) \ INT_CHAN) :[ deterministic [F] ]
assert HDEnv :[ deadlock free [FD] ]
assert HDEnv :[ livelock free ]
assert HDEnv :[ deterministic [F] ]

my_compress(p) =
let
transparent normal, diamond
within normal(diamond(p))
--------------------------------
-- The universe of values
 datatype UNIVERSE = BUT.BUTTON | NAT.NatValue
--Conversions
valueBUT(BUT.v) = v
valueNAT(NAT.v) = v

typeBUT(x) = U_BUT
typeNAT(x) = U_NAT

tagBUT(x) = BUT
tagNAT(x) = NAT

-- subtypes of UNIVERSE for BUT
subtype U_BUT = BUT.BUTTON

-- subtypes of UNIVERSE for NAT
subtype U_NAT = NAT.NatValue

-- definition of NAME for the entire spec
datatype NAME = sv_airVolLimit | sv_airVol | sv_alarm | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_bypassValve | sv_fflowDirect | sv_hdMode | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_bloodLines | sv_signalLamp | sv_minUFRateTreat | sv_fillingBPRate | sv_rinsingBPRate | sv_ufRateForRinsing | sv_ufVolForRinsing | sv_bloodFlowForConnectingPatient | sv_conductivity | sv_bicarbonateAcetate | sv_bicarbonateConductivity | sv_dfTemperature | sv_rinsingTime | sv_dfFlow | sv_ufVol | sv_therapyTime | sv_minUFRate | sv_maxUFRate | sv_limitDeltaMinMaxAP | sv_actualTMPMaxTMP | sv_limitsTMP | sv_lowHigh | sv_extendedTMPLimitRange | sv_time

-- Subtype definition for NAT
b_NAT1 = {(sv_airVolLimit, NAT.0),(sv_airVol, NAT.0),(sv_artBolusVol, NAT.0),(sv_apTransdPress, NAT.0),(sv_bloodFlowInEBC, NAT.0),(sv_infSalineVol, NAT.0),(sv_lastNonZeroBF, NAT.0),(sv_lowerPressureLimit, NAT.0),(sv_netFluidRemovalRate, NAT.0),(sv_safeUpperLimit, NAT.0),(sv_timerIntervalR9, NAT.0),(sv_timerIntervalR10, NAT.0),(sv_timerIntervalR11, NAT.0),(sv_timerIntervalR12, NAT.0),(sv_timerIntervalR13, NAT.0),(sv_upperPressureLimit, NAT.0),(sv_volumeInEBC, NAT.0),(sv_vpTransdPress, NAT.0),(sv_sadSensorFlow, NAT.0),(sv_fillingBPRate, NAT.0),(sv_rinsingBPRate, NAT.0),(sv_ufRateForRinsing, NAT.0),(sv_ufVolForRinsing, NAT.0),(sv_bloodFlowForConnectingPatient, NAT.0),(sv_conductivity, NAT.0),(sv_bicarbonateConductivity, NAT.0),(sv_dfTemperature, NAT.0),(sv_rinsingTime, NAT.0),(sv_dfFlow, NAT.0),(sv_ufVol, NAT.0),(sv_therapyTime, NAT.0),(sv_minUFRate, NAT.0),(sv_maxUFRate, NAT.0),(sv_limitDeltaMinMaxAP, NAT.0),(sv_actualTMPMaxTMP, NAT.0),(sv_lowHigh, NAT.0),(sv_time, NAT.0)}
subtype NAME_NAT = sv_airVolLimit | sv_airVol | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_fillingBPRate | sv_rinsingBPRate | sv_ufRateForRinsing | sv_ufVolForRinsing | sv_bloodFlowForConnectingPatient | sv_conductivity | sv_bicarbonateConductivity | sv_dfTemperature | sv_rinsingTime | sv_dfFlow | sv_ufVol | sv_therapyTime | sv_minUFRate | sv_maxUFRate | sv_limitDeltaMinMaxAP | sv_actualTMPMaxTMP | sv_lowHigh | sv_time
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

-- Subtype definition for BUT
b_BUT1 = {(sv_alarm, BUT.ON),(sv_bypassValve, BUT.ON),(sv_fflowDirect, BUT.ON),(sv_hdMode, BUT.ON),(sv_netFluidRemoval, BUT.ON),(sv_rotDirectionBP, BUT.ON),(sv_rotDirectionUFP, BUT.ON),(sv_bloodLines, BUT.ON),(sv_signalLamp, BUT.ON),(sv_minUFRateTreat, BUT.ON),(sv_bicarbonateAcetate, BUT.ON),(sv_limitsTMP, BUT.ON),(sv_extendedTMPLimitRange, BUT.ON)}
subtype NAME_BUT = sv_alarm | sv_bypassValve | sv_fflowDirect | sv_hdMode | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_bloodLines | sv_signalLamp | sv_minUFRateTreat | sv_bicarbonateAcetate | sv_limitsTMP | sv_extendedTMPLimitRange
NAMES_VALUES_BUT = seq({seq({(n,v) | v <- typeBUT(n)}) | n <- NAME_BUT})

-- Bindings definitions for NAT
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

-- Bindings definitions for BUT
BINDINGS_BUT = {set(b) | b <- set(distCartProd(NAMES_VALUES_BUT))}


--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_NAT,b_BUT) =
  let
     Memory(b_NAT,b_BUT) =
        ( ( ( ( [] n : dom(b_NAT) @ mget.n.apply(b_NAT,n) ->
      Memory(b_NAT,b_BUT) )
      [] ( [] n : dom(b_BUT) @ mget.n.apply(b_BUT,n) ->
      Memory(b_NAT,b_BUT) ))
      [] ( ( [] n : dom(b_NAT) @ mset.n?nv:typeNAT(n) ->
      Memory(over(b_NAT,n,nv),b_BUT) )
      [] ( [] n : dom(b_BUT) @ mset.n?nv:typeBUT(n) ->
      Memory(b_NAT,over(b_BUT,n,nv)) )))
      [] terminate -> SKIP)
     MemoryMerge(b_NAT,b_BUT,ns) =
        ( ( ( ( [] n : dom(b_NAT) @ lget.n.apply(b_NAT,n) ->
      MemoryMerge(b_NAT,b_BUT,ns) )
      [] ( [] n : dom(b_BUT) @ lget.n.apply(b_BUT,n) ->
      MemoryMerge(b_NAT,b_BUT,ns) ))
      [] ( ( [] n : dom(b_NAT) @ lset.n?nv:typeNAT(n) ->
      MemoryMerge(over(b_NAT,n,nv),b_BUT,ns) )
      [] ( [] n : dom(b_BUT) @ lset.n?nv:typeBUT(n) ->
      MemoryMerge(b_NAT,over(b_BUT,n,nv),ns) )))
      [] lterminate ->
      (  ; bd : < b_NAT>^< b_BUT> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))

  within
     let  restrictNAT(bs) = dres(bs,{sv_airVolLimit, sv_airVol, sv_artBolusVol, sv_apTransdPress, sv_bloodFlowInEBC, sv_infSalineVol, sv_lastNonZeroBF, sv_lowerPressureLimit, sv_netFluidRemovalRate, sv_safeUpperLimit, sv_timerIntervalR9, sv_timerIntervalR10, sv_timerIntervalR11, sv_timerIntervalR12, sv_timerIntervalR13, sv_upperPressureLimit, sv_volumeInEBC, sv_vpTransdPress, sv_sadSensorFlow, sv_fillingBPRate, sv_rinsingBPRate, sv_ufRateForRinsing, sv_ufVolForRinsing, sv_bloodFlowForConnectingPatient, sv_conductivity, sv_bicarbonateConductivity, sv_dfTemperature, sv_rinsingTime, sv_dfFlow, sv_ufVol, sv_therapyTime, sv_minUFRate, sv_maxUFRate, sv_limitDeltaMinMaxAP, sv_actualTMPMaxTMP, sv_lowHigh, sv_time})
         restrictBUT(bs) = dres(bs,{sv_alarm, sv_bypassValve, sv_fflowDirect, sv_hdMode, sv_netFluidRemoval, sv_rotDirectionBP, sv_rotDirectionUFP, sv_bloodLines, sv_signalLamp, sv_minUFRateTreat, sv_bicarbonateAcetate, sv_limitsTMP, sv_extendedTMPLimitRange})
     within( ( ( prepPhase ->
      autSelfTest ->
      mset.sv_signalLamp.(BUT.ON) ->
      connectingConcentrate?t_sv_bicarbonateAcetate ->
      mset.sv_bicarbonateAcetate.(BUT.t_sv_bicarbonateAcetate) ->
      ( (   ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?t_sv_infSalineVol ->
      mset.sv_infSalineVol.(NAT.t_sv_infSalineVol) -> SKIP );
      setBloodLines ->
      mset.sv_bloodLines.(BUT.ON) -> SKIP );
      setRinsingBPSpeed?t_sv_rinsingBPRate ->
      mset.sv_rinsingBPRate.(NAT.t_sv_rinsingBPRate) -> SKIP );
      insertHeparinSyringe ->
      heparinLineIsVented -> SKIP );
      connectDialyzer ->
      fillArterialDrip ->
      stopBP -> initPhase ->
      connectThePatient ->
      mset.sv_signalLamp.(BUT.OFF) ->
      connPatientArterially ->
      connPatientVenously ->
      mset.sv_signalLamp.(BUT.ON) ->
      mset.sv_hdMode.(BUT.ON) ->SKIP
      -- ( ( ( ( ( SKIP
      -- ||| setMinUFRateTreat?ON -> SKIP )
      -- ||| SKIP )
      -- ||| setArtBolusVol?t_sv_artBolusVol ->
      -- mset.sv_artBolusVol.(NAT.t_sv_artBolusVol) -> SKIP )
      -- ||| senHDMode.OFF ->
      -- mset.sv_signalLamp.(BUT.OFF) -> SKIP );
      -- endTreatment ->
      -- mset.sv_signalLamp.(BUT.OFF) -> SKIP )
      );
      endPhase -> SKIP );
      terminate -> SKIP ) \ MEMI
      [| MEMI |] Memory(restrictNAT(b_NAT),restrictBUT(b_BUT)))\MEMI )


SysClock(b_NAT) =
  let
     Memory(b_NAT) =
        ( ( ( [] n : dom(b_NAT) @ mget.n.apply(b_NAT,n) ->
      Memory(b_NAT) )
      [] ( [] n : dom(b_NAT) @ mset.n?nv:typeNAT(n) ->
      Memory(over(b_NAT,n,nv)) ))
      [] terminate -> SKIP)
     MemoryMerge(b_NAT,ns) =
        ( ( ( [] n : dom(b_NAT) @ lget.n.apply(b_NAT,n) ->
      MemoryMerge(b_NAT,ns) )
      [] ( [] n : dom(b_NAT) @ lset.n?nv:typeNAT(n) ->
      MemoryMerge(over(b_NAT,n,nv),ns) ))
      [] lterminate ->
      (  ; bd : <b_NAT> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))

  within
     let  restrictNAT(bs) = dres(bs,{sv_airVolLimit, sv_airVol, sv_artBolusVol, sv_apTransdPress, sv_bloodFlowInEBC, sv_infSalineVol, sv_lastNonZeroBF, sv_lowerPressureLimit, sv_netFluidRemovalRate, sv_safeUpperLimit, sv_timerIntervalR9, sv_timerIntervalR10, sv_timerIntervalR11, sv_timerIntervalR12, sv_timerIntervalR13, sv_upperPressureLimit, sv_volumeInEBC, sv_vpTransdPress, sv_sadSensorFlow, sv_fillingBPRate, sv_rinsingBPRate, sv_ufRateForRinsing, sv_ufVolForRinsing, sv_bloodFlowForConnectingPatient, sv_conductivity, sv_bicarbonateConductivity, sv_dfTemperature, sv_rinsingTime, sv_dfFlow, sv_ufVol, sv_therapyTime, sv_minUFRate, sv_maxUFRate, sv_limitDeltaMinMaxAP, sv_actualTMPMaxTMP, sv_lowHigh, sv_time})
     within( ( ( mset.sv_time.(NAT.0) ->
      ( let X = ( ( tick ->
      mget.sv_time?v_sv_time:(typeNAT(sv_time)) ->
      mset.sv_time.(NAT.(valueNAT(v_sv_time) + 1)) -> SKIP
      ||| mget.sv_time?v_sv_time:(typeNAT(sv_time)) ->
      getCurrentTime.valueNAT(v_sv_time) -> SKIP );
      X ) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(restrictNAT(b_NAT)))\MEMI )
