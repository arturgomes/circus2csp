include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..1}
datatype BUTTON = ON | OFF

datatype STATEPHASE = connectThePatient | initPhase | prepPhase | endPhase

datatype ACTIVITY = rinsingEBC | applicationArterialBolus | anticoagDelivRun | reinfProcess | preparationOfDF | priming | rinsing | idle

TIME = (NatValue,NatValue)
chkInterval = 1
channel preparationPhase, therapyInitiation
channel connectingToPatient, duringTherapy, therapyEnding
channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : BUTTON
channel salineBagLevel : NatValue
channel tick
channel getCurrentTime : NatValue
channel getRinsingBPRate, setRinsingBPRate : NatValue
channel getBloodFlowInEBC, setBloodFlowInEBC : NatValue
channel getMinUFRateTreat, setMinUFRateTreat : BUTTON
channel getArtBolusVol, setArtBolusVol : NatValue
channel setBloodLines
channel senAirVolLimit : NatValue
channel senAirVol : NatValue
channel senApTransdPress : NatValue
channel senBloodFlowInEBC : NatValue
channel senBypassVol : BUTTON
channel senFflowDirect : BUTTON
channel senHDMode : BUTTON
channel senInfVol : NatValue
channel senLastNonZeroBF : NatValue
channel senNetFluidRemovalRate : NatValue
channel senNetFluidRemoval : BUTTON
channel senRotDirectBP : BUTTON
channel senRotDirectUFP : BUTTON
channel senSADSensorFlow : NatValue
channel senVolInEBC : NatValue
channel senVpTransdPress : NatValue
channel inputOfSetRinsingParameters, inputOfSetDFParameters, inputOfSetUFParameters, inputOfSetPressureParameters, inputOfSetHeparinParameters
TherapyPhaseChanSet = {| preparationPhase,therapyInitiation,connectingToPatient,duringTherapy,therapyEnding |}
INTCHAN = {| autSelfTest,atrialTubing,ventricularTubing,connectDialyzer,stopBloodFlow,produceAlarmSound,stopBP,disconnectDF,stopFlowDialyzer,stopCoagulantFlow,fillArterialDrip,connPatientArterially,connPatientVenously,insertHeparinSyringe,heparinLineIsVented,connectingConcentrate,salineBagLevel,getRinsingBPRate,setRinsingBPRate,getBloodFlowInEBC,setBloodFlowInEBC,getMinUFRateTreat,setMinUFRateTreat,getArtBolusVol,setArtBolusVol,setBloodLines,senAirVolLimit,senAirVol,senApTransdPress,senBloodFlowInEBC,senBypassVol,senFflowDirect,senHDMode,senInfVol,senLastNonZeroBF,senNetFluidRemovalRate,senNetFluidRemoval,senRotDirectBP,senRotDirectUFP,senSADSensorFlow,senVolInEBC,senVpTransdPress |}
 HDEnv = ( ( HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) [| {| tick,getCurrentTime |} |] SysClock(b_NAT1) ) \ {| tick,getCurrentTime |} )
MyHDMACHINE = let X = HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1); X within X
assert HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) :[ deadlock free [FD] ]
assert HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) :[ livelock free ]
assert HDMachine(b_PAC1,b_PST1,b_NAT1,b_BUT1) :[ deterministic [F] ]
--------------------------------
-- The universe of values
 datatype UNIVERSE = PAC.Set(ACTIVITY) | PST.Set(STATEPHASE) | BUT.BUTTON | NAT.NatValue
--Conversions
valuePAC(PAC.v) = v
valuePST(PST.v) = v
valueBUT(BUT.v) = v
valueNAT(NAT.v) = v

typePAC(x) = U_PAC
typePST(x) = U_PST
typeBUT(x) = U_BUT
typeNAT(x) = U_NAT

tagPAC(x) = PAC
tagPST(x) = PST
tagBUT(x) = BUT
tagNAT(x) = NAT

-- subtypes of UNIVERSE for PAC
subtype U_PAC = PAC.Set(ACTIVITY)

-- subtypes of UNIVERSE for PST
subtype U_PST = PST.Set(STATEPHASE)

-- subtypes of UNIVERSE for BUT
subtype U_BUT = BUT.BUTTON

-- subtypes of UNIVERSE for NAT
subtype U_NAT = NAT.NatValue

-- definition of NAME for the entire spec 
datatype NAME = sv_airVolLimit | sv_airVol | sv_alarm | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_bypassValve | sv_fflowDirect | sv_hdActivity | sv_hdMachineState | sv_hdMode | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_safeUpperLimit | sv_signalLamp | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_time | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_bloodLines | sv_minUFRateTreat | sv_conductivity | sv_bicarbonateAcetate | sv_bicarbonateConductivity | sv_dfTemperature | sv_dfFlow | sv_stime

-- Subtype definition for NAT
b_NAT1 = {(sv_airVolLimit, NAT.0),(sv_airVol, NAT.0),(sv_artBolusVol, NAT.0),(sv_apTransdPress, NAT.0),(sv_bloodFlowInEBC, NAT.0),(sv_infSalineVol, NAT.0),(sv_lastNonZeroBF, NAT.0),(sv_lowerPressureLimit, NAT.0),(sv_netFluidRemovalRate, NAT.0),(sv_safeUpperLimit, NAT.0),(sv_timerIntervalR9, NAT.0),(sv_timerIntervalR10, NAT.0),(sv_timerIntervalR11, NAT.0),(sv_timerIntervalR12, NAT.0),(sv_timerIntervalR13, NAT.0),(sv_time, NAT.0),(sv_upperPressureLimit, NAT.0),(sv_volumeInEBC, NAT.0),(sv_vpTransdPress, NAT.0),(sv_sadSensorFlow, NAT.0),(sv_conductivity, NAT.0),(sv_bicarbonateConductivity, NAT.0),(sv_dfTemperature, NAT.0),(sv_dfFlow, NAT.0),(sv_stime, NAT.0)}
subtype NAME_NAT = sv_airVolLimit | sv_airVol | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_time | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_conductivity | sv_bicarbonateConductivity | sv_dfTemperature | sv_dfFlow | sv_stime
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

-- Subtype definition for BUT
b_BUT1 = {(sv_alarm, BUT.ON),(sv_bypassValve, BUT.ON),(sv_fflowDirect, BUT.ON),(sv_hdMode, BUT.ON),(sv_netFluidRemoval, BUT.ON),(sv_rotDirectionBP, BUT.ON),(sv_rotDirectionUFP, BUT.ON),(sv_signalLamp, BUT.ON),(sv_bloodLines, BUT.ON),(sv_minUFRateTreat, BUT.ON),(sv_bicarbonateAcetate, BUT.ON)}
subtype NAME_BUT = sv_alarm | sv_bypassValve | sv_fflowDirect | sv_hdMode | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_signalLamp | sv_bloodLines | sv_minUFRateTreat | sv_bicarbonateAcetate
NAMES_VALUES_BUT = seq({seq({(n,v) | v <- typeBUT(n)}) | n <- NAME_BUT})

-- Subtype definition for PAC
b_PAC1 = {(sv_hdActivity, PAC.{rinsingEBC})}
subtype NAME_PAC = sv_hdActivity
NAMES_VALUES_PAC = seq({seq({(n,v) | v <- typePAC(n)}) | n <- NAME_PAC})

-- Subtype definition for PST
b_PST1 = {(sv_hdMachineState, PST.{connectThePatient})}
subtype NAME_PST = sv_hdMachineState
NAMES_VALUES_PST = seq({seq({(n,v) | v <- typePST(n)}) | n <- NAME_PST})

-- Bindings definitions for NAT
BINDINGS_NAT = {set(b) | b <- set(distCartProd(NAMES_VALUES_NAT))}

-- Bindings definitions for BUT
BINDINGS_BUT = {set(b) | b <- set(distCartProd(NAMES_VALUES_BUT))}

-- Bindings definitions for PAC
BINDINGS_PAC = {set(b) | b <- set(distCartProd(NAMES_VALUES_PAC))}

-- Bindings definitions for PST
BINDINGS_PST = {set(b) | b <- set(distCartProd(NAMES_VALUES_PST))}


--------------------------------
 -- mget, mset and terminate -- 
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI -- 
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_PAC,b_PST,b_BUT,b_NAT) = 
  let
     MemoryPACVar(n,b_PAC) =
        ( ( mget.n.apply(b_PAC,n) ->
      MemoryPACVar(n,b_PAC)
      [] mset.n?nv:typePAC(n) ->
      MemoryPACVar(n,over(b_PAC,n,nv)))
      [] terminate -> SKIP)
     MemoryPSTVar(n,b_PST) =
        ( ( mget.n.apply(b_PST,n) ->
      MemoryPSTVar(n,b_PST)
      [] mset.n?nv:typePST(n) ->
      MemoryPSTVar(n,over(b_PST,n,nv)))
      [] terminate -> SKIP)
     MemoryBUTVar(n,b_BUT) =
        ( ( mget.n.apply(b_BUT,n) ->
      MemoryBUTVar(n,b_BUT)
      [] mset.n?nv:typeBUT(n) ->
      MemoryBUTVar(n,over(b_BUT,n,nv)))
      [] terminate -> SKIP)
     MemoryNATVar(n,b_NAT) =
        ( ( mget.n.apply(b_NAT,n) ->
      MemoryNATVar(n,b_NAT)
      [] mset.n?nv:typeNAT(n) ->
      MemoryNATVar(n,over(b_NAT,n,nv)))
      [] terminate -> SKIP)
     MemoryPAC(b_PAC) =
        ( [| {| terminate |} |] n : dom(b_PAC) @ MemoryPACVar(n,b_PAC) )
     MemoryPST(b_PST) =
        ( [| {| terminate |} |] n : dom(b_PST) @ MemoryPSTVar(n,b_PST) )
     MemoryBUT(b_BUT) =
        ( [| {| terminate |} |] n : dom(b_BUT) @ MemoryBUTVar(n,b_BUT) )
     MemoryNAT(b_NAT) =
        ( [| {| terminate |} |] n : dom(b_NAT) @ MemoryNATVar(n,b_NAT) )
     Memory(b_PAC,b_PST,b_BUT,b_NAT) =
        ( ( ( MemoryNAT(b_NAT)
      [| {| terminate |} |] 
      MemoryBUT(b_BUT) )
      [| {| terminate |} |] 
      MemoryPST(b_PST) )
      [| {| terminate |} |] 
      MemoryPAC(b_PAC) )
     MemoryMerge(b_PAC,b_PST,b_BUT,b_NAT,ns) =
        ( ( ( ( [] n : dom(b_PAC) @ lget.n.apply(b_PAC,n) ->
      MemoryMerge(b_PAC,b_PST,b_BUT,b_NAT,ns) )
      [] ( ( [] n : dom(b_PST) @ lget.n.apply(b_PST,n) ->
      MemoryMerge(b_PAC,b_PST,b_BUT,b_NAT,ns) )
      [] ( ( [] n : dom(b_BUT) @ lget.n.apply(b_BUT,n) ->
      MemoryMerge(b_PAC,b_PST,b_BUT,b_NAT,ns) )
      [] ( [] n : dom(b_NAT) @ lget.n.apply(b_NAT,n) ->
      MemoryMerge(b_PAC,b_PST,b_BUT,b_NAT,ns) ))))
      [] ( ( [] n : dom(b_PAC) @ lset.n?nv:typePAC(n) ->
      MemoryMerge(over(b_PAC,n,nv),b_PST,b_BUT,b_NAT,ns) )
      [] ( ( [] n : dom(b_PST) @ lset.n?nv:typePST(n) ->
      MemoryMerge(b_PAC,over(b_PST,n,nv),b_BUT,b_NAT,ns) )
      [] ( ( [] n : dom(b_BUT) @ lset.n?nv:typeBUT(n) ->
      MemoryMerge(b_PAC,b_PST,over(b_BUT,n,nv),b_NAT,ns) )
      [] ( [] n : dom(b_NAT) @ lset.n?nv:typeNAT(n) ->
      MemoryMerge(b_PAC,b_PST,b_BUT,over(b_NAT,n,nv),ns) )))))
      [] lterminate ->
      (  ; bd : < b_PAC>^< b_PST>^< b_BUT>^< b_NAT> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))
     
  within ( ( ( mset.sv_airVolLimit.(NAT.0) ->
      mset.sv_airVol.(NAT.0) ->
      mset.sv_alarm.(BUT.OFF) ->
      mset.sv_apTransdPress.(NAT.0) ->
      mset.sv_bloodFlowInEBC.(NAT.0) ->
      mset.sv_bypassValve.(BUT.OFF) ->
      mset.sv_fflowDirect.(BUT.ON) ->
      mset.sv_hdActivity.(PAC.{idle}) ->
      mset.sv_hdMachineState.(PST.{initPhase}) ->
      mset.sv_infSalineVol.(NAT.0) ->
      mset.sv_lastNonZeroBF.(NAT.0) ->
      mset.sv_time.(NAT.0) ->
      mset.sv_netFluidRemovalRate.(NAT.0) ->
      mset.sv_netFluidRemoval.(BUT.OFF) ->
      mset.sv_rotDirectionBP.(BUT.ON) ->
      mset.sv_rotDirectionUFP.(BUT.ON) ->
      mset.sv_safeUpperLimit.(NAT.0) ->
      mset.sv_timerIntervalR9.(NAT.0) ->
      mset.sv_timerIntervalR10.(NAT.0) ->
      mset.sv_timerIntervalR11.(NAT.0) ->
      mset.sv_timerIntervalR12.(NAT.0) ->
      mset.sv_timerIntervalR13.(NAT.0) ->
      mset.sv_lowerPressureLimit.(NAT.0) ->
      mset.sv_upperPressureLimit.(NAT.0) ->
      mset.sv_volumeInEBC.(NAT.0) ->
      mset.sv_vpTransdPress.(NAT.0) ->
      mset.sv_hdMode.(BUT.ON) ->
      mset.sv_bloodLines.(BUT.OFF) ->
      mset.sv_minUFRateTreat.(BUT.OFF) ->
      ( preparationPhase ->
      autSelfTest ->
      mset.sv_signalLamp.(BUT.ON) ->
      connectingConcentrate?t_sv_bicarbonateAcetate ->
      mset.sv_bicarbonateAcetate.(BUT.t_sv_bicarbonateAcetate) ->
      inputOfSetRinsingParameters ->
      ( ( ( ( ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?t_sv_infSalineVol ->
      mset.sv_infSalineVol.(NAT.t_sv_infSalineVol) -> SKIP );
      setBloodLines ->
      mset.sv_bloodLines.(BUT.ON) -> SKIP );
      setRinsingBPRate?rinsingBPRate -> SKIP );
      insertHeparinSyringe ->
      heparinLineIsVented -> SKIP );
      inputOfSetDFParameters ->
      inputOfSetUFParameters ->
      inputOfSetPressureParameters ->
      inputOfSetHeparinParameters -> SKIP );
      connectDialyzer ->
      fillArterialDrip ->
      stopBP -> SKIP );
      therapyInitiation ->
      mset.sv_hdMachineState.(PST.{connectThePatient}) ->
      mset.sv_signalLamp.(BUT.OFF) ->
      connPatientArterially ->
      setBloodFlowInEBC?t_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NAT.t_sv_bloodFlowInEBC) ->
      connPatientVenously ->
      mset.sv_signalLamp.(BUT.ON) ->
      mset.sv_hdMode.(BUT.ON) ->
      ( ( ( ( ( SKIP
      ||| setMinUFRateTreat?ON -> SKIP )
      ||| SKIP )
      ||| setArtBolusVol?t_sv_artBolusVol ->
      mset.sv_artBolusVol.(NAT.t_sv_artBolusVol) -> SKIP )
      ||| senHDMode.OFF ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP );
      therapyEnding ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP ) );
      therapyEnding -> SKIP )
      ||| getCurrentTime?t_sv_time ->
      mset.sv_time.(NAT.t_sv_time) -> SKIP );
      terminate -> SKIP )
      [| MEMI |] Memory(b_PAC,b_PST,b_BUT,b_NAT))\MEMI )

SysClock(b_NAT) = 
  let
     MemoryNATVar(n,b_NAT) =
        ( ( mget.n.apply(b_NAT,n) ->
      MemoryNATVar(n,b_NAT)
      [] mset.n?nv:typeNAT(n) ->
      MemoryNATVar(n,over(b_NAT,n,nv)))
      [] terminate -> SKIP)
     MemoryNAT(b_NAT) =
        ( [| {| terminate |} |] n : dom(b_NAT) @ MemoryNATVar(n,b_NAT) )
     Memory(b_NAT) =
        MemoryNAT(b_NAT)
     MemoryMerge(b_NAT,ns) =
        ( ( ( [] n : dom(b_NAT) @ lget.n.apply(b_NAT,n) ->
      MemoryMerge(b_NAT,ns) )
      [] ( [] n : dom(b_NAT) @ lset.n?nv:typeNAT(n) ->
      MemoryMerge(over(b_NAT,n,nv),ns) ))
      [] lterminate ->
      (  ; bd : <b_NAT> @   ; n : <y | y <- ns> @  mset.n.apply(bd,n) -> SKIP ))
     
  within ( ( ( mset.sv_stime.(NAT.0) ->
      ( let X = mget.sv_stime?v_sv_stime:(typeNAT(sv_stime)) ->
      ( (valueNAT(v_sv_stime) <= 3 &
         ( tick ->
      mset.sv_stime.(NAT.(valueNAT(v_sv_stime) + 1)) -> SKIP
      ||| getCurrentTime.valueNAT(v_sv_stime) -> SKIP ) [] valueNAT(v_sv_stime) > 2 &
         mset.sv_stime.(NAT.0) -> SKIP);
      X ) within X );
      terminate -> SKIP )
      [| MEMI |] Memory(b_NAT))\MEMI )