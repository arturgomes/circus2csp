include "sequence_aux.csp"
include "function_aux.csp"


NatValue = {0..1}
datatype BUTTON = ON | OFF

datatype STATEPHASE = connectThePatient | initPhase | prepPhase | endPhase

datatype ACTIVITY = applicationArterialBolus | rinsing | idle

TIME = (NatValue,NatValue)
channel autSelfTest, atrialTubing
channel ventricularTubing, connectDialyzer
channel stopBloodFlow, produceAlarmSound, stopBP
channel disconnectDF, stopFlowDialyzer, stopCoagulantFlow
channel fillArterialDrip, connPatientArterially, connPatientVenously
channel insertHeparinSyringe, heparinLineIsVented
channel connectingConcentrate : BUTTON
channel salineBagLevel : NatValue
channel senAirVol : NatValue
channel senAirVolLimit : NatValue
channel senApTransdPress : NatValue
channel senBloodFlowInEBC : NatValue
channel senBypassVol : BUTTON
channel senFflowDirect : BUTTON
channel senInfVol : NatValue
channel senLastNonZeroBF : NatValue
channel senNetFluidRemoval : BUTTON
channel senNetFluidRemovalRate : NatValue
channel senRotDirectBP : BUTTON
channel senRotDirectUFP : BUTTON
channel senVolInEBC : NatValue
channel senVpTransdPress : NatValue
channel senSADSensorFlow : NatValue
channel senHDMode : BUTTON
channel getCurrentTime : NatValue
channel tick
channel preparationPhase, connectingToPatient, therapyInitiation, therapyEnding
channel setRinsingParameters : NatValue.NatValue.NatValue.NatValue.NatValue.NatValue
channel setDFParameters : NatValue.BUTTON.NatValue.NatValue.NatValue.NatValue
channel setRinsingBPSpeed : NatValue
channel setUFParameters : NatValue.NatValue.NatValue.NatValue
channel setHeparinParameters : TIME.NatValue.NatValue.BUTTON.NatValue
channel setMinUFRateTreat : BUTTON
channel setArtBolusVol : NatValue
channel setBloodLines
channel setPressureParameters : NatValue.NatValue.BUTTON.NatValue.BUTTON
channel endTreatment

b_BUT1 = {(sv_alarm, BUT.OFF),
(sv_bicarbonateAcetate, BUT.OFF),
(sv_bloodLines, BUT.OFF),
(sv_bypassValve, BUT.OFF),
(sv_extendedTMPLimitRange, BUT.OFF),
(sv_fflowDirect, BUT.OFF),
(sv_hdMode, BUT.OFF),
(sv_limitsTMP, BUT.OFF),
(sv_minUFRateTreat, BUT.OFF),
(sv_netFluidRemoval, BUT.OFF),
(sv_rotDirectionBP, BUT.OFF),
(sv_rotDirectionUFP, BUT.OFF),
(sv_treatmentWithoutHeparin, BUT.OFF)}
b_NAT1 = {(sv_syringeType, NAT.0),
(sv_actualTMPMaxTMP, NAT.0),
(sv_airVol, NAT.0),
(sv_airVolLimit, NAT.0),
(sv_apTransdPress, NAT.0),
(sv_artBolusVol, NAT.0),
(sv_bicarbonateConductivity, NAT.0),
(sv_bloodFlowForConnectingPatient, NAT.0),
(sv_bloodFlowInEBC, NAT.0),
(sv_conductivity, NAT.0),
(sv_dfFlow, NAT.0),
(sv_dfTemperature, NAT.0),
(sv_fillingBPRate, NAT.0),
(sv_heparinBolusVol, NAT.0),
(sv_heparinProfileRate, NAT.0),
(sv_infSalineVol, NAT.0),
(sv_lastNonZeroBF, NAT.0),
(sv_limitDeltaMinMaxAP, NAT.0),
(sv_lowerPressureLimit, NAT.0),
(sv_lowHigh, NAT.0),
(sv_maxUFRate, NAT.0),
(sv_minUFRate, NAT.0),
(sv_netFluidRemovalRate, NAT.0),
(sv_rinsingBPRate, NAT.0),
(sv_rinsingTime, NAT.0),
(sv_rinsingTime, NAT.0),
(sv_sadSensorFlow, NAT.0),
(sv_safeUpperLimit, NAT.0),
(sv_therapyTime, NAT.0),
(sv_time, NAT.0),
(sv_timerIntervalR10, NAT.0),
(sv_timerIntervalR11, NAT.0),
(sv_timerIntervalR12, NAT.0),
(sv_timerIntervalR13, NAT.0),
(sv_timerIntervalR9, NAT.0),
(sv_ufRateForRinsing, NAT.0),
(sv_ufVol, NAT.0),
(sv_ufVolForRinsing, NAT.0),
(sv_upperPressureLimit, NAT.0),
(sv_volumeInEBC, NAT.0),
(sv_vpTransdPress, NAT.0)}
b_PAC1 = {(sv_hdActivity, PAC.{idle})}
b_PST1 = {(sv_hdMachineState, PST.{initPhase})}
b_TIM1 = {(sv_heparinStopTime, TIM.(0,0))}
MyHDMACHINE = let X = HDMachine(b_PAC1,b_PST1,b_TIM1,b_BUT1,b_NAT1); X within X
assert HDMachine(b_PAC1,b_PST1,b_TIM1,b_BUT1,b_NAT1) :[ deadlock free [FD] ]
assert HDMachine(b_PAC1,b_PST1,b_TIM1,b_BUT1,b_NAT1) :[ livelock free ]
assert HDMachine(b_PAC1,b_PST1,b_TIM1,b_BUT1,b_NAT1) :[ deterministic [F] ]
--------------------------------
-- The universe of values
 datatype UNIVERSE = PAC.Set(ACTIVITY) | PST.Set(STATEPHASE) | TIM.TIME | BUT.BUTTON | NAT.NatValue
--Conversions
valuePAC(PAC.v) = v
valuePST(PST.v) = v
valueTIM(TIM.v) = v
valueBUT(BUT.v) = v
valueNAT(NAT.v) = v

typePAC(x) = U_PAC
typePST(x) = U_PST
typeTIM(x) = U_TIM
typeBUT(x) = U_BUT
typeNAT(x) = U_NAT

tagPAC(x) = PAC
tagPST(x) = PST
tagTIM(x) = TIM
tagBUT(x) = BUT
tagNAT(x) = NAT

-- subtypes of UNIVERSE for PAC
subtype U_PAC = PAC.Set(ACTIVITY)

-- subtypes of UNIVERSE for PST
subtype U_PST = PST.Set(STATEPHASE)

-- subtypes of UNIVERSE for TIM
subtype U_TIM = TIM.TIME

-- subtypes of UNIVERSE for BUT
subtype U_BUT = BUT.BUTTON

-- subtypes of UNIVERSE for NAT
subtype U_NAT = NAT.NatValue

-- definition of NAME for the entire spec
datatype NAME = sv_airVolLimit | sv_airVol | sv_alarm | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_bypassValve | sv_fflowDirect | sv_hdActivity | sv_hdMachineState | sv_hdMode | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_bloodLines | sv_signalLamp | sv_minUFRateTreat | sv_fillingBPRate | sv_rinsingBPRate | sv_ufRateForRinsing | sv_ufVolForRinsing | sv_bloodFlowForConnectingPatient | sv_conductivity | sv_bicarbonateAcetate | sv_bicarbonateConductivity | sv_dfTemperature | sv_rinsingTime | sv_dfFlow | sv_ufVol | sv_therapyTime | sv_minUFRate | sv_maxUFRate | sv_limitDeltaMinMaxAP | sv_actualTMPMaxTMP | sv_limitsTMP | sv_lowHigh | sv_extendedTMPLimitRange | sv_heparinStopTime | sv_heparinBolusVol | sv_heparinProfileRate | sv_treatmentWithoutHeparin | sv_syringeType | sv_time

-- Subtype definition for NAT
subtype NAME_NAT = sv_airVolLimit | sv_airVol | sv_artBolusVol | sv_apTransdPress | sv_bloodFlowInEBC | sv_infSalineVol | sv_lastNonZeroBF | sv_lowerPressureLimit | sv_netFluidRemovalRate | sv_safeUpperLimit | sv_timerIntervalR9 | sv_timerIntervalR10 | sv_timerIntervalR11 | sv_timerIntervalR12 | sv_timerIntervalR13 | sv_upperPressureLimit | sv_volumeInEBC | sv_vpTransdPress | sv_sadSensorFlow | sv_fillingBPRate | sv_rinsingBPRate | sv_ufRateForRinsing | sv_ufVolForRinsing | sv_bloodFlowForConnectingPatient | sv_conductivity | sv_bicarbonateConductivity | sv_dfTemperature | sv_rinsingTime | sv_dfFlow | sv_ufVol | sv_therapyTime | sv_minUFRate | sv_maxUFRate | sv_limitDeltaMinMaxAP | sv_actualTMPMaxTMP | sv_lowHigh | sv_heparinBolusVol | sv_heparinProfileRate | sv_syringeType | sv_time
NAMES_VALUES_NAT = seq({seq({(n,v) | v <- typeNAT(n)}) | n <- NAME_NAT})

-- Subtype definition for BUT
subtype NAME_BUT = sv_alarm | sv_bypassValve | sv_fflowDirect | sv_hdMode | sv_netFluidRemoval | sv_rotDirectionBP | sv_rotDirectionUFP | sv_bloodLines | sv_signalLamp | sv_minUFRateTreat | sv_bicarbonateAcetate | sv_limitsTMP | sv_extendedTMPLimitRange | sv_treatmentWithoutHeparin
NAMES_VALUES_BUT = seq({seq({(n,v) | v <- typeBUT(n)}) | n <- NAME_BUT})

-- Subtype definition for PAC
subtype NAME_PAC = sv_hdActivity
NAMES_VALUES_PAC = seq({seq({(n,v) | v <- typePAC(n)}) | n <- NAME_PAC})

-- Subtype definition for PST
subtype NAME_PST = sv_hdMachineState
NAMES_VALUES_PST = seq({seq({(n,v) | v <- typePST(n)}) | n <- NAME_PST})

-- Subtype definition for TIM
subtype NAME_TIM = sv_heparinStopTime
NAMES_VALUES_TIM = seq({seq({(n,v) | v <- typeTIM(n)}) | n <- NAME_TIM})

-- Bindings definitions for NAT
BINDINGS_NAT = {set(b) | b <- set(head (distCartProd(NAMES_VALUES_NAT)))}

-- Bindings definitions for BUT
BINDINGS_BUT = {set(b) | b <- set(head(distCartProd(NAMES_VALUES_BUT)))}

-- Bindings definitions for PAC
BINDINGS_PAC = {set(b) | b <- set(distCartProd(NAMES_VALUES_PAC))}

-- Bindings definitions for PST
BINDINGS_PST = {set(b) | b <- set(distCartProd(NAMES_VALUES_PST))}

-- Bindings definitions for TIM
BINDINGS_TIM = {set(b) | b <- set(distCartProd(NAMES_VALUES_TIM))}


--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget, mset : NAME.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI = {| mset,mget,terminate |}
channel lget, lset : NAME.UNIVERSE
channel lterminate
MEML = {| lset,lget,lterminate |}

HDMachine(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) =
  let
     Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) =
        ( ( ( ( [] n : dom(b_PAC) @ mget.n.apply(b_PAC,n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_PST) @ mget.n.apply(b_PST,n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_TIM) @ mget.n.apply(b_TIM,n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_BUT) @ mget.n.apply(b_BUT,n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) )
      [] ( [] n : dom(b_NAT) @ mget.n.apply(b_NAT,n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,b_NAT) )))))
      [] ( ( [] n : dom(b_PAC) @ mset.n?nv:typePAC(n) ->
      Memory(over(b_PAC,n,nv),b_PST,b_TIM,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_PST) @ mset.n?nv:typePST(n) ->
      Memory(b_PAC,over(b_PST,n,nv),b_TIM,b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_TIM) @ mset.n?nv:typeTIM(n) ->
      Memory(b_PAC,b_PST,over(b_TIM,n,nv),b_BUT,b_NAT) )
      [] ( ( [] n : dom(b_BUT) @ mset.n?nv:typeBUT(n) ->
      Memory(b_PAC,b_PST,b_TIM,over(b_BUT,n,nv),b_NAT) )
      [] ( [] n : dom(b_NAT) @ mset.n?nv:typeNAT(n) ->
      Memory(b_PAC,b_PST,b_TIM,b_BUT,over(b_NAT,n,nv)) ))))))
      [] terminate -> SKIP)

  within
     let  restrictPAC(bs) = dres(bs,{sv_hdActivity})
         restrictPST(bs) = dres(bs,{sv_hdMachineState})
         restrictTIM(bs) = dres(bs,{sv_heparinStopTime})
         restrictBUT(bs) = dres(bs,{sv_alarm, sv_bypassValve, sv_fflowDirect, sv_hdMode, sv_netFluidRemoval, sv_rotDirectionBP, sv_rotDirectionUFP, sv_bloodLines, sv_signalLamp, sv_minUFRateTreat, sv_bicarbonateAcetate})
         restrictNAT(bs) = dres(bs,{  sv_artBolusVol, sv_apTransdPress, sv_bloodFlowInEBC, sv_infSalineVol, sv_lastNonZeroBF,  sv_netFluidRemovalRate,  sv_volumeInEBC, sv_vpTransdPress, sv_sadSensorFlow,  sv_rinsingBPRate,       sv_rinsingTime, sv_dfFlow, sv_ufVol,  sv_minUFRate, sv_maxUFRate, sv_limitDeltaMinMaxAP, sv_actualTMPMaxTMP, sv_lowHigh, sv_heparinBolusVol, sv_heparinProfileRate, sv_syringeType, sv_time})
     within
         ( ( ( ( ( mset.sv_hdMachineState.(PST.{prepPhase}) ->
      autSelfTest ->
      mset.sv_signalLamp.(BUT.ON) ->
      connectingConcentrate?v_sv_bicarbonateAcetate ->
      mset.sv_bicarbonateAcetate.(BUT.v_sv_bicarbonateAcetate) ->
      ( ( ( ( ( ( ( ( ( atrialTubing -> SKIP
      ||| ventricularTubing -> SKIP );
      salineBagLevel?v_sv_infSalineVol ->
      mset.sv_infSalineVol.(NAT.v_sv_infSalineVol) -> SKIP );
      setBloodLines ->
      mset.sv_bloodLines.(BUT.ON) -> SKIP );
      setRinsingBPSpeed?v_sv_rinsingBPRate ->
      mset.sv_rinsingBPRate.(NAT.v_sv_rinsingBPRate) -> SKIP );
      insertHeparinSyringe ->
      heparinLineIsVented -> SKIP ));
      connectDialyzer ->
      fillArterialDrip ->
      stopBP -> SKIP );
      mset.sv_hdMachineState.(PST.{initPhase}) ->
      mset.sv_hdMachineState.(PST.{connectThePatient}) ->
      mset.sv_signalLamp.(BUT.OFF) ->
      connPatientArterially ->
      connPatientVenously ->
      mset.sv_signalLamp.(BUT.ON) ->
      mset.sv_hdMode.(BUT.ON) ->
      ( ( ( ( ( SKIP
      ||| setMinUFRateTreat?ON -> SKIP )
      ||| SKIP )
      ||| setArtBolusVol?v_sv_artBolusVol ->
      mset.sv_artBolusVol.(NAT.v_sv_artBolusVol) -> SKIP )
      ||| senHDMode.OFF ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP );
      endTreatment ->
      mset.sv_signalLamp.(BUT.OFF) -> SKIP ) );
      mset.sv_hdMachineState.(PST.{endPhase}) -> SKIP )
      ||| ( let X = ( ( ( ( let muR1 = mget.sv_alarm?v_sv_alarm:(typeBUT(sv_alarm)) ->
      mget.sv_hdActivity?v_sv_hdActivity:(typePAC(sv_hdActivity)) ->
      mget.sv_infSalineVol?v_sv_infSalineVol:(typeNAT(sv_infSalineVol)) ->
      ( ( valuePAC(v_sv_hdActivity) == {applicationArterialBolus} and valueNAT(v_sv_infSalineVol) > 0 & ( stopBloodFlow -> SKIP
      ||| mset.sv_alarm.(BUT.ON) ->
      produceAlarmSound -> SKIP ) )
      [] ( not valuePAC(v_sv_hdActivity) == {applicationArterialBolus} and valueNAT(v_sv_infSalineVol) > 400 & muR1 )) within muR1 )
      ||| ( ( let muNoFlowWatchDog = mget.sv_alarm?v_sv_alarm:(typeBUT(sv_alarm)) ->
      mget.sv_lastNonZeroBF?v_sv_lastNonZeroBF:(typeNAT(sv_lastNonZeroBF)) ->
      mget.sv_time?v_sv_time:(typeNAT(sv_time)) ->
      ( ( (valueNAT(v_sv_time) - valueNAT(v_sv_lastNonZeroBF)) > 0 & tick ->
      stopBP ->
      mset.sv_alarm.(BUT.ON) ->
      produceAlarmSound -> SKIP )
      [] ( (valueNAT(v_sv_time) - valueNAT(v_sv_lastNonZeroBF)) <= 1 & tick ->
      muNoFlowWatchDog )) within muNoFlowWatchDog )
      ||| ( let muBloodFlowSample = senBloodFlowInEBC?v_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NAT.v_sv_bloodFlowInEBC) ->
      mget.sv_bloodFlowInEBC?v_sv_bloodFlowInEBC:(typeNAT(sv_bloodFlowInEBC)) ->
      ( (valueNAT(v_sv_bloodFlowInEBC) != 0 &
         mget.sv_time?v_sv_time:(typeNAT(sv_time)) -> mset.sv_lastNonZeroBF.(NAT.valueNAT(v_sv_time)) -> SKIP [] valueNAT(v_sv_bloodFlowInEBC) == 0 &
         SKIP);
      muBloodFlowSample ) within muBloodFlowSample ) ) )
      ||| ( let muR3 = mget.sv_alarm?v_sv_alarm:(typeBUT(sv_alarm)) ->
      mget.sv_bloodFlowInEBC?v_sv_bloodFlowInEBC:(typeNAT(sv_bloodFlowInEBC)) ->
      mget.sv_dfFlow?v_sv_dfFlow:(typeNAT(sv_dfFlow)) ->
      mget.sv_hdMachineState?v_sv_hdMachineState:(typePST(sv_hdMachineState)) ->
      ( ( valuePST(v_sv_hdMachineState) == {initPhase} and valueNAT(v_sv_bloodFlowInEBC) < ((valueNAT(v_sv_dfFlow) * 1) / 1) & mset.sv_alarm.(BUT.ON) ->
      produceAlarmSound -> SKIP )
      [] ( not valuePST(v_sv_hdMachineState) == {initPhase} and valueNAT(v_sv_bloodFlowInEBC) < ((valueNAT(v_sv_dfFlow) * 1) / 1) & muR3 )) within muR3 ) );
      X ) within X ) )
      ||| ( let muSensorReadings = mget.sv_apTransdPress?v_sv_apTransdPress:(typeNAT(sv_apTransdPress)) ->
      mget.sv_bloodFlowInEBC?v_sv_bloodFlowInEBC:(typeNAT(sv_bloodFlowInEBC)) ->
      mget.sv_bypassValve?v_sv_bypassValve:(typeBUT(sv_bypassValve)) ->
      mget.sv_fflowDirect?v_sv_fflowDirect:(typeBUT(sv_fflowDirect)) ->
      mget.sv_hdMode?v_sv_hdMode:(typeBUT(sv_hdMode)) ->
      mget.sv_lastNonZeroBF?v_sv_lastNonZeroBF:(typeNAT(sv_lastNonZeroBF)) ->
      mget.sv_minUFRateTreat?v_sv_minUFRateTreat:(typeBUT(sv_minUFRateTreat)) ->
      mget.sv_netFluidRemoval?v_sv_netFluidRemoval:(typeBUT(sv_netFluidRemoval)) ->
      mget.sv_netFluidRemovalRate?v_sv_netFluidRemovalRate:(typeNAT(sv_netFluidRemovalRate)) ->
      mget.sv_rotDirectionBP?v_sv_rotDirectionBP:(typeBUT(sv_rotDirectionBP)) ->
      mget.sv_rotDirectionUFP?v_sv_rotDirectionUFP:(typeBUT(sv_rotDirectionUFP)) ->
      mget.sv_sadSensorFlow?v_sv_sadSensorFlow:(typeNAT(sv_sadSensorFlow)) ->
      mget.sv_volumeInEBC?v_sv_volumeInEBC:(typeNAT(sv_volumeInEBC)) ->
      mget.sv_vpTransdPress?v_sv_vpTransdPress:(typeNAT(sv_vpTransdPress)) ->
      ( ( ( ( ( ( ( ( ( ( ( ( ( ( senApTransdPress?v_sv_apTransdPress ->
      mset.sv_apTransdPress.(NAT.v_sv_apTransdPress) ->
      muSensorReadings
      [] senBloodFlowInEBC?v_sv_bloodFlowInEBC ->
      mset.sv_bloodFlowInEBC.(NAT.v_sv_bloodFlowInEBC) ->
      muSensorReadings)
      [] senBypassVol?v_sv_bypassValve ->
      mset.sv_bypassValve.(BUT.v_sv_bypassValve) ->
      muSensorReadings)
      [] senFflowDirect?v_sv_fflowDirect ->
      mset.sv_fflowDirect.(BUT.v_sv_fflowDirect) ->
      muSensorReadings)
      [] senInfVol?infVol ->
      muSensorReadings)
      [] senLastNonZeroBF?v_sv_lastNonZeroBF ->
      mset.sv_lastNonZeroBF.(NAT.v_sv_lastNonZeroBF) ->
      muSensorReadings)
      [] senNetFluidRemoval?v_sv_netFluidRemoval ->
      mset.sv_netFluidRemoval.(BUT.v_sv_netFluidRemoval) ->
      muSensorReadings)
      [] senNetFluidRemovalRate?v_sv_netFluidRemovalRate ->
      mset.sv_netFluidRemovalRate.(NAT.v_sv_netFluidRemovalRate) ->
      muSensorReadings)
      [] senRotDirectBP?v_sv_rotDirectionBP ->
      mset.sv_rotDirectionBP.(BUT.v_sv_rotDirectionBP) ->
      muSensorReadings)
      [] senRotDirectUFP?v_sv_rotDirectionUFP ->
      mset.sv_rotDirectionUFP.(BUT.v_sv_rotDirectionUFP) ->
      muSensorReadings)
      [] senVolInEBC?v_sv_volumeInEBC ->
      mset.sv_volumeInEBC.(NAT.v_sv_volumeInEBC) ->
      muSensorReadings)
      [] senSADSensorFlow?v_sv_sadSensorFlow ->
      mset.sv_sadSensorFlow.(NAT.v_sv_sadSensorFlow) ->
      muSensorReadings)
      [] senVpTransdPress?v_sv_vpTransdPress ->
      mset.sv_vpTransdPress.(NAT.v_sv_vpTransdPress) ->
      muSensorReadings)
      [] senHDMode?v_sv_hdMode ->
      mset.sv_hdMode.(BUT.v_sv_hdMode) ->
      muSensorReadings)
      [] setMinUFRateTreat?v_sv_minUFRateTreat ->
      mset.sv_minUFRateTreat.(BUT.v_sv_minUFRateTreat) ->
      muSensorReadings) within muSensorReadings ) );
      terminate -> SKIP )
      [| MEMI |] Memory(restrictPAC(b_PAC),restrictPST(b_PST),restrictTIM(b_TIM),restrictBUT(b_BUT),restrictNAT(b_NAT)))\MEMI )
