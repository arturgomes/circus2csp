include "sequence_aux.csp"
include "function_aux.csp"



datatype NAME = k1 | k2 | k3

-- datatype NAME = k1 | k2 | k3 | k4 | k5 | k6 | k7
--               | k8 | k9 | k10 | k11 | k12 | k13 | k14
--               | ka1 | ka2 | ka3 | ka4 | ka5 | ka6 | ka7
--               | ka8 | ka9 | ka10 | ka11 | ka12 | ka13 | ka14
--               | kb1 | kb2 | kb3 | kb4 | kb5 | kb6 | kb7
--               | kb8 | kb9 | kb10 | kb11 | kb12 | kb13 | kb14

channel a, b : NAME.{0..1}
channel t

NAMES_VALUES = seq({seq({(n,v) | v <- {0..1}}) | n <- NAME})

-- Bindings definitions for NAT
BINDINGS = {set(bi) | bi <- set(distCartProd(NAMES_VALUES))}

M(bi) =
  ([] x:dom(bi) @ a.x.apply(bi,x) -> M(bi))
  []
  ([] x:dom(bi) @ b.x?nv -> M(over(bi,x,nv)))
  [] t -> SKIP

MemoryPACV(n,b_PAC) =
  (a.n.apply(b_PAC,n) -> MemoryPACV(n,b_PAC))
  [] (b.n?nv -> MemoryPACV(n,over(b_PAC,n,nv)) )
  [] t -> SKIP
MemoryPAC(b_PAC) =
  [|{|t|}|] n : dom(b_PAC) @ MemoryPACV(n,b_PAC)

A3RepInterleaving(pr,b_L) =
  ((( pr ; t -> SKIP ) [| MEMI3 |] MemoryPAC(b_L))\MEMI3 )



  bb = {(k1, 0),(k2, 0),(k3, 0)}
-- bb = {(k1, 0),(k2, 0),(k3, 0),(k4, 0),(k5, 0),(k6, 0),(k7, 0),(k8, 0),(k9, 0),(k10, 0),(k11, 0),(k12, 0),(k13, 0),(k14, 0)}


channel hello

--------------------------------
 -- MEMI --
--------------------------------
MEMI3 = {| a,b,t |}


-- Proc examples
MyProc = ( ([] n : dom(bb) @ a.n?v_n -> MyProc)
           []
           ([] n : dom(bb) @ b.n.1 -> MyProc) )

NewProc = ( ([] n : dom(bb) @ a.n?v_n -> hello -> NewProc)
           []
           ([] n : dom(bb) @ b.n.1 -> hello -> NewProc) )

assert MemoryPAC(bb) [F= M(bb)
assert M(bb) [F= MemoryPAC(bb)
assert A3RepInterleaving(NewProc,bb) :[deadlock free]
assert A3RepInterleaving(NewProc,bb) :[deterministic [FD]]
-- assert M(bb) :[deterministic]
-- assert M(bb) :[deterministic]
-- assert MemoryPAC(bb) :[deterministic]
-- assert MemoryPAC(bb) :[deadlock free [F]]
