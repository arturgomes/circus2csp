include "sequence_aux.csp"
include "function_aux.csp"



datatype L10 = j1 | j2 | j3 | j4 | j5 | j6 | j7
                  | j8 | j9 | j10 | j11 | j12

RANGE = {0..2}
--------------------------------
-- The universe of values
datatype UNIVERSE = RAN.RANGE
--Conversions
valueRAN(RAN.v) = v

typeRAN(x) = U_RAN

tagRAN(x) = RAN

-- subtypes of UNIVERSE for RAN
subtype U_RAN = RAN.RANGE

-- definition of NAME for the entire spec

-- Subtype definition for b_*

L10_VALUES_RAN = seq({seq({(n,v) | v <- typeRAN(n)}) | n <- L10})
L10_BINDINGS_RAN = {set(b) | b <- set(distCartProd(L10_VALUES_RAN))}



--------------------------------
 -- mget, mset and terminate --
--------------------------------
channel mget10, mset10 : L10.UNIVERSE
channel terminate

--------------------------------
 -- MEMI --
--------------------------------
MEMI10 = {| mset10,mget10,terminate |}


b_L10 = {(j1, RAN.0),(j2, RAN.0),(j3, RAN.0),(j4, RAN.0),(j5, RAN.0),(j6, RAN.0),
         (j7, RAN.0),(j8, RAN.0),(j9, RAN.0),(j10, RAN.0),(j11, RAN.0),(j12, RAN.0)}

A10(b_L) =
  let
     Memory(b_L) =
       ( ( ( [] n : dom(b_L) @ mget10.n.apply(b_L,n) -> Memory(b_L) )
      [] ( [] n : dom(b_L) @ mset10.n?nv:typeRAN(n) -> Memory(over(b_L,n,nv)) ))
      [] terminate -> SKIP)
  within
    ((( (([] n : dom(b_L) @ mget10.n?v_n:(typeRAN(n)) -> SKIP)[] ([] n : dom(b_L) @ mset10.n.(RAN.1) -> SKIP)); terminate -> SKIP ) [| MEMI10 |] Memory(b_L))\MEMI10 )

A10a(b_L) =
  let
    Memoryj1(x) = ( ( ( mget10.j1.x -> Memoryj1(x) ) [] ( mset10.j1?nv:typeRAN(j1) -> Memoryj1(nv) )) [] terminate -> SKIP)
    Memoryj2(x) = ( ( ( mget10.j2.x -> Memoryj2(x) ) [] ( mset10.j2?nv:typeRAN(j2) -> Memoryj2(nv) )) [] terminate -> SKIP)
    Memoryj3(x) = ( ( ( mget10.j3.x -> Memoryj3(x) ) [] ( mset10.j3?nv:typeRAN(j3) -> Memoryj3(nv) )) [] terminate -> SKIP)
    Memoryj4(x) = ( ( ( mget10.j4.x -> Memoryj4(x) ) [] ( mset10.j4?nv:typeRAN(j4) -> Memoryj4(nv) )) [] terminate -> SKIP)
    Memoryj5(x) = ( ( ( mget10.j5.x -> Memoryj5(x) ) [] ( mset10.j5?nv:typeRAN(j5) -> Memoryj5(nv) )) [] terminate -> SKIP)
    Memoryj6(x) = ( ( ( mget10.j6.x -> Memoryj6(x) ) [] ( mset10.j6?nv:typeRAN(j6) -> Memoryj6(nv) )) [] terminate -> SKIP)
    Memoryj7(x) = ( ( ( mget10.j7.x -> Memoryj7(x) ) [] ( mset10.j7?nv:typeRAN(j7) -> Memoryj7(nv) )) [] terminate -> SKIP)
    Memoryj8(x) = ( ( ( mget10.j8.x -> Memoryj8(x) ) [] ( mset10.j8?nv:typeRAN(j8) -> Memoryj8(nv) )) [] terminate -> SKIP)
    Memoryj9(x) = ( ( ( mget10.j9.x -> Memoryj9(x) ) [] ( mset10.j9?nv:typeRAN(j9) -> Memoryj9(nv) )) [] terminate -> SKIP)
    Memoryj10(x) = ( ( ( mget10.j10.x -> Memoryj10(x) ) [] ( mset10.j10?nv:typeRAN(j10) -> Memoryj10(nv) )) [] terminate -> SKIP)
    Memoryj11(x) = ( ( ( mget10.j11.x -> Memoryj11(x) ) [] ( mset10.j11?nv:typeRAN(j11) -> Memoryj11(nv) )) [] terminate -> SKIP)
    Memoryj12(x) = ( ( ( mget10.j12.x -> Memoryj12(x) ) [] ( mset10.j12?nv:typeRAN(j12) -> Memoryj12(nv) )) [] terminate -> SKIP)
    Memory = (Memoryj1(RAN.0) ||| Memoryj2(RAN.0) ||| Memoryj3(RAN.0) ||| Memoryj4(RAN.0) ||| Memoryj5(RAN.0) ||| Memoryj6(RAN.0) |||
              Memoryj7(RAN.0) ||| Memoryj8(RAN.0) ||| Memoryj9(RAN.0) ||| Memoryj10(RAN.0) ||| Memoryj11(RAN.0) ||| Memoryj12(RAN.0)  )
  within
    ((( (([] n : dom(b_L) @ mget10.n?v_n:(typeRAN(n)) -> SKIP)[] ([] n : dom(b_L) @ mset10.n.(RAN.1) -> SKIP)); terminate -> SKIP ) [| MEMI10 |] Memory)\MEMI10 )


A10b(b_L) =
  let
    Memoryj1(x) = ( ( ( mget10.j1.x -> Memoryj1(x) ) [] ( mset10.j1?nv:typeRAN(j1) -> Memoryj1(nv) )) [] terminate -> SKIP)
    Memoryj2(x) = ( ( ( mget10.j2.x -> Memoryj2(x) ) [] ( mset10.j2?nv:typeRAN(j2) -> Memoryj2(nv) )) [] terminate -> SKIP)
    Memoryj3(x) = ( ( ( mget10.j3.x -> Memoryj3(x) ) [] ( mset10.j3?nv:typeRAN(j3) -> Memoryj3(nv) )) [] terminate -> SKIP)
    Memoryj4(x) = ( ( ( mget10.j4.x -> Memoryj4(x) ) [] ( mset10.j4?nv:typeRAN(j4) -> Memoryj4(nv) )) [] terminate -> SKIP)
    Memoryj5(x) = ( ( ( mget10.j5.x -> Memoryj5(x) ) [] ( mset10.j5?nv:typeRAN(j5) -> Memoryj5(nv) )) [] terminate -> SKIP)
    Memoryj6(x) = ( ( ( mget10.j6.x -> Memoryj6(x) ) [] ( mset10.j6?nv:typeRAN(j6) -> Memoryj6(nv) )) [] terminate -> SKIP)
    Memoryj7(x) = ( ( ( mget10.j7.x -> Memoryj7(x) ) [] ( mset10.j7?nv:typeRAN(j7) -> Memoryj7(nv) )) [] terminate -> SKIP)
    Memoryj8(x) = ( ( ( mget10.j8.x -> Memoryj8(x) ) [] ( mset10.j8?nv:typeRAN(j8) -> Memoryj8(nv) )) [] terminate -> SKIP)
    Memoryj9(x) = ( ( ( mget10.j9.x -> Memoryj9(x) ) [] ( mset10.j9?nv:typeRAN(j9) -> Memoryj9(nv) )) [] terminate -> SKIP)
    Memoryj10(x) = ( ( ( mget10.j10.x -> Memoryj10(x) ) [] ( mset10.j10?nv:typeRAN(j10) -> Memoryj10(nv) )) [] terminate -> SKIP)
    Memoryj11(x) = ( ( ( mget10.j11.x -> Memoryj11(x) ) [] ( mset10.j11?nv:typeRAN(j11) -> Memoryj11(nv) )) [] terminate -> SKIP)
    Memoryj12(x) = ( ( ( mget10.j12.x -> Memoryj12(x) ) [] ( mset10.j12?nv:typeRAN(j12) -> Memoryj12(nv) )) [] terminate -> SKIP)
    Memory = (Memoryj1(RAN.0) ||| Memoryj2(RAN.0) ||| Memoryj3(RAN.0) ||| Memoryj4(RAN.0) ||| Memoryj5(RAN.0) ||| Memoryj6(RAN.0) |||
              Memoryj7(RAN.0) ||| Memoryj8(RAN.0) ||| Memoryj9(RAN.0) ||| Memoryj10(RAN.0) ||| Memoryj11(RAN.0) ||| Memoryj12(RAN.0)  )
  within
    ((( (([] n : dom(b_L) @ mget10.n?v_n:(typeRAN(n)) -> SKIP)[] ([] n : dom(b_L) @ mset10.n.(RAN.1) -> SKIP)); terminate -> SKIP ) [| MEMI10 |] Memory)\MEMI10 )

A10c(b_L) =
  let
     MemoryA(x,v) =
       ( ( (  mget10.x.v -> MemoryA(x,v) )
      [] ( mset10.x?nv:typeRAN(x) -> MemoryA(x,nv) ))
      [] terminate -> SKIP)
    Memory(b) = ||| n: dom(b) @ MemoryA(n,RAN.0)
  within
    ((( (([] n : dom(b_L) @ mget10.n?v_n:(typeRAN(n)) -> SKIP)[] ([] n : dom(b_L) @ mset10.n.(RAN.1) -> SKIP)); terminate -> SKIP ) [| MEMI10 |] Memory(b_L))\MEMI10 )

A10d(b_L) =
  let
     MemoryA(x,v) =
       ( ( (  mget10.x.v -> MemoryA(x,v) )
      [] ( mset10.x?nv:typeRAN(x) -> MemoryA(x,nv) ))
      [] terminate -> SKIP)
    Memory(b) = [] n: dom(b) @ MemoryA(n,RAN.0)
  within
    ((( (([] n : dom(b_L) @ mget10.n?v_n:(typeRAN(n)) -> SKIP)[] ([] n : dom(b_L) @ mset10.n.(RAN.1) -> SKIP)); terminate -> SKIP ) [| MEMI10 |] Memory(b_L))\MEMI10 )


assert A10a(b_L10) [FD= A10b(b_L10)
assert A10a(b_L10) [FD= A10c(b_L10)
assert A10a(b_L10) [FD= A10d(b_L10)
assert A10b(b_L10) [FD= A10a(b_L10)
assert A10b(b_L10) [FD= A10c(b_L10)
assert A10b(b_L10) [FD= A10d(b_L10)
assert A10c(b_L10) [FD= A10a(b_L10)
assert A10c(b_L10) [FD= A10b(b_L10)
assert A10c(b_L10) [FD= A10d(b_L10)
assert A10d(b_L10) [FD= A10a(b_L10)
assert A10d(b_L10) [FD= A10b(b_L10)
assert A10d(b_L10) [FD= A10c(b_L10)
assert A10a(b_L10) :[deterministic [FD]]
assert A10b(b_L10) :[deterministic [FD]]
assert A10c(b_L10) :[deterministic [FD]]
assert A10d(b_L10) :[deterministic [FD]]
assert A10a(b_L10) :[deadlock free]
assert A10b(b_L10) :[deadlock free]
assert A10c(b_L10) :[deadlock free]
assert A10d(b_L10) :[deadlock free]
