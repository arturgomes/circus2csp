-- Here we find what haven't yet been imported to Isabelle through Haskabelle


omega_CAction :: [(ZName, ZVar, ZExpr)] -> CAction -> CAction
omega_CAction lst (CSPCommAction (ChanComm c [ChanInpPred x p]) a)
  = case not (elem x (getWrtV(a))) of
    True -> make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPCommAction
             (ChanComm c [ChanInpPred x p])
                 (omega_prime_CAction lst a)))
    _  -> (CSPCommAction (ChanComm c [ChanInpPred x p]) a)
  where lsx = free_var_ZPred(p)


omega_CAction lst (CSPExtChoice ca cb)
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPExtChoice (omega_prime_CAction lst ca) (omega_prime_CAction lst cb)))
   where
    lsx = nub $ (free_var_CAction (CSPExtChoice ca cb)) `intersect` (filter_state_comp lst)
omega_CAction lst (CSPGuard g a) 
  = make_get_com lst lxs (rename_vars_CAction (map fst lxs) (CSPGuard (rename_ZPred (map fst lxs) g) (omega_prime_CAction lst a))) 
    where lxs = nub $ free_var_ZPred(g) `intersect` (filter_state_comp lst)


omega_CAction lst (CSPNSParal ns1 cs ns2 a1 a2)
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPHide
   (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
     (CSPNSParal NSExpEmpty cs NSExpEmpty
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a1 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("LEFT",[])]))
       (CSExpr "MEMi"))
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a2 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("RIGHT",[])]))
       (CSExpr "MEMi")))
      (CActionName "Merge"))
      (CChanSet ["mleft","mright"])))
   where
    lsx = (free_var_CAction a1) `union` (free_var_CAction a2)


omega_prime_CAction :: [(ZName, ZVar, ZExpr)] -> CAction -> CAction


omega_prime_CAction lst (CSPExtChoice ca cb)
  = make_get_com lst lsx (CSPExtChoice (omega_prime_CAction lst ca) (omega_prime_CAction lst cb))
   where
    lsx = nub $ (free_var_CAction (CSPExtChoice ca cb)) `intersect` (filter_state_comp lst)
omega_prime_CAction lst (CSPNSParal ns1 cs ns2 a1 a2)
  = make_get_com lst lsx (CSPHide
   (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
     (CSPNSParal NSExpEmpty cs NSExpEmpty
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a1 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("LEFT",[])]))
       (CSExpr "MEMi"))
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a2 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("RIGHT",[])]))
       (CSExpr "MEMi")))
      (CActionName "Merge"))
      (CChanSet ["mleft","mright"]))
   where
    lsx = (free_var_CAction a1) `union` (free_var_CAction a2)

omega_prime_CAction lst x
  = error ("Not defined for Omega'"++ show x)



make_maps_to :: [ZVar] -> [ZExpr]
make_maps_to [(x,[])]
  = [ZCall (ZVar ("\\mapsto",[]))
    (ZTuple [ZVar (x,[]),ZVar ("v"++x,[])])]
make_maps_to ((x,[]):xs)
  = [ZCall (ZVar ("\\mapsto",[]))
    (ZTuple [ZVar (x,[]),ZVar ("v"++x,[])])]++(make_maps_to xs)

