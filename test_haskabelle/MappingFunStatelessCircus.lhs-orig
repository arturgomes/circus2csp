%!TEX root = MAIN.tex

\section{Mapping Functions - Stateless Circus}

File: MappingFunStatelessCircus.lhs
\ignore{
\begin{code}
module MappingFunStatelessCircus
( 
  omega_CAction,
  omega_Circus,
  omega_CProc,
  omega_ParAction,
  omega_ProcDecl,
  omega_ProcessDef,
  def_mem_st_Circus_aux
)
where
import AST
import DefSets
import Data.List
import FormatterToCSP
import CRL

showexpr = zexpr_string (pinfo_extz 80)



def_delta_mapping :: [(ZName, ZVar, ZExpr)] -> [ZExpr]
def_delta_mapping [(n,(v,[]),t)] 
  = [ZCall (ZVar ("\\mapsto",[])) (ZTuple [ZVar ((join_name n v),[]),t])]
def_delta_mapping ((n,(v,[]),t):xs) 
  = [ZCall (ZVar ("\\mapsto",[])) (ZTuple [ZVar ((join_name n v),[]),t])] 
    ++ (def_delta_mapping xs)
def_delta_mapping [] = []



def_delta_name :: [(ZName, ZVar, ZExpr)] -> [ZBranch]
def_delta_name [(n,(v,[]),t)] 
  = [ZBranch0 ((join_name n v),[])]
def_delta_name ((n,(v,[]),t):xs) 
  = [ZBranch0 ((join_name n v),[])] 
    ++ (def_delta_name xs)
def_delta_name [] = []



get_pre_Circ_proc :: [ZPara] -> [ZPara]
get_pre_Circ_proc ((Process cp):xs) 
  = (get_pre_Circ_proc xs)
get_pre_Circ_proc (x:xs) 
  = x:(get_pre_Circ_proc xs)
get_pre_Circ_proc []
  = []



omega_Circus :: [ZPara] -> [ZPara]
omega_Circus spec1
  = [ZGivenSetDecl ("UNIVERSE",[]),
      ZFreeTypeDef ("NAME",[]) (def_delta_name (def_mem_st_Circus_aux spec1)),
      ZAbbreviation ("BINDINGS",[]) (ZCall (ZVar ("\\fun",[])) (ZTuple [ZVar ("NAME",[]),ZVar ("UNIVERSE",[])])), 
      ZAbbreviation ("\\delta",[]) (ZSetDisplay (def_delta_mapping (def_mem_st_Circus_aux spec1))),
      CircChannel [CChanDecl "mget" (ZCross [ZVar ("NAME",[]),ZVar ("UNIVERSE",[])]), CChanDecl "mset" (ZCross [ZVar ("NAME",[]),ZVar ("UNIVERSE",[])])],
      CircChannel [CChan "terminate"],
      CircChanSet "MEMi" (CChanSet ["mset","mget","terminate"])]
    ++ (omega_Circus_aux spec spec)
    where 
      spec = (map (rename_vars_ZPara1 (def_mem_st_Circus_aux spec1)) spec1)
    -- HERE YOU HAVE TO PUT A AUXILIARY FUNCTION 
    -- THAT WILL CHANGE THE NAE TO PROC_VAR



def_mem_st_Circus_aux :: [ZPara] -> [(ZName, ZVar, ZExpr)]
def_mem_st_Circus_aux []
  = []
def_mem_st_Circus_aux [x]
  = def_mem_st_CircParagraphs x
def_mem_st_Circus_aux (x:xs)
  = (def_mem_st_CircParagraphs x)++(def_mem_st_Circus_aux xs)



def_mem_st_CircParagraphs :: ZPara -> [(ZName, ZVar, ZExpr)]
def_mem_st_CircParagraphs (Process cp)
  = (def_mem_st_ProcDecl cp)
def_mem_st_CircParagraphs x
  = []



def_mem_st_ProcDecl :: ProcDecl -> [(ZName, ZVar, ZExpr)]
def_mem_st_ProcDecl (CGenProcess zn (x:xs) pd)
  = (def_mem_st_ProcessDef zn pd)
def_mem_st_ProcDecl (CProcess zn pd)
  = (def_mem_st_ProcessDef zn pd)



def_mem_st_ProcessDef :: ZName -> ProcessDef -> [(ZName, ZVar, ZExpr)]
def_mem_st_ProcessDef name (ProcDefSpot xl pd)
  = (def_mem_st_ProcessDef name pd)
def_mem_st_ProcessDef name (ProcDefIndex xl pd)
  = (def_mem_st_ProcessDef name pd)
def_mem_st_ProcessDef name (ProcDef cp)
  = (def_mem_st_CProc name cp)



def_mem_st_CProc :: ZName -> CProc -> [(ZName, ZVar, ZExpr)]
def_mem_st_CProc name (ProcMain zp (x:xs) ca)
  = (get_state_var name zp) -- ++(get_local_var ca)
def_mem_st_CProc  name x
  = []



get_state_var :: ZName -> ZPara -> [(ZName, ZVar, ZExpr)]
get_state_var name (ZSchemaDef n (ZSchema (x:xs)))
  = (get_state_var_aux name x)
    ++
    (get_state_var name (ZSchemaDef n (ZSchema xs)))
get_state_var _ _ = []




get_state_var_aux name (Choose x y) = [(name, x, y)]
get_state_var_aux _ _ = []



omega_Circus_aux :: [ZPara] -> [ZPara] -> [ZPara]

omega_Circus_aux spec [(Process cp)]
  = [(Process (omega_ProcDecl spec ncp))]
  where
    ncp = (rename_vars_ProcDecl1 (def_mem_st_Circus_aux spec) cp)
omega_Circus_aux spec [x] = [x]
omega_Circus_aux spec ((Process cp):xs)
  = [(Process (omega_ProcDecl spec ncp))]++(omega_Circus_aux spec xs)
  where
    ncp = (rename_vars_ProcDecl1 (def_mem_st_Circus_aux spec) cp)
omega_Circus_aux spec (x:xs)
  = [x]++(omega_Circus_aux spec xs)



omega_ProcDecl :: [ZPara] -> ProcDecl -> ProcDecl
omega_ProcDecl spec (CGenProcess zn (x:xs) pd)
  = (CGenProcess zn (x:xs) (omega_ProcessDef spec pd))
    where
      npd = (rename_vars_ProcessDef1 (def_mem_st_Circus_aux spec) pd)
omega_ProcDecl spec (CProcess zn pd)
  = (CProcess zn (omega_ProcessDef spec pd))
    where
      npd = (rename_vars_ProcessDef1 (def_mem_st_Circus_aux spec) pd)



omega_ProcessDef :: [ZPara] -> ProcessDef -> ProcessDef
omega_ProcessDef spec (ProcDefSpot xl pd)
  = (ProcDefSpot xl (omega_ProcessDef spec pd))
omega_ProcessDef spec (ProcDefIndex xl pd)
  = (ProcDefIndex xl (omega_ProcessDef spec pd))
omega_ProcessDef spec (ProcDef cp)
  = (ProcDef (omega_CProc spec cp))



omega_CProc :: [ZPara] -> CProc -> CProc
omega_CProc spec (CExtChoice a b)
  = (CExtChoice (omega_CProc spec a) (omega_CProc spec b))
omega_CProc spec (CHide a cs)
  = (CHide (omega_CProc spec a) cs)
omega_CProc spec (CIntChoice a b)
  = (CIntChoice (omega_CProc spec a) (omega_CProc spec b))
omega_CProc spec (CInterleave a b)
  = (CInterleave (omega_CProc spec a) (omega_CProc spec b))
omega_CProc spec (CircusProc zn)
  = (CircusProc zn)
omega_CProc spec (CParParal cs a b)
  = (CParParal cs (omega_CProc spec a) (omega_CProc spec b))
omega_CProc spec (CRepExtChProc [(Choose x s)] a)
  = (CRepExtChProc [(Choose x s)] (omega_CProc spec a))
omega_CProc spec (CRepIntChProc [(Choose x s)] a)
  = (CRepIntChProc [(Choose x s)] (omega_CProc spec a))
omega_CProc spec (CRepInterlProc [(Choose x s)] a)
  = (CRepInterlProc [(Choose x s)] (omega_CProc spec a))
omega_CProc spec (CRepParalProc cse [(Choose x s)] a)
  = (CRepParalProc cse [(Choose x s)] (omega_CProc spec a))
omega_CProc spec (CRepSeqProc [(Choose x s)] a)
  = (CRepSeqProc [(Choose x s)] (omega_CProc spec a))
omega_CProc spec (CSeq a b)
  = (CSeq (omega_CProc spec a) (omega_CProc spec b))
omega_CProc spec (ProcStalessMain xls ca)
  = (ProcStalessMain (concat (map (omega_PPar nstate) xls)) (mk_main_action_bind nstate (omega_CAction nstate ca)))
    where 
      nstate = (def_mem_st_Circus_aux spec)
omega_CProc spec (CGenProc zn (x:xs))
  = (CGenProc zn (x:xs))
omega_CProc spec (CParamProc zn (x:xs))
  = (CParamProc zn (x:xs))
omega_CProc spec (CSimpIndexProc zn (x:xs))
  = (CSimpIndexProc zn (x:xs))
omega_CProc spec (ProcMain zp (x:xs) ca)
  = (ProcStalessMain 
    [make_memory_proc] 
    (get_main_action 
      (concat (map (omega_PPar nstate) (x:xs)))
      (mk_main_action_bind nstate (omega_CAction nstate ca))))
    where 
      nstate = (def_mem_st_Circus_aux spec)
omega_CProc spec x
  = x



mk_main_action_bind :: [(ZName, ZVar, ZExpr)] -> CAction -> CAction
mk_main_action_bind lst ca
  = (CActionCommand (CValDecl [Choose ("b",[]) (ZSetComp [Choose ("x",[]) (ZVar ("BINDING",[])),Check (mk_inv lst) ] Nothing)] ca))



mk_inv :: [(ZName, ZVar, ZExpr)] -> ZPred
mk_inv [(a,b,ZVar c)] 
  = (ZMember (ZVar b) (ZVar c))
mk_inv ((a,b,ZVar c):xs) 
  = (ZAnd (mk_inv xs) (ZMember (ZVar b) (ZVar c)) ) 




omega_PPar :: [(ZName, ZVar, ZExpr)] -> PPar -> [PPar]
omega_PPar lst (ProcZPara zp) = [(ProcZPara zp)]
omega_PPar lst (CParAction n pa) = [(CParAction n (omega_ParAction lst pa))]
omega_PPar lst (CNameSet n ns) = [(CNameSet n ns)]



omega_ParAction :: [(ZName, ZVar, ZExpr)] -> ParAction -> ParAction
omega_ParAction lst (CircusAction ca)
  = (CircusAction (omega_CAction lst ca))
omega_ParAction lst (ParamActionDecl xl pa)
  = (ParamActionDecl xl (omega_ParAction lst pa))



omega_CAction :: [(ZName, ZVar, ZExpr)] -> CAction -> CAction
omega_CAction lst CSPSkip = CSPSkip
omega_CAction lst CSPStop = CSPStop
omega_CAction lst CSPChaos = CSPChaos



omega_CAction lst (CSPCommAction (ChanComm c []) a)
  = (CSPCommAction (ChanComm c []) (omega_CAction lst a))



omega_CAction lst (CSPCommAction (ChanComm c ((ChanDotExp e):xs)) a)
  = make_get_com lst lxs (rename_vars_CAction (map fst lxs) (CSPCommAction (ChanComm c ((ChanDotExp e):xs)) (omega_prime_CAction lst a)))
  where lxs = (get_chan_param ((ChanDotExp e):xs)) `intersect` (filter_state_comp lst)



omega_CAction lst (CSPCommAction (ChanComm c ((ChanOutExp e):xs)) a)
  = omega_CAction lst (CSPCommAction (ChanComm c ((ChanDotExp e):xs)) a)



omega_CAction lst (CSPGuard g a)
  = make_get_com lst lxs (rename_vars_CAction (map fst lxs) (CSPGuard (rename_ZPred (map fst lxs) g) (omega_prime_CAction lst a)))
  where lxs = nub $ free_var_ZPred(g) `intersect` (filter_state_comp lst)



omega_CAction lst (CSPCommAction (ChanComm c [ChanInpPred x p]) a)
  = case not (elem x (getWrtV(a))) of
    True -> make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPCommAction
             (ChanComm c [ChanInpPred x p])
                 (omega_prime_CAction lst a)))
    _  -> (CSPCommAction (ChanComm c [ChanInpPred x p]) a)
  where lsx = free_var_ZPred(p)



omega_CAction lst (CSPSeq ca cb)
  = (CSPSeq (omega_CAction lst ca) (omega_CAction lst cb))



omega_CAction lst (CSPIntChoice ca cb)
  = (CSPIntChoice (omega_CAction lst ca) (omega_CAction lst cb))



omega_CAction lst (CSPExtChoice ca cb)
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPExtChoice (omega_prime_CAction lst ca) (omega_prime_CAction lst cb)))
   where
    lsx = nub $ (free_var_CAction (CSPExtChoice ca cb)) `intersect` (filter_state_comp lst)



omega_CAction lst (CSPNSParal ns1 cs ns2 a1 a2)
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CSPHide
   (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
     (CSPNSParal NSExpEmpty cs NSExpEmpty
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a1 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("LEFT",[])]))
       (CSExpr "MEMi"))
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a2 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("RIGHT",[])]))
       (CSExpr "MEMi")))
      (CActionName "Merge"))
      (CChanSet ["mleft","mright"])))
   where
    lsx = (free_var_CAction a1) `union` (free_var_CAction a2)



omega_CAction lst (CSPRepSeq [Choose (x,[]) (ZSeqDisplay xs)] (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> omega_CAction lst (rep_CSPRepSeq lst act xs)
    _  -> (CSPRepSeq [Choose (x,[]) (ZSeqDisplay xs)]
          (omega_CAction lst (CSPParAction act [ZVar (x1,[])])))
omega_CAction lst (CSPRepSeq [Choose (x,[]) v] act)
  = (CSPRepSeq [Choose (x,[]) v] (omega_CAction lst act))



omega_CAction lst (CSPRepExtChoice [Choose (x,[]) (ZSeqDisplay xs)] (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> rep_CSPRepExtChoice lst act xs
    _  -> (CSPRepExtChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
omega_CAction lst (CSPRepExtChoice [Choose (x,[]) v]
          act)
  = (CSPRepExtChoice [Choose (x,[]) v] (omega_CAction lst act))



omega_CAction lst (CSPRepIntChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> rep_CSPRepIntChoice lst act xs
    _  -> (CSPRepIntChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
omega_CAction lst (CSPRepIntChoice [Choose (x,[]) v] act)
  = (CSPRepIntChoice [Choose (x,[]) v] (omega_CAction lst act))



omega_CAction lst (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (CSPParAction a [ZVar (x2,[])]))
  = case (x == x1) && (x == x2) of
    True -> rep_CSPRepParalNS lst a cs ns x lsx
    _  -> (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_CAction lst (CSPParAction a [ZVar (x2,[])])))
omega_CAction lst (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])]) act)
  = (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_CAction lst act))



% omega_CAction lst (CActionCommand (CValDecl xs a))
%   = (CActionCommand (CValDecl xs (omega_CAction lst a)))
% 


omega_CAction lst (CActionCommand (CAssign varls valls))
= make_get_com lst varls (rename_vars_CAction (map fst (filter_state_comp lst)) (make_set_com lst varls valls CSPSkip))



omega_CAction lst (CActionCommand (CIf (CircGAction g a)))
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CActionCommand
             (CIf (CircGAction g (omega_prime_CAction lst a)))))
  where
   lsx = free_var_ZPred g




omega_CAction lst (CActionCommand (CIf (CircThenElse gl glx)))
  = make_get_com lst lsx (rename_vars_CAction (map fst lsx) (CActionCommand (CIf (mk_guard_pair lst guard_pair))))
  where
   guard_pair = get_guard_pair (CircThenElse gl glx)
   lsx = nub $ concat $ map free_var_ZPred (map fst guard_pair)



omega_CAction lst (CSPHide a cs) = (CSPHide (omega_CAction lst a) cs)



omega_CAction lst (CSPRecursion x c) = (CSPRecursion x (omega_CAction lst c))



omega_CAction lst (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (CSPParAction a [ZVar (x2,[])]))
  = case (x == x1) && (x == x2) of
    True -> rep_CSPRepInterlNS lst a ns x lsx
    _  ->  (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_CAction lst (CSPParAction a [ZVar (x2,[])])))
omega_CAction lst (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          act)
  = (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_CAction lst act))



omega_CAction lst (CActionCommand (CommandBrace g))
  = omega_CAction lst (CActionCommand (CPrefix g (ZTrue {reason = []})))



omega_CAction lst (CActionCommand (CommandBracket g))
  = omega_CAction lst (CActionCommand (CPrefix1 g))



omega_CAction lst (CSPRenAction a (CRenameAssign left right))
  = (CSPRenAction a (CRename right left))
omega_CAction lst x = x



omega_prime_CAction :: [(ZName, ZVar, ZExpr)] -> CAction -> CAction
omega_prime_CAction lst CSPSkip = CSPSkip
omega_prime_CAction lst CSPStop = CSPStop
omega_prime_CAction lst CSPChaos = CSPChaos



omega_prime_CAction lst (CSPCommAction (ChanComm c []) a)
  = (CSPCommAction (ChanComm c []) (omega_prime_CAction lst a))



omega_prime_CAction lst (CSPCommAction (ChanComm c x) a)
  = (CSPCommAction (ChanComm c x) (omega_prime_CAction lst a))



omega_prime_CAction lst (CSPGuard g a)
  = (CSPGuard g (omega_prime_CAction lst a))



omega_prime_CAction lst (CSPSeq ca cb)
  = (CSPSeq (omega_prime_CAction lst ca) (omega_prime_CAction lst cb))



omega_prime_CAction lst (CSPIntChoice ca cb)
  = (CSPIntChoice (omega_prime_CAction lst ca) (omega_prime_CAction lst cb))



omega_prime_CAction lst (CSPExtChoice ca cb)
  = make_get_com lst lsx (CSPExtChoice (omega_prime_CAction lst ca) (omega_prime_CAction lst cb))
   where
    lsx = nub $ (free_var_CAction (CSPExtChoice ca cb)) `intersect` (filter_state_comp lst)



omega_prime_CAction lst (CSPNSParal ns1 cs ns2 a1 a2)
  = make_get_com lst lsx (CSPHide
   (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
     (CSPNSParal NSExpEmpty cs NSExpEmpty
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a1 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("LEFT",[])]))
       (CSExpr "MEMi"))
      (CSPHide
       (CSPNSParal NSExpEmpty (CSExpr "MEMi") NSExpEmpty
        (CSPSeq a2 (CSPCommAction (ChanComm "terminate" []) CSPSkip))
        (CSPParAction "MemoryMerge"
         [ZSetDisplay [],
                ZVar ("RIGHT",[])]))
       (CSExpr "MEMi")))
      (CActionName "Merge"))
      (CChanSet ["mleft","mright"]))
   where
    lsx = (free_var_CAction a1) `union` (free_var_CAction a2)



omega_prime_CAction lst (CSPRepSeq [Choose (x,[]) (ZSeqDisplay xs)] (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> omega_prime_CAction lst (rep_CSPRepSeq lst act xs)
    _  -> (CSPRepSeq [Choose (x,[]) (ZSeqDisplay xs)]
          (omega_prime_CAction lst (CSPParAction act [ZVar (x1,[])])))
omega_prime_CAction lst (CSPRepSeq [Choose (x,[]) v] act)
  = (CSPRepSeq [Choose (x,[]) v] (omega_prime_CAction lst act))



omega_prime_CAction lst (CSPRepExtChoice [Choose (x,[]) (ZSeqDisplay xs)] (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> rep_CSPRepExtChoice lst act xs
    _  -> (CSPRepExtChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
omega_prime_CAction lst (CSPRepExtChoice [Choose (x,[]) v]
          act)
  = (CSPRepExtChoice [Choose (x,[]) v] (omega_prime_CAction lst act))



omega_prime_CAction lst (CSPRepIntChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
  = case x == x1 of
    True -> rep_CSPRepIntChoice lst act xs
    _  -> (CSPRepIntChoice [Choose (x,[]) (ZSeqDisplay xs)]
          (CSPParAction act [ZVar (x1,[])]))
omega_prime_CAction lst (CSPRepIntChoice [Choose (x,[]) v] act)
  = (CSPRepIntChoice [Choose (x,[]) v] (omega_prime_CAction lst act))



omega_prime_CAction lst (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (CSPParAction a [ZVar (x2,[])]))
  = case (x == x1) && (x == x2) of
    True -> rep_CSPRepParalNS lst a cs ns x lsx
    _  -> (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_prime_CAction lst (CSPParAction a [ZVar (x2,[])])))
omega_prime_CAction lst (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])]) act)
  = (CSPRepParalNS (CSExpr cs) [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_prime_CAction lst act))



omega_prime_CAction lst (CActionCommand (CAssign varls valls))
  = (make_set_com lst varls valls CSPSkip)



omega_prime_CAction lst (CActionCommand (CIf (CircGAction g a)))
  = (CActionCommand (CIf (CircGAction g (omega_prime_CAction lst a))))




omega_prime_CAction lst (CActionCommand (CIf (CircThenElse gl glx)))
  = (CActionCommand (CIf (mk_guard_pair lst guard_pair)))
  where
   guard_pair = get_guard_pair (CircThenElse gl glx)



omega_prime_CAction lst (CSPHide a cs) = (CSPHide (omega_prime_CAction lst a) cs)



omega_prime_CAction lst (CSPRecursion x c) = (CSPRecursion x (omega_prime_CAction lst c))



omega_prime_CAction lst (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (CSPParAction a [ZVar (x2,[])]))
  = case (x == x1) && (x == x2) of
    True -> rep_CSPRepInterlNS lst a ns x lsx
    _  ->  (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_prime_CAction lst (CSPParAction a [ZVar (x2,[])])))
omega_prime_CAction lst (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          act)
  = (CSPRepInterlNS [Choose (x,[]) (ZSetDisplay lsx)]
          (NSExprParam ns [ZVar (x1,[])])
          (omega_prime_CAction lst act))



omega_prime_CAction lst (CActionCommand (CommandBrace g))
  = omega_prime_CAction lst (CActionCommand (CPrefix g (ZTrue {reason = []})))



omega_prime_CAction lst (CActionCommand (CommandBracket g))
  = omega_prime_CAction lst (CActionCommand (CPrefix1 g))



omega_prime_CAction lst (CSPRenAction a (CRenameAssign left right))
  = (CSPRenAction a (CRename right left))



omega_prime_CAction lst (CActionName n)
  = (CActionName n)



omega_prime_CAction lst x 
  = error ("Not defined for Omega'"++ show x)



rep_CSPRepSeq :: [(ZName, ZVar, ZExpr)] -> ZName -> [ZExpr] -> CAction
rep_CSPRepSeq lst a [x]
  = omega_CAction lst (CSPParAction a [x])
rep_CSPRepSeq lst a (x:xs)
  = CSPSeq (omega_CAction lst (CSPParAction a [x])) (rep_CSPRepSeq lst a xs)



rep_CSPRepIntChoice :: [(ZName, ZVar, ZExpr)] -> ZName -> [ZExpr] -> CAction
rep_CSPRepIntChoice lst a [x]
  = omega_CAction lst (CSPParAction a [x])
rep_CSPRepIntChoice lst a (x:xs)
  = CSPIntChoice (omega_CAction lst (CSPParAction a [x])) (rep_CSPRepIntChoice lst a xs)



rep_CSPRepExtChoice :: [(ZName, ZVar, ZExpr)] -> ZName -> [ZExpr] -> CAction
rep_CSPRepExtChoice lst a [x]
  =  omega_CAction lst (CSPParAction a [x])
rep_CSPRepExtChoice lst a (x:xs)
  = CSPExtChoice ( omega_CAction lst (CSPParAction a [x])) (rep_CSPRepExtChoice lst a xs)



rep_CSPRepParalNS :: [(ZName, ZVar, ZExpr)] -> ZName -> ZName -> ZName -> String -> [ZExpr] -> CAction
rep_CSPRepParalNS lst a _ _ _ [x]
  =  omega_CAction lst (CSPParAction a [x])
rep_CSPRepParalNS lst a cs ns y (x:xs)
  = (CSPNSParal (NSExprParam ns [x]) (CSExpr cs)
    (NSBigUnion (ZSetComp
           [Choose (y,[]) (ZSetDisplay xs)]
           (Just (ZCall (ZVar (ns,[])) (ZVar (y,[])))) ) )
     ( omega_CAction lst (CSPParAction a [x])) (rep_CSPRepParalNS lst a cs ns y xs) )



rep_CSPRepInterlNS :: [(ZName, ZVar, ZExpr)] -> ZName -> ZName -> String -> [ZExpr] -> CAction
rep_CSPRepInterlNS lst a _ _ [x]
  =  omega_CAction lst (CSPParAction a [x])
rep_CSPRepInterlNS lst a ns y (x:xs)
  = (CSPNSInter (NSExprParam ns [x])
    (NSBigUnion (ZSetComp
           [Choose (y,[]) (ZSetDisplay xs)]
           (Just (ZCall (ZVar (ns,[])) (ZVar (y,[])))) ) )
     ( omega_CAction lst (CSPParAction a [x])) (rep_CSPRepInterlNS lst a ns y xs) )



make_get_com :: [(ZName, ZVar, ZExpr)] -> [ZVar] -> CAction -> CAction
make_get_com lst [(x,[])] c
  = (CSPCommAction (ChanComm "mget"
    [ChanDotExp (ZVar ((get_proc_name x lst)++"_"++x,[])),ChanInp ("v"++(get_proc_name x lst)++"_"++x)]) c)
make_get_com lst ((x,[]):xs) c
  = (CSPCommAction (ChanComm "mget"
    [ChanDotExp (ZVar ((get_proc_name x lst)++"_"++x,[])),ChanInp ("v"++(get_proc_name x lst)++"_"++x)]) (make_get_com lst xs c))
make_get_com lst x c = c    



make_set_com :: [(ZName, ZVar, ZExpr)] -> [ZVar] -> [ZExpr] -> CAction -> CAction
make_set_com lst [(x,[])] [y] c
  = (CSPCommAction (ChanComm "mset"
    [ChanDotExp (ZVar ((get_proc_name x lst)++"_"++x,[])),ChanOutExp y]) (omega_CAction lst c))
make_set_com lst (((x,[])):xs) (y:ys) c
  = (CSPCommAction (ChanComm "mset"
     [ChanDotExp (ZVar ((get_proc_name x lst)++"_"++x,[])),ChanOutExp y]) (make_set_com lst xs ys c))



make_maps_to :: [ZVar] -> [ZExpr]
make_maps_to [(x,[])]
  = [ZCall (ZVar ("\\mapsto",[]))
    (ZTuple [ZVar (x,[]),ZVar ("v"++x,[])])]
make_maps_to ((x,[]):xs)
  = [ZCall (ZVar ("\\mapsto",[]))
    (ZTuple [ZVar (x,[]),ZVar ("v"++x,[])])]++(make_maps_to xs)



get_guard_pair :: CGActions -> [(ZPred, CAction)]
get_guard_pair (CircThenElse (CircGAction g2 a2) (CircGAction g3 a3))
  = [(g2,a2),(g3,a3)]
get_guard_pair (CircThenElse (CircGAction g1 a1) glx)
  = [(g1,a1)]++(get_guard_pair glx)



mk_guard_pair :: [(ZName, ZVar, ZExpr)] -> [(ZPred, CAction)] -> CGActions
mk_guard_pair lst [(g,a)]
  = (CircGAction g (omega_prime_CAction lst a))
mk_guard_pair lst ((g,a):ls)
  = (CircThenElse (CircGAction g (omega_prime_CAction lst a)) (mk_guard_pair lst ls))



propagate_CSPRep (CActionSchemaExpr e) = (CActionSchemaExpr e)
propagate_CSPRep (CActionCommand c) = (CActionCommand c) 
propagate_CSPRep (CActionName n) = (CActionName n) 
propagate_CSPRep (CSPSkip) = (CSPSkip) 
propagate_CSPRep (CSPStop ) = (CSPStop ) 
propagate_CSPRep (CSPChaos) = (CSPChaos) 
propagate_CSPRep (CSPCommAction c a) = (CSPCommAction c (propagate_CSPRep a)) 
propagate_CSPRep (CSPGuard p a) = (CSPGuard p (propagate_CSPRep a)) 
propagate_CSPRep (CSPSeq a1 a2) = (CSPSeq (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPExtChoice a1 a2) = (CSPExtChoice (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPIntChoice a1 a2) = (CSPIntChoice (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPNSParal n1 c n2 a1 a2) = (CSPNSParal n1 c n2 (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPParal c a1 a2) = (CSPParal c (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPNSInter n1 n2 a1 a2) = (CSPNSInter n1 n2 (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPInterleave a1 a2) = (CSPInterleave (propagate_CSPRep a1) (propagate_CSPRep a2)) 
propagate_CSPRep (CSPHide a c) = (CSPHide (propagate_CSPRep a) c) 
propagate_CSPRep (CSPParAction n ls) = (CSPParAction n ls) 
propagate_CSPRep (CSPRenAction n r) = (CSPRenAction n r) 
propagate_CSPRep (CSPRecursion n a) = (CSPRecursion n (propagate_CSPRep a)) 
propagate_CSPRep (CSPUnParAction ls a n) = (CSPUnParAction ls (propagate_CSPRep a) n) 
propagate_CSPRep (CSPRepExtChoice ls a) = (CSPRepExtChoice ls (propagate_CSPRep a)) 
propagate_CSPRep (CSPRepIntChoice ls a) = (CSPRepIntChoice ls (propagate_CSPRep a)) 
propagate_CSPRep (CSPRepParalNS c ls n a) = (CSPRepParalNS c ls n (propagate_CSPRep a)) 
propagate_CSPRep (CSPRepParal c ls a) = (CSPRepParal c ls (propagate_CSPRep a)) 
propagate_CSPRep (CSPRepInterlNS ls n a) = (CSPRepInterlNS ls n (propagate_CSPRep a)) 
propagate_CSPRep (CSPRepInterl ls a) = (CSPRepInterl ls (propagate_CSPRep a)) 



make_memory_proc =
  CParAction "Memory" (CircusAction (CActionCommand (CVResDecl [Choose ("b",[]) (ZVar ("BINDING",[]))] (CSPExtChoice (CSPExtChoice (CSPRepExtChoice [Choose ("n",[]) (ZCall (ZVar ("\\dom",[])) (ZVar ("b",[])))] (CSPCommAction (ChanComm "mget" [ChanDotExp (ZVar ("n",[])),ChanOutExp (ZCall (ZVar ("b",[])) (ZVar ("n",[])))]) (CSPParAction "Memory" [ZVar ("b",[])]))) (CSPRepExtChoice [Choose ("n",[]) (ZCall (ZVar ("\\dom",[])) (ZVar ("b",[])))] (CSPCommAction (ChanComm "mset" [ChanDotExp (ZVar ("n",[])),ChanInpPred "nv" (ZMember (ZVar ("nv",[])) (ZCall (ZVar ("\\delta",[])) (ZVar ("n",[]))))]) (CSPParAction "Memory" [ZCall (ZVar ("\\oplus",[])) (ZTuple [ZVar ("b",[]),ZSetDisplay [ZCall (ZVar ("\\mapsto",[])) (ZTuple [ZVar ("n",[]),ZVar ("nv",[])])]])])))) (CSPCommAction (ChanComm "terminate" []) CSPSkip)))))
\end{code}
